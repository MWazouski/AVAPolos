LOG:  database system was shut down at 2019-04-10 22:50:20 UTC
LOG:  starting up replication identifier with ckpt at 0/16B7888
LOG:  MultiXact member wraparound protections are now enabled
LOG:  starting background worker process "bdr supervisor"
LOG:  autovacuum launcher started
LOG:  database system is ready to accept connections
LOG:  Created database bdr_supervisordb (oid=16385) during BDR startup
LOG:  worker process: bdr supervisor (PID 36) exited with exit code 1
LOG:  starting background worker process "bdr supervisor"
ERROR:  database "moodle" already exists
STATEMENT:  CREATE DATABASE moodle;
LOG:  registering background worker "bdr db: moodle"
LOG:  starting background worker process "bdr db: moodle"
LOG:  logical decoding found consistent point at 0/1887F48
DETAIL:  There are no running transactions.
LOG:  exported logical decoding snapshot: "000002B8-1" with 0 transaction IDs
LOG:  starting logical decoding for slot "bdr_16384_6678401892023767080_1_16384__"
DETAIL:  streaming transactions committing after 0/1887F80, reading WAL from 0/1887F48
LOG:  logical decoding found consistent point at 0/1887F48
DETAIL:  There are no running transactions.
LOG:  could not receive data from client: Connection reset by peer
LOG:  unexpected EOF on standby connection
LOG:  starting logical decoding for slot "bdr_16384_6678401892023767080_1_16384__"
DETAIL:  streaming transactions committing after 0/1888408, reading WAL from 0/1887F48
LOG:  logical decoding found consistent point at 0/1887F48
DETAIL:  There are no running transactions.
LOG:  registering background worker "bdr (6678401888864649257,1,16384,)->bdr (6678401892023767080,1,"
LOG:  starting background worker process "bdr (6678401888864649257,1,16384,)->bdr (6678401892023767080,1,"
ERROR:  relation "mdl_config" does not exist at character 19
STATEMENT:  SELECT value FROM mdl_config WHERE name = $1
ERROR:  relation "mdl_context" does not exist at character 15
STATEMENT:  SELECT * FROM mdl_context WHERE contextlevel = $1
ERROR:  relation "mdl_context" does not exist at character 24
STATEMENT:  SELECT COUNT('x') FROM mdl_context 
ERROR:  relation "mdl_course" does not exist at character 15
STATEMENT:  SELECT * FROM mdl_course WHERE category = $1
ERROR:  relation "mdl_config" does not exist at character 19
STATEMENT:  SELECT value FROM mdl_config WHERE name = $1
ERROR:  relation "mdl_context" does not exist at character 15
STATEMENT:  SELECT * FROM mdl_context WHERE contextlevel = $1
ERROR:  relation "mdl_context" does not exist at character 24
STATEMENT:  SELECT COUNT('x') FROM mdl_context 
ERROR:  relation "mdl_course" does not exist at character 15
STATEMENT:  SELECT * FROM mdl_course WHERE category = $1
ERROR:  relation "mdl_config_plugins" does not exist at character 24
STATEMENT:  SELECT name,value FROM mdl_config_plugins WHERE plugin = $1 
ERROR:  relation "mdl_context" does not exist at character 15
STATEMENT:  SELECT * FROM mdl_context WHERE contextlevel = $1
ERROR:  relation "mdl_context" does not exist at character 24
STATEMENT:  SELECT COUNT('x') FROM mdl_context 
ERROR:  relation "mdl_context" does not exist at character 15
STATEMENT:  SELECT * FROM mdl_context WHERE contextlevel = $1
ERROR:  relation "mdl_context" does not exist at character 24
STATEMENT:  SELECT COUNT('x') FROM mdl_context 
ERROR:  relation "mdl_config" does not exist at character 19
STATEMENT:  SELECT value FROM mdl_config WHERE name = $1
ERROR:  relation "mdl_context" does not exist at character 15
STATEMENT:  SELECT * FROM mdl_context WHERE contextlevel = $1
ERROR:  relation "mdl_context" does not exist at character 24
STATEMENT:  SELECT COUNT('x') FROM mdl_context 
ERROR:  relation "mdl_course" does not exist at character 15
STATEMENT:  SELECT * FROM mdl_course WHERE category = $1
ERROR:  relation "mdl_config_plugins" does not exist at character 24
STATEMENT:  SELECT name,value FROM mdl_config_plugins WHERE plugin = $1 
ERROR:  relation "mdl_context" does not exist at character 15
STATEMENT:  SELECT * FROM mdl_context WHERE contextlevel = $1
ERROR:  relation "mdl_context" does not exist at character 24
STATEMENT:  SELECT COUNT('x') FROM mdl_context 
ERROR:  relation "mdl_context" does not exist at character 15
STATEMENT:  SELECT * FROM mdl_context WHERE contextlevel = $1
ERROR:  relation "mdl_context" does not exist at character 24
STATEMENT:  SELECT COUNT('x') FROM mdl_context 
ERROR:  relation "mdl_config" does not exist at character 19
STATEMENT:  SELECT value FROM mdl_config WHERE name = $1
ERROR:  relation "mdl_context" does not exist at character 15
STATEMENT:  SELECT * FROM mdl_context WHERE contextlevel = $1
ERROR:  relation "mdl_context" does not exist at character 24
STATEMENT:  SELECT COUNT('x') FROM mdl_context 
ERROR:  relation "mdl_course" does not exist at character 15
STATEMENT:  SELECT * FROM mdl_course WHERE category = $1
ERROR:  relation "mdl_config" does not exist at character 19
STATEMENT:  SELECT value FROM mdl_config WHERE name = $1
ERROR:  relation "mdl_context" does not exist at character 15
STATEMENT:  SELECT * FROM mdl_context WHERE contextlevel = $1
ERROR:  relation "mdl_context" does not exist at character 24
STATEMENT:  SELECT COUNT('x') FROM mdl_context 
ERROR:  relation "mdl_course" does not exist at character 15
STATEMENT:  SELECT * FROM mdl_course WHERE category = $1
ERROR:  relation "mdl_config_plugins" does not exist at character 24
STATEMENT:  SELECT name,value FROM mdl_config_plugins WHERE plugin = $1 
ERROR:  relation "mdl_context" does not exist at character 15
STATEMENT:  SELECT * FROM mdl_context WHERE contextlevel = $1
ERROR:  relation "mdl_context" does not exist at character 24
STATEMENT:  SELECT COUNT('x') FROM mdl_context 
LOG:  DDL LOCK TRACE: acquiring in mode <ddl_lock> for (bdr (6678401888864649257,1,16384,)) [tracelevel=statement]
STATEMENT:  BEGIN ISOLATION LEVEL SERIALIZABLE;
	CREATE TABLE mdl_config (
	    id BIGSERIAL,
	    name VARCHAR(255) NOT NULL DEFAULT '',
	    value TEXT NOT NULL,
	CONSTRAINT mdl_conf_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_config IS 'Moodle configuration variables'
	;
	CREATE UNIQUE INDEX mdl_conf_nam_uix ON mdl_config (name)
	;
	CREATE TABLE mdl_config_plugins (
	    id BIGSERIAL,
	    plugin VARCHAR(100) NOT NULL DEFAULT 'core',
	    name VARCHAR(100) NOT NULL DEFAULT '',
	    value TEXT NOT NULL,
	CONSTRAINT mdl_confplug_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_config_plugins IS 'Moodle modules and plugins configuration variables'
	;
	CREATE UNIQUE INDEX mdl_confplug_plunam_uix ON mdl_config_plugins (plugin, name)
	;
	CREATE TABLE mdl_config_log (
	    id BIGSERIAL,
	    userid BIGINT NOT NULL,
	    timemodified BIGINT NOT NULL,
	    plugin VARCHAR(100),
	    name VARCHAR(100) NOT NULL DEFAULT '',
	    value TEXT,
	    oldvalue TEXT,
	CONSTRAINT mdl_conflog_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_config_log IS 'Changes done in server configuration through admin UI'
	;
	CREATE INDEX mdl_conflog_tim_ix ON mdl_config_log (timemodified)
	;
	CREATE INDEX mdl_conflog_use_ix ON mdl_config_log (userid)
	;
	CREATE TABLE mdl_upgrade_log (
	    id BIGSERIAL,
	    type BIGINT NOT NULL,
	    plugin VARCHAR(100),
	    version VARCHAR(100),
	    targetversion VARCHAR(100),
	    info VARCHAR(255) NOT NULL DEFAULT '',
	    details TEXT,
	    backtrace TEXT,
	    userid BIGINT NOT NULL,
	    timemodified BIGINT NOT NULL,
	CONSTRAINT mdl_upgrlog_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_upgrade_log IS 'Upgrade logging'
	;
	CREATE INDEX mdl_upgrlog_tim_ix ON mdl_upgrade_log (timemodified)
	;
	CREATE INDEX mdl_upgrlog_typtim_ix ON mdl_upgrade_log (type, timemodified)
	;
	CREATE INDEX mdl_upgrlog_use_ix ON mdl_upgrade_log (userid)
	;
	CREATE TABLE mdl_course (
	    id BIGSERIAL,
	    category BIGINT NOT NULL DEFAULT 0,
	    sortorder BIGINT NOT NULL DEFAULT 0,
	    fullname VARCHAR(254) NOT NULL DEFAULT '',
	    shortname VARCHAR(255) NOT NULL DEFAULT '',
	    idnumber VARCHAR(100) NOT NULL DEFAULT '',
	    summary TEXT,
	    summaryformat SMALLINT NOT NULL DEFAULT 0,
	    format VARCHAR(21) NOT NULL DEFAULT 'topics',
	    showgrades SMALLINT NOT NULL DEFAULT 1,
	    newsitems INTEGER NOT NULL DEFAULT 1,
	    startdate BIGINT NOT NULL DEFAULT 0,
	    enddate BIGINT NOT NULL DEFAULT 0,
	    marker BIGINT NOT NULL DEFAULT 0,
	    maxbytes BIGINT NOT NULL DEFAULT 0,
	    legacyfiles SMALLINT NOT NULL DEFAULT 0,
	    showreports SMALLINT NOT NULL DEFAULT 0,
	    visible SMALLINT NOT NULL DEFAULT 1,
	    visibleold SMALLINT NOT NULL DEFAULT 1,
	    groupmode SMALLINT NOT NULL DEFAULT 0,
	    groupmodeforce SMALLINT NOT NULL DEFAULT 0,
	    defaultgroupingid BIGINT NOT NULL DEFAULT 0,
	    lang VARCHAR(30) NOT NULL DEFAULT '',
	    calendartype VARCHAR(30) NOT NULL DEFAULT '',
	    theme VARCHAR(50) NOT NULL DEFAULT '',
	    timecreated BIGINT NOT NULL DEFAULT 0,
	    timemodified BIGINT NOT NULL DEFAULT 0,
	    requested SMALLINT NOT NULL DEFAULT 0,
	    enablecompletion SMALLINT NOT NULL DEFAULT 0,
	    completionnotify SMALLINT NOT NULL DEFAULT 0,
	    cacherev BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_cour_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_course IS 'Central course table'
	;
	CREATE INDEX mdl_cour_cat_ix ON mdl_course (category)
	;
	CREATE INDEX mdl_cour_idn_ix ON mdl_course (idnumber)
	;
	CREATE INDEX mdl_cour_sho_ix ON mdl_course (shortname)
	;
	CREATE INDEX mdl_cour_sor_ix ON mdl_course (sortorder)
	;
	CREATE TABLE mdl_course_categories (
	    id BIGSERIAL,
	    name VARCHAR(255) NOT NULL DEFAULT '',
	    idnumber VARCHAR(100),
	    description TEXT,
	    descriptionformat SMALLINT NOT NULL DEFAULT 0,
	    parent BIGINT NOT NULL DEFAULT 0,
	    sortorder BIGINT NOT NULL DEFAULT 0,
	    coursecount BIGINT NOT NULL DEFAULT 0,
	    visible SMALLINT NOT NULL DEFAULT 1,
	    visibleold SMALLINT NOT NULL DEFAULT 1,
	    timemodified BIGINT NOT NULL DEFAULT 0,
	    depth BIGINT NOT NULL DEFAULT 0,
	    path VARCHAR(255) NOT NULL DEFAULT '',
	    theme VARCHAR(50),
	CONSTRAINT mdl_courcate_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_course_categories IS 'Course categories'
	;
	CREATE INDEX mdl_courcate_par_ix ON mdl_course_categories (parent)
	;
	CREATE TABLE mdl_course_completion_aggr_methd (
	    id BIGSERIAL,
	    course BIGINT NOT NULL DEFAULT 0,
	    criteriatype BIGINT,
	    method SMALLINT NOT NULL DEFAULT 0,
	    value NUMERIC(10,5),
	CONSTRAINT mdl_courcompaggrmeth_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_course_completion_aggr_methd IS 'Course completion aggregation methods for criteria'
	;
	CREATE INDEX mdl_courcompaggrmeth_cou_ix ON mdl_course_completion_aggr_methd (course)
	;
	CREATE INDEX mdl_courcompaggrmeth_cri_ix ON mdl_course_completion_aggr_methd (criteriatype)
	;
	CREATE UNIQUE INDEX mdl_courcompaggrmeth_coucr_uix ON mdl_course_completion_aggr_methd (course, criteriatype)
	;
	CREATE TABLE mdl_course_completion_criteria (
	    id BIGSERIAL,
	    course BIGINT NOT NULL DEFAULT 0,
	    criteriatype BIGINT NOT NULL DEFAULT 0,
	    module VARCHAR(100),
	    moduleinstance BIGINT,
	    courseinstance BIGINT,
	    enrolperiod BIGINT,
	    timeend BIGINT,
	    gradepass NUMERIC(10,5),
	    role BIGINT,
	CONSTRAINT mdl_courcompcrit_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_course_completion_criteria IS 'Course completion criteria'
	;
	CREATE INDEX mdl_courcompcrit_cou_ix ON mdl_course_completion_criteria (course)
	;
	CREATE TABLE mdl_course_completion_crit_compl (
	    id BIGSERIAL,
	    userid BIGINT NOT NULL DEFAULT 0,
	    course BIGINT NOT NULL DEFAULT 0,
	    criteriaid BIGINT NOT NULL DEFAULT 0,
	    gradefinal NUMERIC(10,5),
	    unenroled BIGINT,
	    timecompleted BIGINT,
	CONSTRAINT mdl_courcompcritcomp_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_course_completion_crit_compl IS 'Course completion user records'
	;
	CREATE INDEX mdl_courcompcritcomp_use_ix ON mdl_course_completion_crit_compl (userid)
	;
	CREATE INDEX mdl_courcompcritcomp_cou_ix ON mdl_course_completion_crit_compl (course)
	;
	CREATE INDEX mdl_courcompcritcomp_cri_ix ON mdl_course_completion_crit_compl (criteriaid)
	;
	CREATE INDEX mdl_courcompcritcomp_tim_ix ON mdl_course_completion_crit_compl (timecompleted)
	;
	CREATE UNIQUE INDEX mdl_courcompcritcomp_useco_uix ON mdl_course_completion_crit_compl (userid, course, criteriaid)
	;
	CREATE TABLE mdl_course_completions (
	    id BIGSERIAL,
	    userid BIGINT NOT NULL DEFAULT 0,
	    course BIGINT NOT NULL DEFAULT 0,
	    timeenrolled BIGINT NOT NULL DEFAULT 0,
	    timestarted BIGINT NOT NULL DEFAULT 0,
	    timecompleted BIGINT,
	    reaggregate BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_courcomp_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_course_completions IS 'Course completion records'
	;
	CREATE INDEX mdl_courcomp_use_ix ON mdl_course_completions (userid)
	;
	CREATE INDEX mdl_courcomp_cou_ix ON mdl_course_completions (course)
	;
	CREATE INDEX mdl_courcomp_tim_ix ON mdl_course_completions (timecompleted)
	;
	CREATE UNIQUE INDEX mdl_courcomp_usecou_uix ON mdl_course_completions (userid, course)
	;
	CREATE TABLE mdl_enrol (
	    id BIGSERIAL,
	    enrol VARCHAR(20) NOT NULL DEFAULT '',
	    status BIGINT NOT NULL DEFAULT 0,
	    courseid BIGINT NOT NULL,
	    sortorder BIGINT NOT NULL DEFAULT 0,
	    name VARCHAR(255),
	    enrolperiod BIGINT DEFAULT 0,
	    enrolstartdate BIGINT DEFAULT 0,
	    enrolenddate BIGINT DEFAULT 0,
	    expirynotify SMALLINT DEFAULT 0,
	    expirythreshold BIGINT DEFAULT 0,
	    notifyall SMALLINT DEFAULT 0,
	    password VARCHAR(50),
	    cost VARCHAR(20),
	    currency VARCHAR(3),
	    roleid BIGINT DEFAULT 0,
	    customint1 BIGINT,
	    customint2 BIGINT,
	    customint3 BIGINT,
	    customint4 BIGINT,
	    customint5 BIGINT,
	    customint6 BIGINT,
	    customint7 BIGINT,
	    customint8 BIGINT,
	    customchar1 VARCHAR(255),
	    customchar2 VARCHAR(255),
	    customchar3 VARCHAR(1333),
	    customdec1 NUMERIC(12,7),
	    customdec2 NUMERIC(12,7),
	    customtext1 TEXT,
	    customtext2 TEXT,
	    customtext3 TEXT,
	    customtext4 TEXT,
	    timecreated BIGINT NOT NULL DEFAULT 0,
	    timemodified BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_enro_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_enrol IS 'Instances of enrolment plugins used in courses, fields marked as custom have a plugin defined meaning, core does not touch them. Create a new linked table if you need even more custom fields.'
	;
	CREATE INDEX mdl_enro_enr_ix ON mdl_enrol (enrol)
	;
	CREATE INDEX mdl_enro_cou_ix ON mdl_enrol (courseid)
	;
	CREATE TABLE mdl_user_enrolments (
	    id BIGSERIAL,
	    status BIGINT NOT NULL DEFAULT 0,
	    enrolid BIGINT NOT NULL,
	    userid BIGINT NOT NULL,
	    timestart BIGINT NOT NULL DEFAULT 0,
	    timeend BIGINT NOT NULL DEFAULT 2147483647,
	    modifierid BIGINT NOT NULL DEFAULT 0,
	    timecreated BIGINT NOT NULL DEFAULT 0,
	    timemodified BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_userenro_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_user_enrolments IS 'Users participating in courses (aka enrolled users) - everybody who is participating/visible in course, that means both teachers and students'
	;
	CREATE UNIQUE INDEX mdl_userenro_enruse_uix ON mdl_user_enrolments (enrolid, userid)
	;
	CREATE INDEX mdl_userenro_enr_ix ON mdl_user_enrolments (enrolid)
	;
	CREATE INDEX mdl_userenro_use_ix ON mdl_user_enrolments (userid)
	;
	CREATE INDEX mdl_userenro_mod_ix ON mdl_user_enrolments (modifierid)
	;
	CREATE TABLE mdl_course_modules (
	    id BIGSERIAL,
	    course BIGINT NOT NULL DEFAULT 0,
	    module BIGINT NOT NULL DEFAULT 0,
	    instance BIGINT NOT NULL DEFAULT 0,
	    section BIGINT NOT NULL DEFAULT 0,
	    idnumber VARCHAR(100),
	    added BIGINT NOT NULL DEFAULT 0,
	    score SMALLINT NOT NULL DEFAULT 0,
	    indent INTEGER NOT NULL DEFAULT 0,
	    visible SMALLINT NOT NULL DEFAULT 1,
	    visibleoncoursepage SMALLINT NOT NULL DEFAULT 1,
	    visibleold SMALLINT NOT NULL DEFAULT 1,
	    groupmode SMALLINT NOT NULL DEFAULT 0,
	    groupingid BIGINT NOT NULL DEFAULT 0,
	    completion SMALLINT NOT NULL DEFAULT 0,
	    completiongradeitemnumber BIGINT,
	    completionview SMALLINT NOT NULL DEFAULT 0,
	    completionexpected BIGINT NOT NULL DEFAULT 0,
	    showdescription SMALLINT NOT NULL DEFAULT 0,
	    availability TEXT,
	    deletioninprogress SMALLINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_courmodu_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_course_modules IS 'course_modules table retrofitted from MySQL'
	;
	CREATE INDEX mdl_courmodu_vis_ix ON mdl_course_modules (visible)
	;
	CREATE INDEX mdl_courmodu_cou_ix ON mdl_course_modules (course)
	;
	CREATE INDEX mdl_courmodu_mod_ix ON mdl_course_modules (module)
	;
	CREATE INDEX mdl_courmodu_ins_ix ON mdl_course_modules (instance)
	;
	CREATE INDEX mdl_courmodu_idncou_ix ON mdl_course_modules (idnumber, course)
	;
	CREATE INDEX mdl_courmodu_gro_ix ON mdl_course_modules (groupingid)
	;
	CREATE TABLE mdl_course_modules_completion (
	    id BIGSERIAL,
	    coursemoduleid BIGINT NOT NULL,
	    userid BIGINT NOT NULL,
	    completionstate SMALLINT NOT NULL,
	    viewed SMALLINT,
	    overrideby BIGINT,
	    timemodified BIGINT NOT NULL,
	CONSTRAINT mdl_courmoducomp_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_course_modules_completion IS 'Stores the completion state (completed or not completed, etc) of each user on each activity.'
	;
	CREATE INDEX mdl_courmoducomp_cou_ix ON mdl_course_modules_completion (coursemoduleid)
	;
	CREATE UNIQUE INDEX mdl_courmoducomp_usecou_uix ON mdl_course_modules_completion (userid, coursemoduleid)
	;
	CREATE TABLE mdl_course_sections (
	    id BIGSERIAL,
	    course BIGINT NOT NULL DEFAULT 0,
	    section BIGINT NOT NULL DEFAULT 0,
	    name VARCHAR(255),
	    summary TEXT,
	    summaryformat SMALLINT NOT NULL DEFAULT 0,
	    sequence TEXT,
	    visible SMALLINT NOT NULL DEFAULT 1,
	    availability TEXT,
	    timemodified BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_coursect_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_course_sections IS 'to define the sections for each course'
	;
	CREATE UNIQUE INDEX mdl_coursect_cousec_uix ON mdl_course_sections (course, section)
	;
	CREATE TABLE mdl_course_request (
	    id BIGSERIAL,
	    fullname VARCHAR(254) NOT NULL DEFAULT '',
	    shortname VARCHAR(100) NOT NULL DEFAULT '',
	    summary TEXT NOT NULL,
	    summaryformat SMALLINT NOT NULL DEFAULT 0,
	    category BIGINT NOT NULL DEFAULT 0,
	    reason TEXT NOT NULL,
	    requester BIGINT NOT NULL DEFAULT 0,
	    password VARCHAR(50) NOT NULL DEFAULT '',
	CONSTRAINT mdl_courrequ_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_course_request IS 'course requests'
	;
	CREATE INDEX mdl_courrequ_sho_ix ON mdl_course_request (shortname)
	;
	CREATE TABLE mdl_course_format_options (
	    id BIGSERIAL,
	    courseid BIGINT NOT NULL,
	    format VARCHAR(21) NOT NULL DEFAULT '',
	    sectionid BIGINT NOT NULL DEFAULT 0,
	    name VARCHAR(100) NOT NULL DEFAULT '',
	    value TEXT,
	CONSTRAINT mdl_courformopti_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_course_format_options IS 'Stores format-specific options for the course or course section'
	;
	CREATE UNIQUE INDEX mdl_courformopti_couforsec_uix ON mdl_course_format_options (courseid, format, sectionid, name)
	;
	CREATE INDEX mdl_courformopti_cou_ix ON mdl_course_format_options (courseid)
	;
	CREATE TABLE mdl_filter_active (
	    id BIGSERIAL,
	    filter VARCHAR(32) NOT NULL DEFAULT '',
	    contextid BIGINT NOT NULL,
	    active SMALLINT NOT NULL,
	    sortorder BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_filtacti_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_filter_active IS 'Stores information about which filters are active in which contexts. Also the filter sort order. See get_active_filters in lib/filterlib.php for how this data is used.'
	;
	CREATE UNIQUE INDEX mdl_filtacti_confil_uix ON mdl_filter_active (contextid, filter)
	;
	CREATE INDEX mdl_filtacti_con_ix ON mdl_filter_active (contextid)
	;
	CREATE TABLE mdl_filter_config (
	    id BIGSERIAL,
	    filter VARCHAR(32) NOT NULL DEFAULT '',
	    contextid BIGINT NOT NULL,
	    name VARCHAR(255) NOT NULL DEFAULT '',
	    value TEXT,
	CONSTRAINT mdl_filtconf_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_filter_config IS 'Stores per-context configuration settings for filters which have them.'
	;
	CREATE UNIQUE INDEX mdl_filtconf_confilnam_uix ON mdl_filter_config (contextid, filter, name)
	;
	CREATE INDEX mdl_filtconf_con_ix ON mdl_filter_config (contextid)
	;
	CREATE TABLE mdl_event (
	    id BIGSERIAL,
	    name TEXT NOT NULL,
	    description TEXT NOT NULL,
	    format SMALLINT NOT NULL DEFAULT 0,
	    categoryid BIGINT NOT NULL DEFAULT 0,
	    courseid BIGINT NOT NULL DEFAULT 0,
	    groupid BIGINT NOT NULL DEFAULT 0,
	    userid BIGINT NOT NULL DEFAULT 0,
	    repeatid BIGINT NOT NULL DEFAULT 0,
	    modulename VARCHAR(20) NOT NULL DEFAULT '',
	    instance BIGINT NOT NULL DEFAULT 0,
	    type SMALLINT NOT NULL DEFAULT 0,
	    eventtype VARCHAR(20) NOT NULL DEFAULT '',
	    timestart BIGINT NOT NULL DEFAULT 0,
	    timeduration BIGINT NOT NULL DEFAULT 0,
	    timesort BIGINT,
	    visible SMALLINT NOT NULL DEFAULT 1,
	    uuid VARCHAR(255) NOT NULL DEFAULT '',
	    sequence BIGINT NOT NULL DEFAULT 1,
	    timemodified BIGINT NOT NULL DEFAULT 0,
	    subscriptionid BIGINT,
	    priority BIGINT,
	CONSTRAINT mdl_even_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_event IS 'For everything with a time associated to it'
	;
	CREATE INDEX mdl_even_cou_ix ON mdl_event (courseid)
	;
	CREATE INDEX mdl_even_use_ix ON mdl_event (userid)
	;
	CREATE INDEX mdl_even_tim_ix ON mdl_event (timestart)
	;
	CREATE INDEX mdl_even_tim2_ix ON mdl_event (timeduration)
	;
	CREATE INDEX mdl_even_uui_ix ON mdl_event (uuid)
	;
	CREATE INDEX mdl_even_typtim_ix ON mdl_event (type, timesort)
	;
	CREATE INDEX mdl_even_grocoucatvisuse_ix ON mdl_event (groupid, courseid, categoryid, visible, userid)
	;
	CREATE INDEX mdl_even_cat_ix ON mdl_event (categoryid)
	;
	CREATE INDEX mdl_even_sub_ix ON mdl_event (subscriptionid)
	;
	CREATE TABLE mdl_cache_filters (
	    id BIGSERIAL,
	    filter VARCHAR(32) NOT NULL DEFAULT '',
	    version BIGINT NOT NULL DEFAULT 0,
	    md5key VARCHAR(32) NOT NULL DEFAULT '',
	    rawtext TEXT NOT NULL,
	    timemodified BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_cachfilt_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_cache_filters IS 'For keeping information about cached data'
	;
	CREATE INDEX mdl_cachfilt_filmd5_ix ON mdl_cache_filters (filter, md5key)
	;
	CREATE TABLE mdl_log (
	    id BIGSERIAL,
	    time BIGINT NOT NULL DEFAULT 0,
	    userid BIGINT NOT NULL DEFAULT 0,
	    ip VARCHAR(45) NOT NULL DEFAULT '',
	    course BIGINT NOT NULL DEFAULT 0,
	    module VARCHAR(20) NOT NULL DEFAULT '',
	    cmid BIGINT NOT NULL DEFAULT 0,
	    action VARCHAR(40) NOT NULL DEFAULT '',
	    url VARCHAR(100) NOT NULL DEFAULT '',
	    info VARCHAR(255) NOT NULL DEFAULT '',
	CONSTRAINT mdl_log_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_log IS 'Every action is logged as far as possible'
	;
	CREATE INDEX mdl_log_coumodact_ix ON mdl_log (course, module, action)
	;
	CREATE INDEX mdl_log_tim_ix ON mdl_log (time)
	;
	CREATE INDEX mdl_log_act_ix ON mdl_log (action)
	;
	CREATE INDEX mdl_log_usecou_ix ON mdl_log (userid, course)
	;
	CREATE INDEX mdl_log_cmi_ix ON mdl_log (cmid)
	;
	CREATE TABLE mdl_log_queries (
	    id BIGSERIAL,
	    qtype INTEGER NOT NULL,
	    sqltext TEXT NOT NULL,
	    sqlparams TEXT,
	    error INTEGER NOT NULL DEFAULT 0,
	    info TEXT,
	    backtrace TEXT,
	    exectime NUMERIC(10,5) NOT NULL,
	    timelogged BIGINT NOT NULL,
	CONSTRAINT mdl_logquer_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_log_queries IS 'Logged database queries.'
	;
	CREATE TABLE mdl_log_display (
	    id BIGSERIAL,
	    module VARCHAR(20) NOT NULL DEFAULT '',
	    action VARCHAR(40) NOT NULL DEFAULT '',
	    mtable VARCHAR(30) NOT NULL DEFAULT '',
	    field VARCHAR(200) NOT NULL DEFAULT '',
	    component VARCHAR(100) NOT NULL DEFAULT '',
	CONSTRAINT mdl_logdisp_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_log_display IS 'For a particular module/action, specifies a moodle table/field'
	;
	CREATE UNIQUE INDEX mdl_logdisp_modact_uix ON mdl_log_display (module, action)
	;
	CREATE TABLE mdl_message (
	    id BIGSERIAL,
	    useridfrom BIGINT NOT NULL DEFAULT 0,
	    useridto BIGINT NOT NULL DEFAULT 0,
	    subject TEXT,
	    fullmessage TEXT,
	    fullmessageformat SMALLINT DEFAULT 0,
	    fullmessagehtml TEXT,
	    smallmessage TEXT,
	    notification SMALLINT DEFAULT 0,
	    contexturl TEXT,
	    contexturlname TEXT,
	    timecreated BIGINT NOT NULL DEFAULT 0,
	    timeuserfromdeleted BIGINT NOT NULL DEFAULT 0,
	    timeusertodeleted BIGINT NOT NULL DEFAULT 0,
	    component VARCHAR(100),
	    eventtype VARCHAR(100),
	CONSTRAINT mdl_mess_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_message IS 'Stores all unread messages'
	;
	CREATE INDEX mdl_mess_useusetimtim_ix ON mdl_message (useridfrom, useridto, timeuserfromdeleted, timeusertodeleted)
	;
	CREATE INDEX mdl_mess_usetimnot_ix ON mdl_message (useridfrom, timeuserfromdeleted, notification)
	;
	CREATE INDEX mdl_mess_usetimnot2_ix ON mdl_message (useridto, timeusertodeleted, notification)
	;
	CREATE TABLE mdl_message_read (
	    id BIGSERIAL,
	    useridfrom BIGINT NOT NULL DEFAULT 0,
	    useridto BIGINT NOT NULL DEFAULT 0,
	    subject TEXT,
	    fullmessage TEXT,
	    fullmessageformat SMALLINT DEFAULT 0,
	    fullmessagehtml TEXT,
	    smallmessage TEXT,
	    notification SMALLINT DEFAULT 0,
	    contexturl TEXT,
	    contexturlname TEXT,
	    timecreated BIGINT NOT NULL DEFAULT 0,
	    timeread BIGINT NOT NULL DEFAULT 0,
	    timeuserfromdeleted BIGINT NOT NULL DEFAULT 0,
	    timeusertodeleted BIGINT NOT NULL DEFAULT 0,
	    component VARCHAR(100),
	    eventtype VARCHAR(100),
	CONSTRAINT mdl_messread_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_message_read IS 'Stores all messages that have been read'
	;
	CREATE INDEX mdl_messread_useusetimtim_ix ON mdl_message_read (useridfrom, useridto, timeuserfromdeleted, timeusertodeleted)
	;
	CREATE INDEX mdl_messread_nottim_ix ON mdl_message_read (notification, timeread)
	;
	CREATE INDEX mdl_messread_usetimnot_ix ON mdl_message_read (useridfrom, timeuserfromdeleted, notification)
	;
	CREATE INDEX mdl_messread_usetimnot2_ix ON mdl_message_read (useridto, timeusertodeleted, notification)
	;
	CREATE TABLE mdl_messages (
	    id BIGSERIAL,
	    useridfrom BIGINT NOT NULL,
	    conversationid BIGINT NOT NULL,
	    subject TEXT,
	    fullmessage TEXT,
	    fullmessageformat SMALLINT NOT NULL DEFAULT 0,
	    fullmessagehtml TEXT,
	    smallmessage TEXT,
	    timecreated BIGINT NOT NULL,
	CONSTRAINT mdl_mess_id3_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_messages IS 'Stores all messages'
	;
	CREATE INDEX mdl_mess_contim_ix ON mdl_messages (conversationid, timecreated)
	;
	CREATE INDEX mdl_mess_use_ix ON mdl_messages (useridfrom)
	;
	CREATE INDEX mdl_mess_con_ix ON mdl_messages (conversationid)
	;
	CREATE TABLE mdl_message_conversations (
	    id BIGSERIAL,
	    convhash VARCHAR(40) NOT NULL DEFAULT '',
	    timecreated BIGINT NOT NULL,
	CONSTRAINT mdl_messconv_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_message_conversations IS 'Stores all message conversations'
	;
	CREATE UNIQUE INDEX mdl_messconv_con_uix ON mdl_message_conversations (convhash)
	;
	CREATE TABLE mdl_message_conversation_members (
	    id BIGSERIAL,
	    conversationid BIGINT NOT NULL,
	    userid BIGINT NOT NULL,
	    timecreated BIGINT NOT NULL,
	CONSTRAINT mdl_messconvmemb_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_message_conversation_members IS 'Stores all members in a conversations'
	;
	CREATE INDEX mdl_messconvmemb_con_ix ON mdl_message_conversation_members (conversationid)
	;
	CREATE INDEX mdl_messconvmemb_use_ix ON mdl_message_conversation_members (userid)
	;
	CREATE TABLE mdl_message_user_actions (
	    id BIGSERIAL,
	    userid BIGINT NOT NULL,
	    messageid BIGINT NOT NULL,
	    action BIGINT NOT NULL,
	    timecreated BIGINT NOT NULL,
	CONSTRAINT mdl_messuseracti_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_message_user_actions IS 'Stores all per-user actions on individual messages'
	;
	CREATE UNIQUE INDEX mdl_messuseracti_usemesact_uix ON mdl_message_user_actions (userid, messageid, action)
	;
	CREATE INDEX mdl_messuseracti_use_ix ON mdl_message_user_actions (userid)
	;
	CREATE INDEX mdl_messuseracti_mes_ix ON mdl_message_user_actions (messageid)
	;
	CREATE TABLE mdl_notifications (
	    id BIGSERIAL,
	    useridfrom BIGINT NOT NULL,
	    useridto BIGINT NOT NULL,
	    subject TEXT,
	    fullmessage TEXT,
	    fullmessageformat SMALLINT NOT NULL DEFAULT 0,
	    fullmessagehtml TEXT,
	    smallmessage TEXT,
	    component VARCHAR(100),
	    eventtype VARCHAR(100),
	    contexturl TEXT,
	    contexturlname TEXT,
	    timeread BIGINT,
	    timecreated BIGINT NOT NULL,
	CONSTRAINT mdl_noti_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_notifications IS 'Stores all notifications'
	;
	CREATE INDEX mdl_noti_use_ix ON mdl_notifications (useridfrom)
	;
	CREATE INDEX mdl_noti_use2_ix ON mdl_notifications (useridto)
	;
	CREATE TABLE mdl_message_contacts (
	    id BIGSERIAL,
	    userid BIGINT NOT NULL DEFAULT 0,
	    contactid BIGINT NOT NULL DEFAULT 0,
	    blocked SMALLINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_messcont_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_message_contacts IS 'Maintains lists of relationships between users'
	;
	CREATE UNIQUE INDEX mdl_messcont_usecon_uix ON mdl_message_contacts (userid, contactid)
	;
	CREATE TABLE mdl_modules (
	    id BIGSERIAL,
	    name VARCHAR(20) NOT NULL DEFAULT '',
	    cron BIGINT NOT NULL DEFAULT 0,
	    lastcron BIGINT NOT NULL DEFAULT 0,
	    search VARCHAR(255) NOT NULL DEFAULT '',
	    visible SMALLINT NOT NULL DEFAULT 1,
	CONSTRAINT mdl_modu_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_modules IS 'modules available in the site'
	;
	CREATE INDEX mdl_modu_nam_ix ON mdl_modules (name)
	;
	CREATE TABLE mdl_my_pages (
	    id BIGSERIAL,
	    userid BIGINT DEFAULT 0,
	    name VARCHAR(200) NOT NULL DEFAULT '',
	    private SMALLINT NOT NULL DEFAULT 1,
	    sortorder INTEGER NOT NULL DEFAULT 0,
	CONSTRAINT mdl_mypage_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_my_pages IS 'Extra user pages for the My Moodle system'
	;
	CREATE INDEX mdl_mypage_usepri_ix ON mdl_my_pages (userid, private)
	;
	CREATE TABLE mdl_sessions (
	    id BIGSERIAL,
	    state BIGINT NOT NULL DEFAULT 0,
	    sid VARCHAR(128) NOT NULL DEFAULT '',
	    userid BIGINT NOT NULL,
	    sessdata TEXT,
	    timecreated BIGINT NOT NULL,
	    timemodified BIGINT NOT NULL,
	    firstip VARCHAR(45),
	    lastip VARCHAR(45),
	CONSTRAINT mdl_sess_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_sessions IS 'Database based session storage - now recommended'
	;
	CREATE INDEX mdl_sess_sta_ix ON mdl_sessions (state)
	;
	CREATE UNIQUE INDEX mdl_sess_sid_uix ON mdl_sessions (sid)
	;
	CREATE INDEX mdl_sess_tim_ix ON mdl_sessions (timecreated)
	;
	CREATE INDEX mdl_sess_tim2_ix ON mdl_sessions (timemodified)
	;
	CREATE INDEX mdl_sess_use_ix ON mdl_sessions (userid)
	;
	CREATE TABLE mdl_user (
	    id BIGSERIAL,
	    auth VARCHAR(20) NOT NULL DEFAULT 'manual',
	    confirmed SMALLINT NOT NULL DEFAULT 0,
	    policyagreed SMALLINT NOT NULL DEFAULT 0,
	    deleted SMALLINT NOT NULL DEFAULT 0,
	    suspended SMALLINT NOT NULL DEFAULT 0,
	    mnethostid BIGINT NOT NULL DEFAULT 0,
	    username VARCHAR(100) NOT NULL DEFAULT '',
	    password VARCHAR(255) NOT NULL DEFAULT '',
	    idnumber VARCHAR(255) NOT NULL DEFAULT '',
	    firstname VARCHAR(100) NOT NULL DEFAULT '',
	    lastname VARCHAR(100) NOT NULL DEFAULT '',
	    email VARCHAR(100) NOT NULL DEFAULT '',
	    emailstop SMALLINT NOT NULL DEFAULT 0,
	    icq VARCHAR(15) NOT NULL DEFAULT '',
	    skype VARCHAR(50) NOT NULL DEFAULT '',
	    yahoo VARCHAR(50) NOT NULL DEFAULT '',
	    aim VARCHAR(50) NOT NULL DEFAULT '',
	    msn VARCHAR(50) NOT NULL DEFAULT '',
	    phone1 VARCHAR(20) NOT NULL DEFAULT '',
	    phone2 VARCHAR(20) NOT NULL DEFAULT '',
	    institution VARCHAR(255) NOT NULL DEFAULT '',
	    department VARCHAR(255) NOT NULL DEFAULT '',
	    address VARCHAR(255) NOT NULL DEFAULT '',
	    city VARCHAR(120) NOT NULL DEFAULT '',
	    country VARCHAR(2) NOT NULL DEFAULT '',
	    lang VARCHAR(30) NOT NULL DEFAULT 'en',
	    calendartype VARCHAR(30) NOT NULL DEFAULT 'gregorian',
	    theme VARCHAR(50) NOT NULL DEFAULT '',
	    timezone VARCHAR(100) NOT NULL DEFAULT '99',
	    firstaccess BIGINT NOT NULL DEFAULT 0,
	    lastaccess BIGINT NOT NULL DEFAULT 0,
	    lastlogin BIGINT NOT NULL DEFAULT 0,
	    currentlogin BIGINT NOT NULL DEFAULT 0,
	    lastip VARCHAR(45) NOT NULL DEFAULT '',
	    secret VARCHAR(15) NOT NULL DEFAULT '',
	    picture BIGINT NOT NULL DEFAULT 0,
	    url VARCHAR(255) NOT NULL DEFAULT '',
	    description TEXT,
	    descriptionformat SMALLINT NOT NULL DEFAULT 1,
	    mailformat SMALLINT NOT NULL DEFAULT 1,
	    maildigest SMALLINT NOT NULL DEFAULT 0,
	    maildisplay SMALLINT NOT NULL DEFAULT 2,
	    autosubscribe SMALLINT NOT NULL DEFAULT 1,
	    trackforums SMALLINT NOT NULL DEFAULT 0,
	    timecreated BIGINT NOT NULL DEFAULT 0,
	    timemodified BIGINT NOT NULL DEFAULT 0,
	    trustbitmask BIGINT NOT NULL DEFAULT 0,
	    imagealt VARCHAR(255),
	    lastnamephonetic VARCHAR(255),
	    firstnamephonetic VARCHAR(255),
	    middlename VARCHAR(255),
	    alternatename VARCHAR(255),
	CONSTRAINT mdl_user_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_user IS 'One record for each person'
	;
	CREATE UNIQUE INDEX mdl_user_mneuse_uix ON mdl_user (mnethostid, username)
	;
	CREATE INDEX mdl_user_del_ix ON mdl_user (deleted)
	;
	CREATE INDEX mdl_user_con_ix ON mdl_user (confirmed)
	;
	CREATE INDEX mdl_user_fir_ix ON mdl_user (firstname)
	;
	CREATE INDEX mdl_user_las_ix ON mdl_user (lastname)
	;
	CREATE INDEX mdl_user_cit_ix ON mdl_user (city)
	;
	CREATE INDEX mdl_user_cou_ix ON mdl_user (country)
	;
	CREATE INDEX mdl_user_las2_ix ON mdl_user (lastaccess)
	;
	CREATE INDEX mdl_user_ema_ix ON mdl_user (email)
	;
	CREATE INDEX mdl_user_aut_ix ON mdl_user (auth)
	;
	CREATE INDEX mdl_user_idn_ix ON mdl_user (idnumber)
	;
	CREATE INDEX mdl_user_fir2_ix ON mdl_user (firstnamephonetic)
	;
	CREATE INDEX mdl_user_las3_ix ON mdl_user (lastnamephonetic)
	;
	CREATE INDEX mdl_user_mid_ix ON mdl_user (middlename)
	;
	CREATE INDEX mdl_user_alt_ix ON mdl_user (alternatename)
	;
	CREATE TABLE mdl_user_preferences (
	    id BIGSERIAL,
	    userid BIGINT NOT NULL DEFAULT 0,
	    name VARCHAR(255) NOT NULL DEFAULT '',
	    value VARCHAR(1333) NOT NULL DEFAULT '',
	CONSTRAINT mdl_userpref_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_user_preferences IS 'Allows modules to store arbitrary user preferences'
	;
	CREATE UNIQUE INDEX mdl_userpref_usenam_uix ON mdl_user_preferences (userid, name)
	;
	CREATE TABLE mdl_user_lastaccess (
	    id BIGSERIAL,
	    userid BIGINT NOT NULL DEFAULT 0,
	    courseid BIGINT NOT NULL DEFAULT 0,
	    timeaccess BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_userlast_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_user_lastaccess IS 'To keep track of course page access times, used in online participants block, and participants list'
	;
	CREATE UNIQUE INDEX mdl_userlast_usecou_uix ON mdl_user_lastaccess (userid, courseid)
	;
	CREATE INDEX mdl_userlast_use_ix ON mdl_user_lastaccess (userid)
	;
	CREATE INDEX mdl_userlast_cou_ix ON mdl_user_lastaccess (courseid)
	;
	CREATE TABLE mdl_user_password_history (
	    id BIGSERIAL,
	    userid BIGINT NOT NULL,
	    hash VARCHAR(255) NOT NULL DEFAULT '',
	    timecreated BIGINT NOT NULL,
	CONSTRAINT mdl_userpasshist_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_user_password_history IS 'A rotating log of hashes of previously used passwords for each user.'
	;
	CREATE INDEX mdl_userpasshist_use_ix ON mdl_user_password_history (userid)
	;
	CREATE TABLE mdl_scale (
	    id BIGSERIAL,
	    courseid BIGINT NOT NULL DEFAULT 0,
	    userid BIGINT NOT NULL DEFAULT 0,
	    name VARCHAR(255) NOT NULL DEFAULT '',
	    scale TEXT NOT NULL,
	    description TEXT NOT NULL,
	    descriptionformat SMALLINT NOT NULL DEFAULT 0,
	    timemodified BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_scal_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_scale IS 'Defines grading scales'
	;
	CREATE INDEX mdl_scal_cou_ix ON mdl_scale (courseid)
	;
	CREATE TABLE mdl_scale_history (
	    id BIGSERIAL,
	    action BIGINT NOT NULL DEFAULT 0,
	    oldid BIGINT NOT NULL,
	    source VARCHAR(255),
	    timemodified BIGINT,
	    loggeduser BIGINT,
	    courseid BIGINT NOT NULL DEFAULT 0,
	    userid BIGINT NOT NULL DEFAULT 0,
	    name VARCHAR(255) NOT NULL DEFAULT '',
	    scale TEXT NOT NULL,
	    description TEXT NOT NULL,
	CONSTRAINT mdl_scalhist_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_scale_history IS 'History table'
	;
	CREATE INDEX mdl_scalhist_act_ix ON mdl_scale_history (action)
	;
	CREATE INDEX mdl_scalhist_tim_ix ON mdl_scale_history (timemodified)
	;
	CREATE INDEX mdl_scalhist_old_ix ON mdl_scale_history (oldid)
	;
	CREATE INDEX mdl_scalhist_cou_ix ON mdl_scale_history (courseid)
	;
	CREATE INDEX mdl_scalhist_log_ix ON mdl_scale_history (loggeduser)
	;
	CREATE TABLE mdl_stats_daily (
	    id BIGSERIAL,
	    courseid BIGINT NOT NULL DEFAULT 0,
	    timeend BIGINT NOT NULL DEFAULT 0,
	    roleid BIGINT NOT NULL DEFAULT 0,
	    stattype VARCHAR(20) NOT NULL DEFAULT 'activity',
	    stat1 BIGINT NOT NULL DEFAULT 0,
	    stat2 BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_statdail_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_stats_daily IS 'to accumulate daily stats'
	;
	CREATE INDEX mdl_statdail_cou_ix ON mdl_stats_daily (courseid)
	;
	CREATE INDEX mdl_statdail_tim_ix ON mdl_stats_daily (timeend)
	;
	CREATE INDEX mdl_statdail_rol_ix ON mdl_stats_daily (roleid)
	;
	CREATE TABLE mdl_stats_weekly (
	    id BIGSERIAL,
	    courseid BIGINT NOT NULL DEFAULT 0,
	    timeend BIGINT NOT NULL DEFAULT 0,
	    roleid BIGINT NOT NULL DEFAULT 0,
	    stattype VARCHAR(20) NOT NULL DEFAULT 'activity',
	    stat1 BIGINT NOT NULL DEFAULT 0,
	    stat2 BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_statweek_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_stats_weekly IS 'To accumulate weekly stats'
	;
	CREATE INDEX mdl_statweek_cou_ix ON mdl_stats_weekly (courseid)
	;
	CREATE INDEX mdl_statweek_tim_ix ON mdl_stats_weekly (timeend)
	;
	CREATE INDEX mdl_statweek_rol_ix ON mdl_stats_weekly (roleid)
	;
	CREATE TABLE mdl_stats_monthly (
	    id BIGSERIAL,
	    courseid BIGINT NOT NULL DEFAULT 0,
	    timeend BIGINT NOT NULL DEFAULT 0,
	    roleid BIGINT NOT NULL DEFAULT 0,
	    stattype VARCHAR(20) NOT NULL DEFAULT 'activity',
	    stat1 BIGINT NOT NULL DEFAULT 0,
	    stat2 BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_statmont_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_stats_monthly IS 'To accumulate monthly stats'
	;
	CREATE INDEX mdl_statmont_cou_ix ON mdl_stats_monthly (courseid)
	;
	CREATE INDEX mdl_statmont_tim_ix ON mdl_stats_monthly (timeend)
	;
	CREATE INDEX mdl_statmont_rol_ix ON mdl_stats_monthly (roleid)
	;
	CREATE TABLE mdl_stats_user_daily (
	    id BIGSERIAL,
	    courseid BIGINT NOT NULL DEFAULT 0,
	    userid BIGINT NOT NULL DEFAULT 0,
	    roleid BIGINT NOT NULL DEFAULT 0,
	    timeend BIGINT NOT NULL DEFAULT 0,
	    statsreads BIGINT NOT NULL DEFAULT 0,
	    statswrites BIGINT NOT NULL DEFAULT 0,
	    stattype VARCHAR(30) NOT NULL DEFAULT '',
	CONSTRAINT mdl_statuserdail_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_stats_user_daily IS 'To accumulate daily stats per course/user'
	;
	CREATE INDEX mdl_statuserdail_cou_ix ON mdl_stats_user_daily (courseid)
	;
	CREATE INDEX mdl_statuserdail_use_ix ON mdl_stats_user_daily (userid)
	;
	CREATE INDEX mdl_statuserdail_rol_ix ON mdl_stats_user_daily (roleid)
	;
	CREATE INDEX mdl_statuserdail_tim_ix ON mdl_stats_user_daily (timeend)
	;
	CREATE TABLE mdl_stats_user_weekly (
	    id BIGSERIAL,
	    courseid BIGINT NOT NULL DEFAULT 0,
	    userid BIGINT NOT NULL DEFAULT 0,
	    roleid BIGINT NOT NULL DEFAULT 0,
	    timeend BIGINT NOT NULL DEFAULT 0,
	    statsreads BIGINT NOT NULL DEFAULT 0,
	    statswrites BIGINT NOT NULL DEFAULT 0,
	    stattype VARCHAR(30) NOT NULL DEFAULT '',
	CONSTRAINT mdl_statuserweek_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_stats_user_weekly IS 'To accumulate weekly stats per course/user'
	;
	CREATE INDEX mdl_statuserweek_cou_ix ON mdl_stats_user_weekly (courseid)
	;
	CREATE INDEX mdl_statuserweek_use_ix ON mdl_stats_user_weekly (userid)
	;
	CREATE INDEX mdl_statuserweek_rol_ix ON mdl_stats_user_weekly (roleid)
	;
	CREATE INDEX mdl_statuserweek_tim_ix ON mdl_stats_user_weekly (timeend)
	;
	CREATE TABLE mdl_stats_user_monthly (
	    id BIGSERIAL,
	    courseid BIGINT NOT NULL DEFAULT 0,
	    userid BIGINT NOT NULL DEFAULT 0,
	    roleid BIGINT NOT NULL DEFAULT 0,
	    timeend BIGINT NOT NULL DEFAULT 0,
	    statsreads BIGINT NOT NULL DEFAULT 0,
	    statswrites BIGINT NOT NULL DEFAULT 0,
	    stattype VARCHAR(30) NOT NULL DEFAULT '',
	CONSTRAINT mdl_statusermont_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_stats_user_monthly IS 'To accumulate monthly stats per course/user'
	;
	CREATE INDEX mdl_statusermont_cou_ix ON mdl_stats_user_monthly (courseid)
	;
	CREATE INDEX mdl_statusermont_use_ix ON mdl_stats_user_monthly (userid)
	;
	CREATE INDEX mdl_statusermont_rol_ix ON mdl_stats_user_monthly (roleid)
	;
	CREATE INDEX mdl_statusermont_tim_ix ON mdl_stats_user_monthly (timeend)
	;
	CREATE TABLE mdl_post (
	    id BIGSERIAL,
	    module VARCHAR(20) NOT NULL DEFAULT '',
	    userid BIGINT NOT NULL DEFAULT 0,
	    courseid BIGINT NOT NULL DEFAULT 0,
	    groupid BIGINT NOT NULL DEFAULT 0,
	    moduleid BIGINT NOT NULL DEFAULT 0,
	    coursemoduleid BIGINT NOT NULL DEFAULT 0,
	    subject VARCHAR(128) NOT NULL DEFAULT '',
	    summary TEXT,
	    content TEXT,
	    uniquehash VARCHAR(255) NOT NULL DEFAULT '',
	    rating BIGINT NOT NULL DEFAULT 0,
	    format BIGINT NOT NULL DEFAULT 0,
	    summaryformat SMALLINT NOT NULL DEFAULT 0,
	    attachment VARCHAR(100),
	    publishstate VARCHAR(20) NOT NULL DEFAULT 'draft',
	    lastmodified BIGINT NOT NULL DEFAULT 0,
	    created BIGINT NOT NULL DEFAULT 0,
	    usermodified BIGINT,
	CONSTRAINT mdl_post_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_post IS 'Generic post table to hold data blog entries etc in different modules'
	;
	CREATE UNIQUE INDEX mdl_post_iduse_uix ON mdl_post (id, userid)
	;
	CREATE INDEX mdl_post_las_ix ON mdl_post (lastmodified)
	;
	CREATE INDEX mdl_post_mod_ix ON mdl_post (module)
	;
	CREATE INDEX mdl_post_sub_ix ON mdl_post (subject)
	;
	CREATE INDEX mdl_post_use_ix ON mdl_post (usermodified)
	;
	CREATE TABLE mdl_role (
	    id BIGSERIAL,
	    name VARCHAR(255) NOT NULL DEFAULT '',
	    shortname VARCHAR(100) NOT NULL DEFAULT '',
	    description TEXT NOT NULL,
	    sortorder BIGINT NOT NULL DEFAULT 0,
	    archetype VARCHAR(30) NOT NULL DEFAULT '',
	CONSTRAINT mdl_role_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_role IS 'moodle roles'
	;
	CREATE UNIQUE INDEX mdl_role_sor_uix ON mdl_role (sortorder)
	;
	CREATE UNIQUE INDEX mdl_role_sho_uix ON mdl_role (shortname)
	;
	CREATE TABLE mdl_context (
	    id BIGSERIAL,
	    contextlevel BIGINT NOT NULL DEFAULT 0,
	    instanceid BIGINT NOT NULL DEFAULT 0,
	    path VARCHAR(255),
	    depth SMALLINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_cont_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_context IS 'one of these must be set'
	;
	CREATE UNIQUE INDEX mdl_cont_conins_uix ON mdl_context (contextlevel, instanceid)
	;
	CREATE INDEX mdl_cont_ins_ix ON mdl_context (instanceid)
	;
	CREATE INDEX mdl_cont_pat_ix ON mdl_context (path)
	;
	CREATE INDEX mdl_cont_pat_ix_pattern ON mdl_context USING btree (path varchar_pattern_ops)
	;
	CREATE TABLE mdl_context_temp (
	    id BIGINT NOT NULL,
	    path VARCHAR(255) NOT NULL DEFAULT '',
	    depth SMALLINT NOT NULL,
	CONSTRAINT mdl_conttemp_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_context_temp IS 'Used by build_context_path() in upgrade and cron to keep context depths and paths in sync.'
	;
	CREATE TABLE mdl_capabilities (
	    id BIGSERIAL,
	    name VARCHAR(255) NOT NULL DEFAULT '',
	    captype VARCHAR(50) NOT NULL DEFAULT '',
	    contextlevel BIGINT NOT NULL DEFAULT 0,
	    component VARCHAR(100) NOT NULL DEFAULT '',
	    riskbitmask BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_capa_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_capabilities IS 'this defines all capabilities'
	;
	CREATE UNIQUE INDEX mdl_capa_nam_uix ON mdl_capabilities (name)
	;
	CREATE TABLE mdl_role_allow_assign (
	    id BIGSERIAL,
	    roleid BIGINT NOT NULL DEFAULT 0,
	    allowassign BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_rolealloassi_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_role_allow_assign IS 'this defines what role can assign what role'
	;
	CREATE UNIQUE INDEX mdl_rolealloassi_rolall_uix ON mdl_role_allow_assign (roleid, allowassign)
	;
	CREATE INDEX mdl_rolealloassi_rol_ix ON mdl_role_allow_assign (roleid)
	;
	CREATE INDEX mdl_rolealloassi_all_ix ON mdl_role_allow_assign (allowassign)
	;
	CREATE TABLE mdl_role_allow_override (
	    id BIGSERIAL,
	    roleid BIGINT NOT NULL DEFAULT 0,
	    allowoverride BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_rolealloover_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_role_allow_override IS 'this defines what role can override what role'
	;
	CREATE UNIQUE INDEX mdl_rolealloover_rolall_uix ON mdl_role_allow_override (roleid, allowoverride)
	;
	CREATE INDEX mdl_rolealloover_rol_ix ON mdl_role_allow_override (roleid)
	;
	CREATE INDEX mdl_rolealloover_all_ix ON mdl_role_allow_override (allowoverride)
	;
	CREATE TABLE mdl_role_allow_switch (
	    id BIGSERIAL,
	    roleid BIGINT NOT NULL,
	    allowswitch BIGINT NOT NULL,
	CONSTRAINT mdl_rolealloswit_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_role_allow_switch IS 'This table stores which which other roles a user is allowed to switch to if they have one role.'
	;
	CREATE UNIQUE INDEX mdl_rolealloswit_rolall_uix ON mdl_role_allow_switch (roleid, allowswitch)
	;
	CREATE INDEX mdl_rolealloswit_rol_ix ON mdl_role_allow_switch (roleid)
	;
	CREATE INDEX mdl_rolealloswit_all_ix ON mdl_role_allow_switch (allowswitch)
	;
	CREATE TABLE mdl_role_allow_view (
	    id BIGSERIAL,
	    roleid BIGINT NOT NULL,
	    allowview BIGINT NOT NULL,
	CONSTRAINT mdl_rolealloview_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_role_allow_view IS 'This table stores which which other roles a user is allowed to view to if they have one role.'
	;
	CREATE UNIQUE INDEX mdl_rolealloview_rolall_uix ON mdl_role_allow_view (roleid, allowview)
	;
	CREATE INDEX mdl_rolealloview_rol_ix ON mdl_role_allow_view (roleid)
	;
	CREATE INDEX mdl_rolealloview_all_ix ON mdl_role_allow_view (allowview)
	;
	CREATE TABLE mdl_role_assignments (
	    id BIGSERIAL,
	    roleid BIGINT NOT NULL DEFAULT 0,
	    contextid BIGINT NOT NULL DEFAULT 0,
	    userid BIGINT NOT NULL DEFAULT 0,
	    timemodified BIGINT NOT NULL DEFAULT 0,
	    modifierid BIGINT NOT NULL DEFAULT 0,
	    component VARCHAR(100) NOT NULL DEFAULT '',
	    itemid BIGINT NOT NULL DEFAULT 0,
	    sortorder BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_roleassi_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_role_assignments IS 'assigning roles in different context'
	;
	CREATE INDEX mdl_roleassi_sor_ix ON mdl_role_assignments (sortorder)
	;
	CREATE INDEX mdl_roleassi_rolcon_ix ON mdl_role_assignments (roleid, contextid)
	;
	CREATE INDEX mdl_roleassi_useconrol_ix ON mdl_role_assignments (userid, contextid, roleid)
	;
	CREATE INDEX mdl_roleassi_comiteuse_ix ON mdl_role_assignments (component, itemid, userid)
	;
	CREATE INDEX mdl_roleassi_rol_ix ON mdl_role_assignments (roleid)
	;
	CREATE INDEX mdl_roleassi_con_ix ON mdl_role_assignments (contextid)
	;
	CREATE INDEX mdl_roleassi_use_ix ON mdl_role_assignments (userid)
	;
	CREATE TABLE mdl_role_capabilities (
	    id BIGSERIAL,
	    contextid BIGINT NOT NULL DEFAULT 0,
	    roleid BIGINT NOT NULL DEFAULT 0,
	    capability VARCHAR(255) NOT NULL DEFAULT '',
	    permission BIGINT NOT NULL DEFAULT 0,
	    timemodified BIGINT NOT NULL DEFAULT 0,
	    modifierid BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_rolecapa_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_role_capabilities IS 'permission has to be signed, overriding a capability for a particular role in a particular context'
	;
	CREATE UNIQUE INDEX mdl_rolecapa_rolconcap_uix ON mdl_role_capabilities (roleid, contextid, capability)
	;
	CREATE INDEX mdl_rolecapa_rol_ix ON mdl_role_capabilities (roleid)
	;
	CREATE INDEX mdl_rolecapa_con_ix ON mdl_role_capabilities (contextid)
	;
	CREATE INDEX mdl_rolecapa_mod_ix ON mdl_role_capabilities (modifierid)
	;
	CREATE INDEX mdl_rolecapa_cap_ix ON mdl_role_capabilities (capability)
	;
	CREATE TABLE mdl_role_names (
	    id BIGSERIAL,
	    roleid BIGINT NOT NULL DEFAULT 0,
	    contextid BIGINT NOT NULL DEFAULT 0,
	    name VARCHAR(255) NOT NULL DEFAULT '',
	CONSTRAINT mdl_rolename_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_role_names IS 'role names in native strings'
	;
	CREATE UNIQUE INDEX mdl_rolename_rolcon_uix ON mdl_role_names (roleid, contextid)
	;
	CREATE INDEX mdl_rolename_rol_ix ON mdl_role_names (roleid)
	;
	CREATE INDEX mdl_rolename_con_ix ON mdl_role_names (contextid)
	;
	CREATE TABLE mdl_role_sortorder (
	    id BIGSERIAL,
	    userid BIGINT NOT NULL,
	    roleid BIGINT NOT NULL,
	    contextid BIGINT NOT NULL,
	    sortoder BIGINT NOT NULL,
	CONSTRAINT mdl_rolesort_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_role_sortorder IS 'sort order of course managers in a course'
	;
	CREATE UNIQUE INDEX mdl_rolesort_userolcon_uix ON mdl_role_sortorder (userid, roleid, contextid)
	;
	CREATE INDEX mdl_rolesort_use_ix ON mdl_role_sortorder (userid)
	;
	CREATE INDEX mdl_rolesort_rol_ix ON mdl_role_sortorder (roleid)
	;
	CREATE INDEX mdl_rolesort_con_ix ON mdl_role_sortorder (contextid)
	;
	CREATE TABLE mdl_role_context_levels (
	    id BIGSERIAL,
	    roleid BIGINT NOT NULL,
	    contextlevel BIGINT NOT NULL,
	CONSTRAINT mdl_rolecontleve_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_role_context_levels IS 'Lists which roles can be assigned at which context levels. The assignment is allowed in the corresponding row is present in this table.'
	;
	CREATE UNIQUE INDEX mdl_rolecontleve_conrol_uix ON mdl_role_context_levels (contextlevel, roleid)
	;
	CREATE INDEX mdl_rolecontleve_rol_ix ON mdl_role_context_levels (roleid)
	;
	CREATE TABLE mdl_user_info_field (
	    id BIGSERIAL,
	    shortname VARCHAR(255) NOT NULL DEFAULT 'shortname',
	    name TEXT NOT NULL,
	    datatype VARCHAR(255) NOT NULL DEFAULT '',
	    description TEXT,
	    descriptionformat SMALLINT NOT NULL DEFAULT 0,
	    categoryid BIGINT NOT NULL DEFAULT 0,
	    sortorder BIGINT NOT NULL DEFAULT 0,
	    required SMALLINT NOT NULL DEFAULT 0,
	    locked SMALLINT NOT NULL DEFAULT 0,
	    visible SMALLINT NOT NULL DEFAULT 0,
	    forceunique SMALLINT NOT NULL DEFAULT 0,
	    signup SMALLINT NOT NULL DEFAULT 0,
	    defaultdata TEXT,
	    defaultdataformat SMALLINT NOT NULL DEFAULT 0,
	    param1 TEXT,
	    param2 TEXT,
	    param3 TEXT,
	    param4 TEXT,
	    param5 TEXT,
	CONSTRAINT mdl_userinfofiel_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_user_info_field IS 'Customisable user profile fields'
	;
	CREATE TABLE mdl_user_info_category (
	    id BIGSERIAL,
	    name VARCHAR(255) NOT NULL DEFAULT '',
	    sortorder BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_userinfocate_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_user_info_category IS 'Customisable fields categories'
	;
	CREATE TABLE mdl_user_info_data (
	    id BIGSERIAL,
	    userid BIGINT NOT NULL DEFAULT 0,
	    fieldid BIGINT NOT NULL DEFAULT 0,
	    data TEXT NOT NULL,
	    dataformat SMALLINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_userinfodata_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_user_info_data IS 'Data for the customisable user fields'
	;
	CREATE UNIQUE INDEX mdl_userinfodata_usefie_uix ON mdl_user_info_data (userid, fieldid)
	;
	CREATE TABLE mdl_question_categories (
	    id BIGSERIAL,
	    name VARCHAR(255) NOT NULL DEFAULT '',
	    contextid BIGINT NOT NULL DEFAULT 0,
	    info TEXT NOT NULL,
	    infoformat SMALLINT NOT NULL DEFAULT 0,
	    stamp VARCHAR(255) NOT NULL DEFAULT '',
	    parent BIGINT NOT NULL DEFAULT 0,
	    sortorder BIGINT NOT NULL DEFAULT 999,
	CONSTRAINT mdl_quescate_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_question_categories IS 'Categories are for grouping questions'
	;
	CREATE INDEX mdl_quescate_con_ix ON mdl_question_categories (contextid)
	;
	CREATE UNIQUE INDEX mdl_quescate_consta_uix ON mdl_question_categories (contextid, stamp)
	;
	CREATE INDEX mdl_quescate_par_ix ON mdl_question_categories (parent)
	;
	CREATE TABLE mdl_question (
	    id BIGSERIAL,
	    category BIGINT NOT NULL DEFAULT 0,
	    parent BIGINT NOT NULL DEFAULT 0,
	    name VARCHAR(255) NOT NULL DEFAULT '',
	    questiontext TEXT NOT NULL,
	    questiontextformat SMALLINT NOT NULL DEFAULT 0,
	    generalfeedback TEXT NOT NULL,
	    generalfeedbackformat SMALLINT NOT NULL DEFAULT 0,
	    defaultmark NUMERIC(12,7) NOT NULL DEFAULT 1,
	    penalty NUMERIC(12,7) NOT NULL DEFAULT 0.3333333,
	    qtype VARCHAR(20) NOT NULL DEFAULT '',
	    length BIGINT NOT NULL DEFAULT 1,
	    stamp VARCHAR(255) NOT NULL DEFAULT '',
	    version VARCHAR(255) NOT NULL DEFAULT '',
	    hidden SMALLINT NOT NULL DEFAULT 0,
	    timecreated BIGINT NOT NULL DEFAULT 0,
	    timemodified BIGINT NOT NULL DEFAULT 0,
	    createdby BIGINT,
	    modifiedby BIGINT,
	CONSTRAINT mdl_ques_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_question IS 'The questions themselves'
	;
	CREATE INDEX mdl_ques_qty_ix ON mdl_question (qtype)
	;
	CREATE INDEX mdl_ques_cat_ix ON mdl_question (category)
	;
	CREATE INDEX mdl_ques_par_ix ON mdl_question (parent)
	;
	CREATE INDEX mdl_ques_cre_ix ON mdl_question (createdby)
	;
	CREATE INDEX mdl_ques_mod_ix ON mdl_question (modifiedby)
	;
	CREATE TABLE mdl_question_answers (
	    id BIGSERIAL,
	    question BIGINT NOT NULL DEFAULT 0,
	    answer TEXT NOT NULL,
	    answerformat SMALLINT NOT NULL DEFAULT 0,
	    fraction NUMERIC(12,7) NOT NULL DEFAULT 0,
	    feedback TEXT NOT NULL,
	    feedbackformat SMALLINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_quesansw_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_question_answers IS 'Answers, with a fractional grade (0-1) and feedback'
	;
	CREATE INDEX mdl_quesansw_que_ix ON mdl_question_answers (question)
	;
	CREATE TABLE mdl_question_hints (
	    id BIGSERIAL,
	    questionid BIGINT NOT NULL,
	    hint TEXT NOT NULL,
	    hintformat SMALLINT NOT NULL DEFAULT 0,
	    shownumcorrect SMALLINT,
	    clearwrong SMALLINT,
	    options VARCHAR(255),
	CONSTRAINT mdl_queshint_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_question_hints IS 'Stores the the part of the question definition that gives different feedback after each try in interactive and similar behaviours.'
	;
	CREATE INDEX mdl_queshint_que_ix ON mdl_question_hints (questionid)
	;
	CREATE TABLE mdl_question_usages (
	    id BIGSERIAL,
	    contextid BIGINT NOT NULL,
	    component VARCHAR(255) NOT NULL DEFAULT '',
	    preferredbehaviour VARCHAR(32) NOT NULL DEFAULT '',
	CONSTRAINT mdl_quesusag_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_question_usages IS 'This table''s main purpose it to assign a unique id to each attempt at a set of questions by some part of Moodle. A question usage is made up of a number of question_attempts.'
	;
	CREATE INDEX mdl_quesusag_con_ix ON mdl_question_usages (contextid)
	;
	CREATE TABLE mdl_question_attempts (
	    id BIGSERIAL,
	    questionusageid BIGINT NOT NULL,
	    slot BIGINT NOT NULL,
	    behaviour VARCHAR(32) NOT NULL DEFAULT '',
	    questionid BIGINT NOT NULL,
	    variant BIGINT NOT NULL DEFAULT 1,
	    maxmark NUMERIC(12,7) NOT NULL,
	    minfraction NUMERIC(12,7) NOT NULL,
	    maxfraction NUMERIC(12,7) NOT NULL DEFAULT 1,
	    flagged SMALLINT NOT NULL DEFAULT 0,
	    questionsummary TEXT,
	    rightanswer TEXT,
	    responsesummary TEXT,
	    timemodified BIGINT NOT NULL,
	CONSTRAINT mdl_quesatte_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_question_attempts IS 'Each row here corresponds to an attempt at one question, as part of a question_usage. A question_attempt will have some question_attempt_steps'
	;
	CREATE UNIQUE INDEX mdl_quesatte_queslo_uix ON mdl_question_attempts (questionusageid, slot)
	;
	CREATE INDEX mdl_quesatte_beh_ix ON mdl_question_attempts (behaviour)
	;
	CREATE INDEX mdl_quesatte_que_ix ON mdl_question_attempts (questionid)
	;
	CREATE INDEX mdl_quesatte_que2_ix ON mdl_question_attempts (questionusageid)
	;
	CREATE TABLE mdl_question_attempt_steps (
	    id BIGSERIAL,
	    questionattemptid BIGINT NOT NULL,
	    sequencenumber BIGINT NOT NULL,
	    state VARCHAR(13) NOT NULL DEFAULT '',
	    fraction NUMERIC(12,7),
	    timecreated BIGINT NOT NULL,
	    userid BIGINT,
	CONSTRAINT mdl_quesattestep_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_question_attempt_steps IS 'Stores one step in in a question attempt. As well as the data here, the step will have some data in the question_attempt_step_data table.'
	;
	CREATE UNIQUE INDEX mdl_quesattestep_queseq_uix ON mdl_question_attempt_steps (questionattemptid, sequencenumber)
	;
	CREATE INDEX mdl_quesattestep_que_ix ON mdl_question_attempt_steps (questionattemptid)
	;
	CREATE INDEX mdl_quesattestep_use_ix ON mdl_question_attempt_steps (userid)
	;
	CREATE TABLE mdl_question_attempt_step_data (
	    id BIGSERIAL,
	    attemptstepid BIGINT NOT NULL,
	    name VARCHAR(32) NOT NULL DEFAULT '',
	    value TEXT,
	CONSTRAINT mdl_quesattestepdata_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_question_attempt_step_data IS 'Each question_attempt_step has an associative array of the data that was submitted by the user in the POST request. It can also contain extra data from the question type or behaviour to avoid re-computation. The convention is that names belonging to '
	;
	CREATE INDEX mdl_quesattestepdata_att_ix ON mdl_question_attempt_step_data (attemptstepid)
	;
	CREATE TABLE mdl_question_statistics (
	    id BIGSERIAL,
	    hashcode VARCHAR(40) NOT NULL DEFAULT '',
	    timemodified BIGINT NOT NULL,
	    questionid BIGINT NOT NULL,
	    slot BIGINT,
	    subquestion SMALLINT NOT NULL,
	    variant BIGINT,
	    s BIGINT NOT NULL DEFAULT 0,
	    effectiveweight NUMERIC(15,5),
	    negcovar SMALLINT NOT NULL DEFAULT 0,
	    discriminationindex NUMERIC(15,5),
	    discriminativeefficiency NUMERIC(15,5),
	    sd NUMERIC(15,10),
	    facility NUMERIC(15,10),
	    subquestions TEXT,
	    maxmark NUMERIC(12,7),
	    positions TEXT,
	    randomguessscore NUMERIC(12,7),
	CONSTRAINT mdl_quesstat_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_question_statistics IS 'Statistics for individual questions used in an activity.'
	;
	CREATE TABLE mdl_question_response_analysis (
	    id BIGSERIAL,
	    hashcode VARCHAR(40) NOT NULL DEFAULT '',
	    whichtries VARCHAR(255) NOT NULL DEFAULT '',
	    timemodified BIGINT NOT NULL,
	    questionid BIGINT NOT NULL,
	    variant BIGINT,
	    subqid VARCHAR(100) NOT NULL DEFAULT '',
	    aid VARCHAR(100),
	    response TEXT,
	    credit NUMERIC(15,5) NOT NULL,
	CONSTRAINT mdl_quesrespanal_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_question_response_analysis IS 'Analysis of student responses given to questions.'
	;
	CREATE TABLE mdl_question_response_count (
	    id BIGSERIAL,
	    analysisid BIGINT NOT NULL,
	    try BIGINT NOT NULL,
	    rcount BIGINT NOT NULL,
	CONSTRAINT mdl_quesrespcoun_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_question_response_count IS 'Count for each responses for each try at a question.'
	;
	CREATE INDEX mdl_quesrespcoun_ana_ix ON mdl_question_response_count (analysisid)
	;
	CREATE TABLE mdl_mnet_application (
	    id BIGSERIAL,
	    name VARCHAR(50) NOT NULL DEFAULT '',
	    display_name VARCHAR(50) NOT NULL DEFAULT '',
	    xmlrpc_server_url VARCHAR(255) NOT NULL DEFAULT '',
	    sso_land_url VARCHAR(255) NOT NULL DEFAULT '',
	    sso_jump_url VARCHAR(255) NOT NULL DEFAULT '',
	CONSTRAINT mdl_mnetappl_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_mnet_application IS 'Information about applications on remote hosts'
	;
	CREATE TABLE mdl_mnet_host (
	    id BIGSERIAL,
	    deleted SMALLINT NOT NULL DEFAULT 0,
	    wwwroot VARCHAR(255) NOT NULL DEFAULT '',
	    ip_address VARCHAR(45) NOT NULL DEFAULT '',
	    name VARCHAR(80) NOT NULL DEFAULT '',
	    public_key TEXT NOT NULL,
	    public_key_expires BIGINT NOT NULL DEFAULT 0,
	    transport SMALLINT NOT NULL DEFAULT 0,
	    portno INTEGER NOT NULL DEFAULT 0,
	    last_connect_time BIGINT NOT NULL DEFAULT 0,
	    last_log_id BIGINT NOT NULL DEFAULT 0,
	    force_theme SMALLINT NOT NULL DEFAULT 0,
	    theme VARCHAR(100),
	    applicationid BIGINT NOT NULL DEFAULT 1,
	    sslverification SMALLINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_mnethost_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_mnet_host IS 'Information about the local and remote hosts for RPC'
	;
	CREATE INDEX mdl_mnethost_app_ix ON mdl_mnet_host (applicationid)
	;
	CREATE TABLE mdl_mnet_host2service (
	    id BIGSERIAL,
	    hostid BIGINT NOT NULL DEFAULT 0,
	    serviceid BIGINT NOT NULL DEFAULT 0,
	    publish SMALLINT NOT NULL DEFAULT 0,
	    subscribe SMALLINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_mnethost_id3_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_mnet_host2service IS 'Information about the services for a given host'
	;
	CREATE UNIQUE INDEX mdl_mnethost_hosser_uix ON mdl_mnet_host2service (hostid, serviceid)
	;
	CREATE TABLE mdl_mnet_log (
	    id BIGSERIAL,
	    hostid BIGINT NOT NULL DEFAULT 0,
	    remoteid BIGINT NOT NULL DEFAULT 0,
	    time BIGINT NOT NULL DEFAULT 0,
	    userid BIGINT NOT NULL DEFAULT 0,
	    ip VARCHAR(45) NOT NULL DEFAULT '',
	    course BIGINT NOT NULL DEFAULT 0,
	    coursename VARCHAR(40) NOT NULL DEFAULT '',
	    module VARCHAR(20) NOT NULL DEFAULT '',
	    cmid BIGINT NOT NULL DEFAULT 0,
	    action VARCHAR(40) NOT NULL DEFAULT '',
	    url VARCHAR(100) NOT NULL DEFAULT '',
	    info VARCHAR(255) NOT NULL DEFAULT '',
	CONSTRAINT mdl_mnetlog_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_mnet_log IS 'Store session data from users migrating to other sites'
	;
	CREATE INDEX mdl_mnetlog_hosusecou_ix ON mdl_mnet_log (hostid, userid, course)
	;
	CREATE TABLE mdl_mnet_rpc (
	    id BIGSERIAL,
	    functionname VARCHAR(40) NOT NULL DEFAULT '',
	    xmlrpcpath VARCHAR(80) NOT NULL DEFAULT '',
	    plugintype VARCHAR(20) NOT NULL DEFAULT '',
	    pluginname VARCHAR(20) NOT NULL DEFAULT '',
	    enabled SMALLINT NOT NULL DEFAULT 0,
	    help TEXT NOT NULL,
	    profile TEXT NOT NULL,
	    filename VARCHAR(100) NOT NULL DEFAULT '',
	    classname VARCHAR(150),
	    static SMALLINT,
	CONSTRAINT mdl_mnetrpc_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_mnet_rpc IS 'Functions or methods that we may publish or subscribe to'
	;
	CREATE INDEX mdl_mnetrpc_enaxml_ix ON mdl_mnet_rpc (enabled, xmlrpcpath)
	;
	CREATE TABLE mdl_mnet_remote_rpc (
	    id BIGSERIAL,
	    functionname VARCHAR(40) NOT NULL DEFAULT '',
	    xmlrpcpath VARCHAR(80) NOT NULL DEFAULT '',
	    plugintype VARCHAR(20) NOT NULL DEFAULT '',
	    pluginname VARCHAR(20) NOT NULL DEFAULT '',
	    enabled SMALLINT NOT NULL,
	CONSTRAINT mdl_mnetremorpc_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_mnet_remote_rpc IS 'This table describes functions that might be called remotely (we have less information about them than local functions)'
	;
	CREATE TABLE mdl_mnet_service (
	    id BIGSERIAL,
	    name VARCHAR(40) NOT NULL DEFAULT '',
	    description VARCHAR(40) NOT NULL DEFAULT '',
	    apiversion VARCHAR(10) NOT NULL DEFAULT '',
	    offer SMALLINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_mnetserv_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_mnet_service IS 'A service is a group of functions'
	;
	CREATE TABLE mdl_mnet_service2rpc (
	    id BIGSERIAL,
	    serviceid BIGINT NOT NULL DEFAULT 0,
	    rpcid BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_mnetserv_id3_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_mnet_service2rpc IS 'Group functions or methods under a service'
	;
	CREATE UNIQUE INDEX mdl_mnetserv_rpcser_uix ON mdl_mnet_service2rpc (rpcid, serviceid)
	;
	CREATE TABLE mdl_mnet_remote_service2rpc (
	    id BIGSERIAL,
	    serviceid BIGINT NOT NULL DEFAULT 0,
	    rpcid BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_mnetremoserv_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_mnet_remote_service2rpc IS 'Group functions or methods under a service'
	;
	CREATE UNIQUE INDEX mdl_mnetremoserv_rpcser_uix ON mdl_mnet_remote_service2rpc (rpcid, serviceid)
	;
	CREATE TABLE mdl_mnet_session (
	    id BIGSERIAL,
	    userid BIGINT NOT NULL DEFAULT 0,
	    username VARCHAR(100) NOT NULL DEFAULT '',
	    token VARCHAR(40) NOT NULL DEFAULT '',
	    mnethostid BIGINT NOT NULL DEFAULT 0,
	    useragent VARCHAR(40) NOT NULL DEFAULT '',
	    confirm_timeout BIGINT NOT NULL DEFAULT 0,
	    session_id VARCHAR(40) NOT NULL DEFAULT '',
	    expires BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_mnetsess_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_mnet_session IS 'Store session data from users migrating to other sites'
	;
	CREATE UNIQUE INDEX mdl_mnetsess_tok_uix ON mdl_mnet_session (token)
	;
	CREATE TABLE mdl_mnet_sso_access_control (
	    id BIGSERIAL,
	    username VARCHAR(100) NOT NULL DEFAULT '',
	    mnet_host_id BIGINT NOT NULL DEFAULT 0,
	    accessctrl VARCHAR(20) NOT NULL DEFAULT 'allow',
	CONSTRAINT mdl_mnetssoaccecont_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_mnet_sso_access_control IS 'Users by host permitted (or not) to login from a remote provider'
	;
	CREATE UNIQUE INDEX mdl_mnetssoaccecont_mneuse_uix ON mdl_mnet_sso_access_control (mnet_host_id, username)
	;
	CREATE TABLE mdl_events_queue (
	    id BIGSERIAL,
	    eventdata TEXT NOT NULL,
	    stackdump TEXT,
	    userid BIGINT,
	    timecreated BIGINT NOT NULL,
	CONSTRAINT mdl_evenqueu_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_events_queue IS 'This table is for storing queued events. It stores only one copy of the eventdata here, and entries from this table are being references by the event_queue_handlers table.'
	;
	CREATE INDEX mdl_evenqueu_use_ix ON mdl_events_queue (userid)
	;
	CREATE TABLE mdl_events_handlers (
	    id BIGSERIAL,
	    eventname VARCHAR(166) NOT NULL DEFAULT '',
	    component VARCHAR(166) NOT NULL DEFAULT '',
	    handlerfile VARCHAR(255) NOT NULL DEFAULT '',
	    handlerfunction TEXT,
	    schedule VARCHAR(255),
	    status BIGINT NOT NULL DEFAULT 0,
	    internal SMALLINT NOT NULL DEFAULT 1,
	CONSTRAINT mdl_evenhand_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_events_handlers IS 'This table is for storing which components requests what type of event, and the location of the responsible handlers. For example, the assignment registers ''grade_updated'' event with a function assignment_grade_handler() that should be called event t'
	;
	CREATE UNIQUE INDEX mdl_evenhand_evecom_uix ON mdl_events_handlers (eventname, component)
	;
	CREATE TABLE mdl_events_queue_handlers (
	    id BIGSERIAL,
	    queuedeventid BIGINT NOT NULL,
	    handlerid BIGINT NOT NULL,
	    status BIGINT,
	    errormessage TEXT,
	    timemodified BIGINT NOT NULL,
	CONSTRAINT mdl_evenqueuhand_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_events_queue_handlers IS 'This is the list of queued handlers for processing. The event object is retrieved from the events_queue table. When no further reference is made to the event_queues table, the corresponding entry in the events_queue table should be deleted. Entry sho'
	;
	CREATE INDEX mdl_evenqueuhand_que_ix ON mdl_events_queue_handlers (queuedeventid)
	;
	CREATE INDEX mdl_evenqueuhand_han_ix ON mdl_events_queue_handlers (handlerid)
	;
	CREATE TABLE mdl_grade_outcomes (
	    id BIGSERIAL,
	    courseid BIGINT,
	    shortname VARCHAR(255) NOT NULL DEFAULT '',
	    fullname TEXT NOT NULL,
	    scaleid BIGINT,
	    description TEXT,
	    descriptionformat SMALLINT NOT NULL DEFAULT 0,
	    timecreated BIGINT,
	    timemodified BIGINT,
	    usermodified BIGINT,
	CONSTRAINT mdl_gradoutc_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_grade_outcomes IS 'This table describes the outcomes used in the system. An outcome is a statement tied to a rubric scale from low to high, such as âNot met, Borderline, Metâ (stored as 0,1 or 2)'
	;
	CREATE INDEX mdl_gradoutc_cou_ix ON mdl_grade_outcomes (courseid)
	;
	CREATE INDEX mdl_gradoutc_sca_ix ON mdl_grade_outcomes (scaleid)
	;
	CREATE INDEX mdl_gradoutc_use_ix ON mdl_grade_outcomes (usermodified)
	;
	CREATE UNIQUE INDEX mdl_gradoutc_cousho_uix ON mdl_grade_outcomes (courseid, shortname)
	;
	CREATE TABLE mdl_grade_outcomes_courses (
	    id BIGSERIAL,
	    courseid BIGINT NOT NULL,
	    outcomeid BIGINT NOT NULL,
	CONSTRAINT mdl_gradoutccour_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_grade_outcomes_courses IS 'stores what outcomes are used in what courses.'
	;
	CREATE INDEX mdl_gradoutccour_cou_ix ON mdl_grade_outcomes_courses (courseid)
	;
	CREATE INDEX mdl_gradoutccour_out_ix ON mdl_grade_outcomes_courses (outcomeid)
	;
	CREATE UNIQUE INDEX mdl_gradoutccour_couout_uix ON mdl_grade_outcomes_courses (courseid, outcomeid)
	;
	CREATE TABLE mdl_grade_categories (
	    id BIGSERIAL,
	    courseid BIGINT NOT NULL,
	    parent BIGINT,
	    depth BIGINT NOT NULL DEFAULT 0,
	    path VARCHAR(255),
	    fullname VARCHAR(255) NOT NULL DEFAULT '',
	    aggregation BIGINT NOT NULL DEFAULT 0,
	    keephigh BIGINT NOT NULL DEFAULT 0,
	    droplow BIGINT NOT NULL DEFAULT 0,
	    aggregateonlygraded SMALLINT NOT NULL DEFAULT 0,
	    aggregateoutcomes SMALLINT NOT NULL DEFAULT 0,
	    timecreated BIGINT NOT NULL,
	    timemodified BIGINT NOT NULL,
	    hidden SMALLINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_gradcate_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_grade_categories IS 'This table keeps information about categories, used for grouping items.'
	;
	CREATE INDEX mdl_gradcate_cou_ix ON mdl_grade_categories (courseid)
	;
	CREATE INDEX mdl_gradcate_par_ix ON mdl_grade_categories (parent)
	;
	CREATE TABLE mdl_grade_items (
	    id BIGSERIAL,
	    courseid BIGINT,
	    categoryid BIGINT,
	    itemname VARCHAR(255),
	    itemtype VARCHAR(30) NOT NULL DEFAULT '',
	    itemmodule VARCHAR(30),
	    iteminstance BIGINT,
	    itemnumber BIGINT,
	    iteminfo TEXT,
	    idnumber VARCHAR(255),
	    calculation TEXT,
	    gradetype SMALLINT NOT NULL DEFAULT 1,
	    grademax NUMERIC(10,5) NOT NULL DEFAULT 100,
	    grademin NUMERIC(10,5) NOT NULL DEFAULT 0,
	    scaleid BIGINT,
	    outcomeid BIGINT,
	    gradepass NUMERIC(10,5) NOT NULL DEFAULT 0,
	    multfactor NUMERIC(10,5) NOT NULL DEFAULT 1.0,
	    plusfactor NUMERIC(10,5) NOT NULL DEFAULT 0,
	    aggregationcoef NUMERIC(10,5) NOT NULL DEFAULT 0,
	    aggregationcoef2 NUMERIC(10,5) NOT NULL DEFAULT 0,
	    sortorder BIGINT NOT NULL DEFAULT 0,
	    display BIGINT NOT NULL DEFAULT 0,
	    decimals SMALLINT,
	    hidden BIGINT NOT NULL DEFAULT 0,
	    locked BIGINT NOT NULL DEFAULT 0,
	    locktime BIGINT NOT NULL DEFAULT 0,
	    needsupdate BIGINT NOT NULL DEFAULT 0,
	    weightoverride SMALLINT NOT NULL DEFAULT 0,
	    timecreated BIGINT,
	    timemodified BIGINT,
	CONSTRAINT mdl_graditem_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_grade_items IS 'This table keeps information about gradeable items (ie columns). If an activity (eg an assignment or quiz) has multiple grade_items associated with it (eg several outcomes or numerical grades), then there will be a corresponding multiple number of ro'
	;
	CREATE INDEX mdl_graditem_locloc_ix ON mdl_grade_items (locked, locktime)
	;
	CREATE INDEX mdl_graditem_itenee_ix ON mdl_grade_items (itemtype, needsupdate)
	;
	CREATE INDEX mdl_graditem_gra_ix ON mdl_grade_items (gradetype)
	;
	CREATE INDEX mdl_graditem_idncou_ix ON mdl_grade_items (idnumber, courseid)
	;
	CREATE INDEX mdl_graditem_cou_ix ON mdl_grade_items (courseid)
	;
	CREATE INDEX mdl_graditem_cat_ix ON mdl_grade_items (categoryid)
	;
	CREATE INDEX mdl_graditem_sca_ix ON mdl_grade_items (scaleid)
	;
	CREATE INDEX mdl_graditem_out_ix ON mdl_grade_items (outcomeid)
	;
	CREATE TABLE mdl_grade_grades (
	    id BIGSERIAL,
	    itemid BIGINT NOT NULL,
	    userid BIGINT NOT NULL,
	    rawgrade NUMERIC(10,5),
	    rawgrademax NUMERIC(10,5) NOT NULL DEFAULT 100,
	    rawgrademin NUMERIC(10,5) NOT NULL DEFAULT 0,
	    rawscaleid BIGINT,
	    usermodified BIGINT,
	    finalgrade NUMERIC(10,5),
	    hidden BIGINT NOT NULL DEFAULT 0,
	    locked BIGINT NOT NULL DEFAULT 0,
	    locktime BIGINT NOT NULL DEFAULT 0,
	    exported BIGINT NOT NULL DEFAULT 0,
	    overridden BIGINT NOT NULL DEFAULT 0,
	    excluded BIGINT NOT NULL DEFAULT 0,
	    feedback TEXT,
	    feedbackformat BIGINT NOT NULL DEFAULT 0,
	    information TEXT,
	    informationformat BIGINT NOT NULL DEFAULT 0,
	    timecreated BIGINT,
	    timemodified BIGINT,
	    aggregationstatus VARCHAR(10) NOT NULL DEFAULT 'unknown',
	    aggregationweight NUMERIC(10,5),
	CONSTRAINT mdl_gradgrad_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_grade_grades IS 'grade_grades  This table keeps individual grades for each user and each item, exactly as imported or submitted by modules. The rawgrademax/min and rawscaleid are stored here to record the values at the time the grade was stored, because teachers migh'
	;
	CREATE INDEX mdl_gradgrad_locloc_ix ON mdl_grade_grades (locked, locktime)
	;
	CREATE INDEX mdl_gradgrad_ite_ix ON mdl_grade_grades (itemid)
	;
	CREATE INDEX mdl_gradgrad_use_ix ON mdl_grade_grades (userid)
	;
	CREATE INDEX mdl_gradgrad_raw_ix ON mdl_grade_grades (rawscaleid)
	;
	CREATE INDEX mdl_gradgrad_use2_ix ON mdl_grade_grades (usermodified)
	;
	CREATE UNIQUE INDEX mdl_gradgrad_useite_uix ON mdl_grade_grades (userid, itemid)
	;
	CREATE TABLE mdl_grade_outcomes_history (
	    id BIGSERIAL,
	    action BIGINT NOT NULL DEFAULT 0,
	    oldid BIGINT NOT NULL,
	    source VARCHAR(255),
	    timemodified BIGINT,
	    loggeduser BIGINT,
	    courseid BIGINT,
	    shortname VARCHAR(255) NOT NULL DEFAULT '',
	    fullname TEXT NOT NULL,
	    scaleid BIGINT,
	    description TEXT,
	    descriptionformat SMALLINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_gradoutchist_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_grade_outcomes_history IS 'History table'
	;
	CREATE INDEX mdl_gradoutchist_act_ix ON mdl_grade_outcomes_history (action)
	;
	CREATE INDEX mdl_gradoutchist_tim_ix ON mdl_grade_outcomes_history (timemodified)
	;
	CREATE INDEX mdl_gradoutchist_old_ix ON mdl_grade_outcomes_history (oldid)
	;
	CREATE INDEX mdl_gradoutchist_cou_ix ON mdl_grade_outcomes_history (courseid)
	;
	CREATE INDEX mdl_gradoutchist_sca_ix ON mdl_grade_outcomes_history (scaleid)
	;
	CREATE INDEX mdl_gradoutchist_log_ix ON mdl_grade_outcomes_history (loggeduser)
	;
	CREATE TABLE mdl_grade_categories_history (
	    id BIGSERIAL,
	    action BIGINT NOT NULL DEFAULT 0,
	    oldid BIGINT NOT NULL,
	    source VARCHAR(255),
	    timemodified BIGINT,
	    loggeduser BIGINT,
	    courseid BIGINT NOT NULL,
	    parent BIGINT,
	    depth BIGINT NOT NULL DEFAULT 0,
	    path VARCHAR(255),
	    fullname VARCHAR(255) NOT NULL DEFAULT '',
	    aggregation BIGINT NOT NULL DEFAULT 0,
	    keephigh BIGINT NOT NULL DEFAULT 0,
	    droplow BIGINT NOT NULL DEFAULT 0,
	    aggregateonlygraded SMALLINT NOT NULL DEFAULT 0,
	    aggregateoutcomes SMALLINT NOT NULL DEFAULT 0,
	    aggregatesubcats SMALLINT NOT NULL DEFAULT 0,
	    hidden SMALLINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_gradcatehist_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_grade_categories_history IS 'History of grade_categories'
	;
	CREATE INDEX mdl_gradcatehist_act_ix ON mdl_grade_categories_history (action)
	;
	CREATE INDEX mdl_gradcatehist_tim_ix ON mdl_grade_categories_history (timemodified)
	;
	CREATE INDEX mdl_gradcatehist_old_ix ON mdl_grade_categories_history (oldid)
	;
	CREATE INDEX mdl_gradcatehist_cou_ix ON mdl_grade_categories_history (courseid)
	;
	CREATE INDEX mdl_gradcatehist_par_ix ON mdl_grade_categories_history (parent)
	;
	CREATE INDEX mdl_gradcatehist_log_ix ON mdl_grade_categories_history (loggeduser)
	;
	CREATE TABLE mdl_grade_items_history (
	    id BIGSERIAL,
	    action BIGINT NOT NULL DEFAULT 0,
	    oldid BIGINT NOT NULL,
	    source VARCHAR(255),
	    timemodified BIGINT,
	    loggeduser BIGINT,
	    courseid BIGINT,
	    categoryid BIGINT,
	    itemname VARCHAR(255),
	    itemtype VARCHAR(30) NOT NULL DEFAULT '',
	    itemmodule VARCHAR(30),
	    iteminstance BIGINT,
	    itemnumber BIGINT,
	    iteminfo TEXT,
	    idnumber VARCHAR(255),
	    calculation TEXT,
	    gradetype SMALLINT NOT NULL DEFAULT 1,
	    grademax NUMERIC(10,5) NOT NULL DEFAULT 100,
	    grademin NUMERIC(10,5) NOT NULL DEFAULT 0,
	    scaleid BIGINT,
	    outcomeid BIGINT,
	    gradepass NUMERIC(10,5) NOT NULL DEFAULT 0,
	    multfactor NUMERIC(10,5) NOT NULL DEFAULT 1.0,
	    plusfactor NUMERIC(10,5) NOT NULL DEFAULT 0,
	    aggregationcoef NUMERIC(10,5) NOT NULL DEFAULT 0,
	    aggregationcoef2 NUMERIC(10,5) NOT NULL DEFAULT 0,
	    sortorder BIGINT NOT NULL DEFAULT 0,
	    hidden BIGINT NOT NULL DEFAULT 0,
	    locked BIGINT NOT NULL DEFAULT 0,
	    locktime BIGINT NOT NULL DEFAULT 0,
	    needsupdate BIGINT NOT NULL DEFAULT 0,
	    display BIGINT NOT NULL DEFAULT 0,
	    decimals SMALLINT,
	    weightoverride SMALLINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_graditemhist_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_grade_items_history IS 'History of grade_items'
	;
	CREATE INDEX mdl_graditemhist_act_ix ON mdl_grade_items_history (action)
	;
	CREATE INDEX mdl_graditemhist_tim_ix ON mdl_grade_items_history (timemodified)
	;
	CREATE INDEX mdl_graditemhist_old_ix ON mdl_grade_items_history (oldid)
	;
	CREATE INDEX mdl_graditemhist_cou_ix ON mdl_grade_items_history (courseid)
	;
	CREATE INDEX mdl_graditemhist_cat_ix ON mdl_grade_items_history (categoryid)
	;
	CREATE INDEX mdl_graditemhist_sca_ix ON mdl_grade_items_history (scaleid)
	;
	CREATE INDEX mdl_graditemhist_out_ix ON mdl_grade_items_history (outcomeid)
	;
	CREATE INDEX mdl_graditemhist_log_ix ON mdl_grade_items_history (loggeduser)
	;
	CREATE TABLE mdl_grade_grades_history (
	    id BIGSERIAL,
	    action BIGINT NOT NULL DEFAULT 0,
	    oldid BIGINT NOT NULL,
	    source VARCHAR(255),
	    timemodified BIGINT,
	    loggeduser BIGINT,
	    itemid BIGINT NOT NULL,
	    userid BIGINT NOT NULL,
	    rawgrade NUMERIC(10,5),
	    rawgrademax NUMERIC(10,5) NOT NULL DEFAULT 100,
	    rawgrademin NUMERIC(10,5) NOT NULL DEFAULT 0,
	    rawscaleid BIGINT,
	    usermodified BIGINT,
	    finalgrade NUMERIC(10,5),
	    hidden BIGINT NOT NULL DEFAULT 0,
	    locked BIGINT NOT NULL DEFAULT 0,
	    locktime BIGINT NOT NULL DEFAULT 0,
	    exported BIGINT NOT NULL DEFAULT 0,
	    overridden BIGINT NOT NULL DEFAULT 0,
	    excluded BIGINT NOT NULL DEFAULT 0,
	    feedback TEXT,
	    feedbackformat BIGINT NOT NULL DEFAULT 0,
	    information TEXT,
	    informationformat BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_gradgradhist_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_grade_grades_history IS 'History table'
	;
	CREATE INDEX mdl_gradgradhist_act_ix ON mdl_grade_grades_history (action)
	;
	CREATE INDEX mdl_gradgradhist_tim_ix ON mdl_grade_grades_history (timemodified)
	;
	CREATE INDEX mdl_gradgradhist_useitetim_ix ON mdl_grade_grades_history (userid, itemid, timemodified)
	;
	CREATE INDEX mdl_gradgradhist_old_ix ON mdl_grade_grades_history (oldid)
	;
	CREATE INDEX mdl_gradgradhist_ite_ix ON mdl_grade_grades_history (itemid)
	;
	CREATE INDEX mdl_gradgradhist_use_ix ON mdl_grade_grades_history (userid)
	;
	CREATE INDEX mdl_gradgradhist_raw_ix ON mdl_grade_grades_history (rawscaleid)
	;
	CREATE INDEX mdl_gradgradhist_use2_ix ON mdl_grade_grades_history (usermodified)
	;
	CREATE INDEX mdl_gradgradhist_log_ix ON mdl_grade_grades_history (loggeduser)
	;
	CREATE TABLE mdl_grade_import_newitem (
	    id BIGSERIAL,
	    itemname VARCHAR(255) NOT NULL DEFAULT '',
	    importcode BIGINT NOT NULL,
	    importer BIGINT NOT NULL,
	CONSTRAINT mdl_gradimponewi_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_grade_import_newitem IS 'temporary table for storing new grade_item names from grade import'
	;
	CREATE INDEX mdl_gradimponewi_imp_ix ON mdl_grade_import_newitem (importer)
	;
	CREATE TABLE mdl_grade_import_values (
	    id BIGSERIAL,
	    itemid BIGINT,
	    newgradeitem BIGINT,
	    userid BIGINT NOT NULL,
	    finalgrade NUMERIC(10,5),
	    feedback TEXT,
	    importcode BIGINT NOT NULL,
	    importer BIGINT,
	    importonlyfeedback SMALLINT DEFAULT 0,
	CONSTRAINT mdl_gradimpovalu_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_grade_import_values IS 'Temporary table for importing grades'
	;
	CREATE INDEX mdl_gradimpovalu_ite_ix ON mdl_grade_import_values (itemid)
	;
	CREATE INDEX mdl_gradimpovalu_new_ix ON mdl_grade_import_values (newgradeitem)
	;
	CREATE INDEX mdl_gradimpovalu_imp_ix ON mdl_grade_import_values (importer)
	;
	CREATE TABLE mdl_tag_coll (
	    id BIGSERIAL,
	    name VARCHAR(255),
	    isdefault SMALLINT NOT NULL DEFAULT 0,
	    component VARCHAR(100),
	    sortorder INTEGER NOT NULL DEFAULT 0,
	    searchable SMALLINT NOT NULL DEFAULT 1,
	    customurl VARCHAR(255),
	CONSTRAINT mdl_tagcoll_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_tag_coll IS 'Defines different set of tags'
	;
	CREATE TABLE mdl_tag_area (
	    id BIGSERIAL,
	    component VARCHAR(100) NOT NULL DEFAULT '',
	    itemtype VARCHAR(100) NOT NULL DEFAULT '',
	    enabled SMALLINT NOT NULL DEFAULT 1,
	    tagcollid BIGINT NOT NULL,
	    callback VARCHAR(100),
	    callbackfile VARCHAR(100),
	    showstandard SMALLINT NOT NULL DEFAULT 0,
	    multiplecontexts SMALLINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_tagarea_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_tag_area IS 'Defines various tag areas, one area is identified by component and itemtype'
	;
	CREATE UNIQUE INDEX mdl_tagarea_comite_uix ON mdl_tag_area (component, itemtype)
	;
	CREATE INDEX mdl_tagarea_tag_ix ON mdl_tag_area (tagcollid)
	;
	CREATE TABLE mdl_tag (
	    id BIGSERIAL,
	    userid BIGINT NOT NULL,
	    tagcollid BIGINT NOT NULL,
	    name VARCHAR(255) NOT NULL DEFAULT '',
	    rawname VARCHAR(255) NOT NULL DEFAULT '',
	    isstandard SMALLINT NOT NULL DEFAULT 0,
	    description TEXT,
	    descriptionformat SMALLINT NOT NULL DEFAULT 0,
	    flag SMALLINT DEFAULT 0,
	    timemodified BIGINT,
	CONSTRAINT mdl_tag_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_tag IS 'Tag table - this generic table will replace the old "tags" table.'
	;
	CREATE UNIQUE INDEX mdl_tag_tagnam_uix ON mdl_tag (tagcollid, name)
	;
	CREATE INDEX mdl_tag_tagiss_ix ON mdl_tag (tagcollid, isstandard)
	;
	CREATE INDEX mdl_tag_use_ix ON mdl_tag (userid)
	;
	CREATE INDEX mdl_tag_tag_ix ON mdl_tag (tagcollid)
	;
	CREATE TABLE mdl_tag_correlation (
	    id BIGSERIAL,
	    tagid BIGINT NOT NULL,
	    correlatedtags TEXT NOT NULL,
	CONSTRAINT mdl_tagcorr_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_tag_correlation IS 'The rationale for the ''tag_correlation'' table is performance.   It works as a cache for a potentially heavy load query done at the ''tag_instance'' table.   So, the ''tag_correlation'' table stores redundant information derived from the ''tag_instance'' ta'
	;
	CREATE INDEX mdl_tagcorr_tag_ix ON mdl_tag_correlation (tagid)
	;
	CREATE TABLE mdl_tag_instance (
	    id BIGSERIAL,
	    tagid BIGINT NOT NULL,
	    component VARCHAR(100) NOT NULL DEFAULT '',
	    itemtype VARCHAR(100) NOT NULL DEFAULT '',
	    itemid BIGINT NOT NULL,
	    contextid BIGINT,
	    tiuserid BIGINT NOT NULL DEFAULT 0,
	    ordering BIGINT,
	    timecreated BIGINT NOT NULL DEFAULT 0,
	    timemodified BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_taginst_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_tag_instance IS 'tag_instance table holds the information of associations between tags and other items'
	;
	CREATE UNIQUE INDEX mdl_taginst_comiteiteconti_uix ON mdl_tag_instance (component, itemtype, itemid, contextid, tiuserid, tagid)
	;
	CREATE INDEX mdl_taginst_itecomtagcon_ix ON mdl_tag_instance (itemtype, component, tagid, contextid)
	;
	CREATE INDEX mdl_taginst_tag_ix ON mdl_tag_instance (tagid)
	;
	CREATE INDEX mdl_taginst_con_ix ON mdl_tag_instance (contextid)
	;
	CREATE TABLE mdl_groups (
	    id BIGSERIAL,
	    courseid BIGINT NOT NULL,
	    idnumber VARCHAR(100) NOT NULL DEFAULT '',
	    name VARCHAR(254) NOT NULL DEFAULT '',
	    description TEXT,
	    descriptionformat SMALLINT NOT NULL DEFAULT 0,
	    enrolmentkey VARCHAR(50),
	    picture BIGINT NOT NULL DEFAULT 0,
	    hidepicture SMALLINT NOT NULL DEFAULT 0,
	    timecreated BIGINT NOT NULL DEFAULT 0,
	    timemodified BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_grou_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_groups IS 'Each record represents a group.'
	;
	CREATE INDEX mdl_grou_idn_ix ON mdl_groups (idnumber)
	;
	CREATE INDEX mdl_grou_cou_ix ON mdl_groups (courseid)
	;
	CREATE TABLE mdl_groupings (
	    id BIGSERIAL,
	    courseid BIGINT NOT NULL DEFAULT 0,
	    name VARCHAR(255) NOT NULL DEFAULT '',
	    idnumber VARCHAR(100) NOT NULL DEFAULT '',
	    description TEXT,
	    descriptionformat SMALLINT NOT NULL DEFAULT 0,
	    configdata TEXT,
	    timecreated BIGINT NOT NULL DEFAULT 0,
	    timemodified BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_grou_id3_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_groupings IS 'A grouping is a collection of groups. WAS: groups_groupings'
	;
	CREATE INDEX mdl_grou_idn2_ix ON mdl_groupings (idnumber)
	;
	CREATE INDEX mdl_grou_cou2_ix ON mdl_groupings (courseid)
	;
	CREATE TABLE mdl_groups_members (
	    id BIGSERIAL,
	    groupid BIGINT NOT NULL DEFAULT 0,
	    userid BIGINT NOT NULL DEFAULT 0,
	    timeadded BIGINT NOT NULL DEFAULT 0,
	    component VARCHAR(100) NOT NULL DEFAULT '',
	    itemid BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_groumemb_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_groups_members IS 'Link a user to a group.'
	;
	CREATE INDEX mdl_groumemb_gro_ix ON mdl_groups_members (groupid)
	;
	CREATE INDEX mdl_groumemb_use_ix ON mdl_groups_members (userid)
	;
	CREATE UNIQUE INDEX mdl_groumemb_usegro_uix ON mdl_groups_members (userid, groupid)
	;
	CREATE TABLE mdl_groupings_groups (
	    id BIGSERIAL,
	    groupingid BIGINT NOT NULL DEFAULT 0,
	    groupid BIGINT NOT NULL DEFAULT 0,
	    timeadded BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_grougrou_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_groupings_groups IS 'Link a grouping to a group (note, groups can be in multiple groupings ONLY in a course). WAS: groups_groupings_groups'
	;
	CREATE INDEX mdl_grougrou_gro_ix ON mdl_groupings_groups (groupingid)
	;
	CREATE INDEX mdl_grougrou_gro2_ix ON mdl_groupings_groups (groupid)
	;
	CREATE TABLE mdl_cohort (
	    id BIGSERIAL,
	    contextid BIGINT NOT NULL,
	    name VARCHAR(254) NOT NULL DEFAULT '',
	    idnumber VARCHAR(100),
	    description TEXT,
	    descriptionformat SMALLINT NOT NULL,
	    visible SMALLINT NOT NULL DEFAULT 1,
	    component VARCHAR(100) NOT NULL DEFAULT '',
	    timecreated BIGINT NOT NULL,
	    timemodified BIGINT NOT NULL,
	    theme VARCHAR(50),
	CONSTRAINT mdl_coho_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_cohort IS 'Each record represents one cohort (aka site-wide group).'
	;
	CREATE INDEX mdl_coho_con_ix ON mdl_cohort (contextid)
	;
	CREATE TABLE mdl_cohort_members (
	    id BIGSERIAL,
	    cohortid BIGINT NOT NULL DEFAULT 0,
	    userid BIGINT NOT NULL DEFAULT 0,
	    timeadded BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_cohomemb_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_cohort_members IS 'Link a user to a cohort.'
	;
	CREATE UNIQUE INDEX mdl_cohomemb_cohuse_uix ON mdl_cohort_members (cohortid, userid)
	;
	CREATE INDEX mdl_cohomemb_coh_ix ON mdl_cohort_members (cohortid)
	;
	CREATE INDEX mdl_cohomemb_use_ix ON mdl_cohort_members (userid)
	;
	CREATE TABLE mdl_user_private_key (
	    id BIGSERIAL,
	    script VARCHAR(128) NOT NULL DEFAULT '',
	    value VARCHAR(128) NOT NULL DEFAULT '',
	    userid BIGINT NOT NULL,
	    instance BIGINT,
	    iprestriction VARCHAR(255),
	    validuntil BIGINT,
	    timecreated BIGINT,
	CONSTRAINT mdl_userprivkey_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_user_private_key IS 'access keys used in cookieless scripts - rss, etc.'
	;
	CREATE INDEX mdl_userprivkey_scrval_ix ON mdl_user_private_key (script, value)
	;
	CREATE INDEX mdl_userprivkey_use_ix ON mdl_user_private_key (userid)
	;
	CREATE TABLE mdl_grade_letters (
	    id BIGSERIAL,
	    contextid BIGINT NOT NULL,
	    lowerboundary NUMERIC(10,5) NOT NULL,
	    letter VARCHAR(255) NOT NULL DEFAULT '',
	CONSTRAINT mdl_gradlett_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_grade_letters IS 'Repository for grade letters, for courses and other moodle entities that use grades.'
	;
	CREATE UNIQUE INDEX mdl_gradlett_conlowlet_uix ON mdl_grade_letters (contextid, lowerboundary, letter)
	;
	CREATE TABLE mdl_cache_flags (
	    id BIGSERIAL,
	    flagtype VARCHAR(255) NOT NULL DEFAULT '',
	    name VARCHAR(255) NOT NULL DEFAULT '',
	    timemodified BIGINT NOT NULL DEFAULT 0,
	    value TEXT NOT NULL,
	    expiry BIGINT NOT NULL,
	CONSTRAINT mdl_cachflag_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_cache_flags IS 'Cache of time-sensitive flags'
	;
	CREATE INDEX mdl_cachflag_fla_ix ON mdl_cache_flags (flagtype)
	;
	CREATE INDEX mdl_cachflag_nam_ix ON mdl_cache_flags (name)
	;
	CREATE TABLE mdl_grade_settings (
	    id BIGSERIAL,
	    courseid BIGINT NOT NULL,
	    name VARCHAR(255) NOT NULL DEFAULT '',
	    value TEXT,
	CONSTRAINT mdl_gradsett_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_grade_settings IS 'gradebook settings'
	;
	CREATE UNIQUE INDEX mdl_gradsett_counam_uix ON mdl_grade_settings (courseid, name)
	;
	CREATE INDEX mdl_gradsett_cou_ix ON mdl_grade_settings (courseid)
	;
	CREATE TABLE mdl_portfolio_instance (
	    id BIGSERIAL,
	    plugin VARCHAR(50) NOT NULL DEFAULT '',
	    name VARCHAR(255) NOT NULL DEFAULT '',
	    visible SMALLINT NOT NULL DEFAULT 1,
	CONSTRAINT mdl_portinst_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_portfolio_instance IS 'base table (not including config data) for instances of portfolio plugins.'
	;
	CREATE TABLE mdl_portfolio_instance_config (
	    id BIGSERIAL,
	    instance BIGINT NOT NULL,
	    name VARCHAR(255) NOT NULL DEFAULT '',
	    value TEXT,
	CONSTRAINT mdl_portinstconf_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_portfolio_instance_config IS 'config for portfolio plugin instances'
	;
	CREATE INDEX mdl_portinstconf_nam_ix ON mdl_portfolio_instance_config (name)
	;
	CREATE INDEX mdl_portinstconf_ins_ix ON mdl_portfolio_instance_config (instance)
	;
	CREATE TABLE mdl_portfolio_instance_user (
	    id BIGSERIAL,
	    instance BIGINT NOT NULL,
	    userid BIGINT NOT NULL,
	    name VARCHAR(255) NOT NULL DEFAULT '',
	    value TEXT,
	CONSTRAINT mdl_portinstuser_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_portfolio_instance_user IS 'user data for portfolio instances.'
	;
	CREATE INDEX mdl_portinstuser_ins_ix ON mdl_portfolio_instance_user (instance)
	;
	CREATE INDEX mdl_portinstuser_use_ix ON mdl_portfolio_instance_user (userid)
	;
	CREATE TABLE mdl_portfolio_log (
	    id BIGSERIAL,
	    userid BIGINT NOT NULL,
	    time BIGINT NOT NULL,
	    portfolio BIGINT NOT NULL,
	    caller_class VARCHAR(150) NOT NULL DEFAULT '',
	    caller_file VARCHAR(255) NOT NULL DEFAULT '',
	    caller_component VARCHAR(255),
	    caller_sha1 VARCHAR(255) NOT NULL DEFAULT '',
	    tempdataid BIGINT NOT NULL DEFAULT 0,
	    returnurl VARCHAR(255) NOT NULL DEFAULT '',
	    continueurl VARCHAR(255) NOT NULL DEFAULT '',
	CONSTRAINT mdl_portlog_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_portfolio_log IS 'log of portfolio transfers (used to later check for duplicates)'
	;
	CREATE INDEX mdl_portlog_use_ix ON mdl_portfolio_log (userid)
	;
	CREATE INDEX mdl_portlog_por_ix ON mdl_portfolio_log (portfolio)
	;
	CREATE TABLE mdl_portfolio_tempdata (
	    id BIGSERIAL,
	    data TEXT,
	    expirytime BIGINT NOT NULL,
	    userid BIGINT NOT NULL,
	    instance BIGINT DEFAULT 0,
	    queued SMALLINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_porttemp_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_portfolio_tempdata IS 'stores temporary data for portfolio exports. the id of this table is used for the itemid for the temporary files area.  cron can clean up stale records (and associated file data) after expirytime.'
	;
	CREATE INDEX mdl_porttemp_use_ix ON mdl_portfolio_tempdata (userid)
	;
	CREATE INDEX mdl_porttemp_ins_ix ON mdl_portfolio_tempdata (instance)
	;
	CREATE TABLE mdl_message_providers (
	    id BIGSERIAL,
	    name VARCHAR(100) NOT NULL DEFAULT '',
	    component VARCHAR(200) NOT NULL DEFAULT '',
	    capability VARCHAR(255),
	CONSTRAINT mdl_messprov_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_message_providers IS 'This table stores the message providers (modules and core systems)'
	;
	CREATE UNIQUE INDEX mdl_messprov_comnam_uix ON mdl_message_providers (component, name)
	;
	CREATE TABLE mdl_message_processors (
	    id BIGSERIAL,
	    name VARCHAR(166) NOT NULL DEFAULT '',
	    enabled SMALLINT NOT NULL DEFAULT 1,
	CONSTRAINT mdl_messproc_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_message_processors IS 'List of message output plugins'
	;
	CREATE TABLE mdl_files (
	    id BIGSERIAL,
	    contenthash VARCHAR(40) NOT NULL DEFAULT '',
	    pathnamehash VARCHAR(40) NOT NULL DEFAULT '',
	    contextid BIGINT NOT NULL,
	    component VARCHAR(100) NOT NULL DEFAULT '',
	    filearea VARCHAR(50) NOT NULL DEFAULT '',
	    itemid BIGINT NOT NULL,
	    filepath VARCHAR(255) NOT NULL DEFAULT '',
	    filename VARCHAR(255) NOT NULL DEFAULT '',
	    userid BIGINT,
	    filesize BIGINT NOT NULL,
	    mimetype VARCHAR(100),
	    status BIGINT NOT NULL DEFAULT 0,
	    source TEXT,
	    author VARCHAR(255),
	    license VARCHAR(255),
	    timecreated BIGINT NOT NULL,
	    timemodified BIGINT NOT NULL,
	    sortorder BIGINT NOT NULL DEFAULT 0,
	    referencefileid BIGINT,
	CONSTRAINT mdl_file_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_files IS 'description of files, content is stored in sha1 file pool'
	;
	CREATE INDEX mdl_file_comfilconite_ix ON mdl_files (component, filearea, contextid, itemid)
	;
	CREATE INDEX mdl_file_con_ix ON mdl_files (contenthash)
	;
	CREATE UNIQUE INDEX mdl_file_pat_uix ON mdl_files (pathnamehash)
	;
	CREATE INDEX mdl_file_con2_ix ON mdl_files (contextid)
	;
	CREATE INDEX mdl_file_use_ix ON mdl_files (userid)
	;
	CREATE INDEX mdl_file_ref_ix ON mdl_files (referencefileid)
	;
	CREATE TABLE mdl_files_reference (
	    id BIGSERIAL,
	    repositoryid BIGINT NOT NULL,
	    lastsync BIGINT,
	    reference TEXT,
	    referencehash VARCHAR(40) NOT NULL DEFAULT '',
	CONSTRAINT mdl_filerefe_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_files_reference IS 'Store files references'
	;
	CREATE UNIQUE INDEX mdl_filerefe_refrep_uix ON mdl_files_reference (referencehash, repositoryid)
	;
	CREATE INDEX mdl_filerefe_rep_ix ON mdl_files_reference (repositoryid)
	;
	CREATE TABLE mdl_file_conversion (
	    id BIGSERIAL,
	    usermodified BIGINT NOT NULL,
	    timecreated BIGINT NOT NULL,
	    timemodified BIGINT NOT NULL,
	    sourcefileid BIGINT NOT NULL,
	    targetformat VARCHAR(100) NOT NULL DEFAULT '',
	    status BIGINT DEFAULT 0,
	    statusmessage TEXT,
	    converter VARCHAR(255),
	    destfileid BIGINT,
	    data TEXT,
	CONSTRAINT mdl_fileconv_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_file_conversion IS 'Table to track file conversions.'
	;
	CREATE INDEX mdl_fileconv_sou_ix ON mdl_file_conversion (sourcefileid)
	;
	CREATE INDEX mdl_fileconv_des_ix ON mdl_file_conversion (destfileid)
	;
	CREATE TABLE mdl_repository (
	    id BIGSERIAL,
	    type VARCHAR(255) NOT NULL DEFAULT '',
	    visible SMALLINT DEFAULT 1,
	    sortorder BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_repo_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_repository IS 'This table contains one entry for every configured external repository instance.'
	;
	CREATE TABLE mdl_repository_instances (
	    id BIGSERIAL,
	    name VARCHAR(255) NOT NULL DEFAULT '',
	    typeid BIGINT NOT NULL,
	    userid BIGINT NOT NULL DEFAULT 0,
	    contextid BIGINT NOT NULL,
	    username VARCHAR(255),
	    password VARCHAR(255),
	    timecreated BIGINT,
	    timemodified BIGINT,
	    readonly SMALLINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_repoinst_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_repository_instances IS 'This table contains one entry for every configured external repository instance.'
	;
	CREATE TABLE mdl_repository_instance_config (
	    id BIGSERIAL,
	    instanceid BIGINT NOT NULL,
	    name VARCHAR(255) NOT NULL DEFAULT '',
	    value TEXT,
	CONSTRAINT mdl_repoinstconf_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_repository_instance_config IS 'The config for intances'
	;
	CREATE TABLE mdl_backup_courses (
	    id BIGSERIAL,
	    courseid BIGINT NOT NULL DEFAULT 0,
	    laststarttime BIGINT NOT NULL DEFAULT 0,
	    lastendtime BIGINT NOT NULL DEFAULT 0,
	    laststatus VARCHAR(1) NOT NULL DEFAULT '5',
	    nextstarttime BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_backcour_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_backup_courses IS 'To store every course backup status'
	;
	CREATE UNIQUE INDEX mdl_backcour_cou_uix ON mdl_backup_courses (courseid)
	;
	CREATE TABLE mdl_block (
	    id BIGSERIAL,
	    name VARCHAR(40) NOT NULL DEFAULT '',
	    cron BIGINT NOT NULL DEFAULT 0,
	    lastcron BIGINT NOT NULL DEFAULT 0,
	    visible SMALLINT NOT NULL DEFAULT 1,
	CONSTRAINT mdl_bloc_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_block IS 'contains all installed blocks'
	;
	CREATE UNIQUE INDEX mdl_bloc_nam_uix ON mdl_block (name)
	;
	CREATE TABLE mdl_block_instances (
	    id BIGSERIAL,
	    blockname VARCHAR(40) NOT NULL DEFAULT '',
	    parentcontextid BIGINT NOT NULL,
	    showinsubcontexts SMALLINT NOT NULL,
	    requiredbytheme SMALLINT NOT NULL DEFAULT 0,
	    pagetypepattern VARCHAR(64) NOT NULL DEFAULT '',
	    subpagepattern VARCHAR(16),
	    defaultregion VARCHAR(16) NOT NULL DEFAULT '',
	    defaultweight BIGINT NOT NULL,
	    configdata TEXT,
	    timecreated BIGINT NOT NULL,
	    timemodified BIGINT NOT NULL,
	CONSTRAINT mdl_blocinst_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_block_instances IS 'This table stores block instances. The type of block this is is given by the blockname column. The places this block instance appears is controlled by the parentcontexid, showinsubcontexts, pagetypepattern and subpagepattern fields. Where the block a'
	;
	CREATE INDEX mdl_blocinst_parshopagsub_ix ON mdl_block_instances (parentcontextid, showinsubcontexts, pagetypepattern, subpagepattern)
	;
	CREATE INDEX mdl_blocinst_tim_ix ON mdl_block_instances (timemodified)
	;
	CREATE INDEX mdl_blocinst_par_ix ON mdl_block_instances (parentcontextid)
	;
	CREATE TABLE mdl_block_positions (
	    id BIGSERIAL,
	    blockinstanceid BIGINT NOT NULL,
	    contextid BIGINT NOT NULL,
	    pagetype VARCHAR(64) NOT NULL DEFAULT '',
	    subpage VARCHAR(16) NOT NULL DEFAULT '',
	    visible SMALLINT NOT NULL,
	    region VARCHAR(16) NOT NULL DEFAULT '',
	    weight BIGINT NOT NULL,
	CONSTRAINT mdl_blocposi_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_block_positions IS 'Stores the position of a sticky block_instance on a another page than the one where it was added.'
	;
	CREATE UNIQUE INDEX mdl_blocposi_bloconpagsub_uix ON mdl_block_positions (blockinstanceid, contextid, pagetype, subpage)
	;
	CREATE INDEX mdl_blocposi_blo_ix ON mdl_block_positions (blockinstanceid)
	;
	CREATE INDEX mdl_blocposi_con_ix ON mdl_block_positions (contextid)
	;
	CREATE TABLE mdl_comments (
	    id BIGSERIAL,
	    contextid BIGINT NOT NULL,
	    component VARCHAR(255),
	    commentarea VARCHAR(255) NOT NULL DEFAULT '',
	    itemid BIGINT NOT NULL,
	    content TEXT NOT NULL,
	    format SMALLINT NOT NULL DEFAULT 0,
	    userid BIGINT NOT NULL,
	    timecreated BIGINT NOT NULL,
	CONSTRAINT mdl_comm_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_comments IS 'moodle comments module'
	;
	CREATE INDEX mdl_comm_concomite_ix ON mdl_comments (contextid, commentarea, itemid)
	;
	CREATE INDEX mdl_comm_use_ix ON mdl_comments (userid)
	;
	CREATE TABLE mdl_external_services (
	    id BIGSERIAL,
	    name VARCHAR(200) NOT NULL DEFAULT '',
	    enabled SMALLINT NOT NULL,
	    requiredcapability VARCHAR(150),
	    restrictedusers SMALLINT NOT NULL,
	    component VARCHAR(100),
	    timecreated BIGINT NOT NULL,
	    timemodified BIGINT,
	    shortname VARCHAR(255),
	    downloadfiles SMALLINT NOT NULL DEFAULT 0,
	    uploadfiles SMALLINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_exteserv_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_external_services IS 'built in and custom external services'
	;
	CREATE UNIQUE INDEX mdl_exteserv_nam_uix ON mdl_external_services (name)
	;
	CREATE TABLE mdl_external_functions (
	    id BIGSERIAL,
	    name VARCHAR(200) NOT NULL DEFAULT '',
	    classname VARCHAR(100) NOT NULL DEFAULT '',
	    methodname VARCHAR(100) NOT NULL DEFAULT '',
	    classpath VARCHAR(255),
	    component VARCHAR(100) NOT NULL DEFAULT '',
	    capabilities VARCHAR(255),
	    services VARCHAR(1333),
	CONSTRAINT mdl_extefunc_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_external_functions IS 'list of all external functions'
	;
	CREATE UNIQUE INDEX mdl_extefunc_nam_uix ON mdl_external_functions (name)
	;
	CREATE TABLE mdl_external_services_functions (
	    id BIGSERIAL,
	    externalserviceid BIGINT NOT NULL,
	    functionname VARCHAR(200) NOT NULL DEFAULT '',
	CONSTRAINT mdl_exteservfunc_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_external_services_functions IS 'lists functions available in each service group'
	;
	CREATE INDEX mdl_exteservfunc_ext_ix ON mdl_external_services_functions (externalserviceid)
	;
	CREATE TABLE mdl_external_services_users (
	    id BIGSERIAL,
	    externalserviceid BIGINT NOT NULL,
	    userid BIGINT NOT NULL,
	    iprestriction VARCHAR(255),
	    validuntil BIGINT,
	    timecreated BIGINT,
	CONSTRAINT mdl_exteservuser_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_external_services_users IS 'users allowed to use services with restricted users flag'
	;
	CREATE INDEX mdl_exteservuser_ext_ix ON mdl_external_services_users (externalserviceid)
	;
	CREATE INDEX mdl_exteservuser_use_ix ON mdl_external_services_users (userid)
	;
	CREATE TABLE mdl_external_tokens (
	    id BIGSERIAL,
	    token VARCHAR(128) NOT NULL DEFAULT '',
	    privatetoken VARCHAR(64),
	    tokentype SMALLINT NOT NULL,
	    userid BIGINT NOT NULL,
	    externalserviceid BIGINT NOT NULL,
	    sid VARCHAR(128),
	    contextid BIGINT NOT NULL,
	    creatorid BIGINT NOT NULL DEFAULT 1,
	    iprestriction VARCHAR(255),
	    validuntil BIGINT,
	    timecreated BIGINT NOT NULL,
	    lastaccess BIGINT,
	CONSTRAINT mdl_extetoke_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_external_tokens IS 'Security tokens for accessing of external services'
	;
	CREATE INDEX mdl_extetoke_use_ix ON mdl_external_tokens (userid)
	;
	CREATE INDEX mdl_extetoke_ext_ix ON mdl_external_tokens (externalserviceid)
	;
	CREATE INDEX mdl_extetoke_con_ix ON mdl_external_tokens (contextid)
	;
	CREATE INDEX mdl_extetoke_cre_ix ON mdl_external_tokens (creatorid)
	;
	CREATE TABLE mdl_blog_association (
	    id BIGSERIAL,
	    contextid BIGINT NOT NULL,
	    blogid BIGINT NOT NULL,
	CONSTRAINT mdl_blogasso_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_blog_association IS 'Associations of blog entries with courses and module instances'
	;
	CREATE INDEX mdl_blogasso_con_ix ON mdl_blog_association (contextid)
	;
	CREATE INDEX mdl_blogasso_blo_ix ON mdl_blog_association (blogid)
	;
	CREATE TABLE mdl_blog_external (
	    id BIGSERIAL,
	    userid BIGINT NOT NULL,
	    name VARCHAR(255) NOT NULL DEFAULT '',
	    description TEXT,
	    url TEXT NOT NULL,
	    filtertags VARCHAR(255),
	    failedlastsync SMALLINT NOT NULL DEFAULT 0,
	    timemodified BIGINT,
	    timefetched BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_blogexte_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_blog_external IS 'External blog links used for RSS copying of blog entries to Moodle user blogs'
	;
	CREATE INDEX mdl_blogexte_use_ix ON mdl_blog_external (userid)
	;
	CREATE TABLE mdl_rating (
	    id BIGSERIAL,
	    contextid BIGINT NOT NULL,
	    component VARCHAR(100) NOT NULL DEFAULT '',
	    ratingarea VARCHAR(50) NOT NULL DEFAULT '',
	    itemid BIGINT NOT NULL,
	    scaleid BIGINT NOT NULL,
	    rating BIGINT NOT NULL,
	    userid BIGINT NOT NULL,
	    timecreated BIGINT NOT NULL,
	    timemodified BIGINT NOT NULL,
	CONSTRAINT mdl_rati_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_rating IS 'moodle ratings'
	;
	CREATE INDEX mdl_rati_comratconite_ix ON mdl_rating (component, ratingarea, contextid, itemid)
	;
	CREATE INDEX mdl_rati_con_ix ON mdl_rating (contextid)
	;
	CREATE INDEX mdl_rati_use_ix ON mdl_rating (userid)
	;
	CREATE TABLE mdl_license (
	    id BIGSERIAL,
	    shortname VARCHAR(255),
	    fullname TEXT,
	    source VARCHAR(255),
	    enabled SMALLINT NOT NULL DEFAULT 1,
	    version BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_lice_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_license IS 'store licenses used by moodle'
	;
	CREATE TABLE mdl_registration_hubs (
	    id BIGSERIAL,
	    token VARCHAR(255) NOT NULL DEFAULT '',
	    hubname VARCHAR(255) NOT NULL DEFAULT '',
	    huburl VARCHAR(255) NOT NULL DEFAULT '',
	    confirmed SMALLINT NOT NULL DEFAULT 0,
	    secret VARCHAR(255),
	    timemodified BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_regihubs_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_registration_hubs IS 'hub where the site is registered on with their associated token'
	;
	CREATE TABLE mdl_backup_controllers (
	    id BIGSERIAL,
	    backupid VARCHAR(32) NOT NULL DEFAULT '',
	    operation VARCHAR(20) NOT NULL DEFAULT 'backup',
	    type VARCHAR(10) NOT NULL DEFAULT '',
	    itemid BIGINT NOT NULL,
	    format VARCHAR(20) NOT NULL DEFAULT '',
	    interactive SMALLINT NOT NULL,
	    purpose SMALLINT NOT NULL,
	    userid BIGINT NOT NULL,
	    status SMALLINT NOT NULL,
	    execution SMALLINT NOT NULL,
	    executiontime BIGINT NOT NULL,
	    checksum VARCHAR(32) NOT NULL DEFAULT '',
	    timecreated BIGINT NOT NULL,
	    timemodified BIGINT NOT NULL,
	    controller TEXT NOT NULL,
	CONSTRAINT mdl_backcont_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_backup_controllers IS 'To store the backup_controllers as they are used'
	;
	CREATE INDEX mdl_backcont_typite_ix ON mdl_backup_controllers (type, itemid)
	;
	CREATE UNIQUE INDEX mdl_backcont_bac_uix ON mdl_backup_controllers (backupid)
	;
	CREATE INDEX mdl_backcont_use_ix ON mdl_backup_controllers (userid)
	;
	CREATE TABLE mdl_backup_logs (
	    id BIGSERIAL,
	    backupid VARCHAR(32) NOT NULL DEFAULT '',
	    loglevel SMALLINT NOT NULL,
	    message TEXT NOT NULL,
	    timecreated BIGINT NOT NULL,
	CONSTRAINT mdl_backlogs_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_backup_logs IS 'To store all the logs from backup and restore operations (by db logger)'
	;
	CREATE UNIQUE INDEX mdl_backlogs_bacid_uix ON mdl_backup_logs (backupid, id)
	;
	CREATE INDEX mdl_backlogs_bac_ix ON mdl_backup_logs (backupid)
	;
	CREATE TABLE mdl_profiling (
	    id BIGSERIAL,
	    runid VARCHAR(32) NOT NULL DEFAULT '',
	    url VARCHAR(255) NOT NULL DEFAULT '',
	    data TEXT NOT NULL,
	    totalexecutiontime BIGINT NOT NULL,
	    totalcputime BIGINT NOT NULL,
	    totalcalls BIGINT NOT NULL,
	    totalmemory BIGINT NOT NULL,
	    runreference SMALLINT NOT NULL DEFAULT 0,
	    runcomment VARCHAR(255) NOT NULL DEFAULT '',
	    timecreated BIGINT NOT NULL,
	CONSTRAINT mdl_prof_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_profiling IS 'Stores the results of all the profiling runs'
	;
	CREATE INDEX mdl_prof_urlrun_ix ON mdl_profiling (url, runreference)
	;
	CREATE INDEX mdl_prof_timrun_ix ON mdl_profiling (timecreated, runreference)
	;
	CREATE UNIQUE INDEX mdl_prof_run_uix ON mdl_profiling (runid)
	;
	CREATE TABLE mdl_course_published (
	    id BIGSERIAL,
	    huburl VARCHAR(255),
	    courseid BIGINT NOT NULL,
	    timepublished BIGINT NOT NULL,
	    enrollable SMALLINT NOT NULL DEFAULT 1,
	    hubcourseid BIGINT NOT NULL,
	    status SMALLINT DEFAULT 0,
	    timechecked BIGINT,
	CONSTRAINT mdl_courpubl_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_course_published IS 'Information about how and when an local courses were published to hubs'
	;
	CREATE TABLE mdl_grading_areas (
	    id BIGSERIAL,
	    contextid BIGINT NOT NULL,
	    component VARCHAR(100) NOT NULL DEFAULT '',
	    areaname VARCHAR(100) NOT NULL DEFAULT '',
	    activemethod VARCHAR(100),
	CONSTRAINT mdl_gradarea_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_grading_areas IS 'Identifies gradable areas where advanced grading can happen. For each area, the current active plugin can be set.'
	;
	CREATE UNIQUE INDEX mdl_gradarea_concomare_uix ON mdl_grading_areas (contextid, component, areaname)
	;
	CREATE INDEX mdl_gradarea_con_ix ON mdl_grading_areas (contextid)
	;
	CREATE TABLE mdl_grading_definitions (
	    id BIGSERIAL,
	    areaid BIGINT NOT NULL,
	    method VARCHAR(100) NOT NULL DEFAULT '',
	    name VARCHAR(255) NOT NULL DEFAULT '',
	    description TEXT,
	    descriptionformat SMALLINT,
	    status BIGINT NOT NULL DEFAULT 0,
	    copiedfromid BIGINT,
	    timecreated BIGINT NOT NULL,
	    usercreated BIGINT NOT NULL,
	    timemodified BIGINT NOT NULL,
	    usermodified BIGINT NOT NULL,
	    timecopied BIGINT DEFAULT 0,
	    options TEXT,
	CONSTRAINT mdl_graddefi_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_grading_definitions IS 'Contains the basic information about an advanced grading form defined in the given gradable area'
	;
	CREATE INDEX mdl_graddefi_are_ix ON mdl_grading_definitions (areaid)
	;
	CREATE INDEX mdl_graddefi_use_ix ON mdl_grading_definitions (usermodified)
	;
	CREATE UNIQUE INDEX mdl_graddefi_aremet_uix ON mdl_grading_definitions (areaid, method)
	;
	CREATE INDEX mdl_graddefi_use2_ix ON mdl_grading_definitions (usercreated)
	;
	CREATE TABLE mdl_grading_instances (
	    id BIGSERIAL,
	    definitionid BIGINT NOT NULL,
	    raterid BIGINT NOT NULL,
	    itemid BIGINT,
	    rawgrade NUMERIC(10,5),
	    status BIGINT NOT NULL DEFAULT 0,
	    feedback TEXT,
	    feedbackformat SMALLINT,
	    timemodified BIGINT NOT NULL,
	CONSTRAINT mdl_gradinst_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_grading_instances IS 'Grading form instance is an assessment record for one gradable item assessed by one rater'
	;
	CREATE INDEX mdl_gradinst_def_ix ON mdl_grading_instances (definitionid)
	;
	CREATE INDEX mdl_gradinst_rat_ix ON mdl_grading_instances (raterid)
	;
	CREATE TABLE mdl_event_subscriptions (
	    id BIGSERIAL,
	    url VARCHAR(255) NOT NULL DEFAULT '',
	    categoryid BIGINT NOT NULL DEFAULT 0,
	    courseid BIGINT NOT NULL DEFAULT 0,
	    groupid BIGINT NOT NULL DEFAULT 0,
	    userid BIGINT NOT NULL DEFAULT 0,
	    eventtype VARCHAR(20) NOT NULL DEFAULT '',
	    pollinterval BIGINT NOT NULL DEFAULT 0,
	    lastupdated BIGINT,
	    name VARCHAR(255) NOT NULL DEFAULT '',
	CONSTRAINT mdl_evensubs_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_event_subscriptions IS 'Tracks subscriptions to remote calendars.'
	;
	CREATE TABLE mdl_badge (
	    id BIGSERIAL,
	    name VARCHAR(255) NOT NULL DEFAULT '',
	    description TEXT,
	    timecreated BIGINT NOT NULL DEFAULT 0,
	    timemodified BIGINT NOT NULL DEFAULT 0,
	    usercreated BIGINT NOT NULL,
	    usermodified BIGINT NOT NULL,
	    issuername VARCHAR(255) NOT NULL DEFAULT '',
	    issuerurl VARCHAR(255) NOT NULL DEFAULT '',
	    issuercontact VARCHAR(255),
	    expiredate BIGINT,
	    expireperiod BIGINT,
	    type SMALLINT NOT NULL DEFAULT 1,
	    courseid BIGINT,
	    message TEXT NOT NULL,
	    messagesubject TEXT NOT NULL,
	    attachment SMALLINT NOT NULL DEFAULT 1,
	    notification SMALLINT NOT NULL DEFAULT 1,
	    status SMALLINT NOT NULL DEFAULT 0,
	    nextcron BIGINT,
	CONSTRAINT mdl_badg_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_badge IS 'Defines badge'
	;
	CREATE INDEX mdl_badg_typ_ix ON mdl_badge (type)
	;
	CREATE INDEX mdl_badg_cou_ix ON mdl_badge (courseid)
	;
	CREATE INDEX mdl_badg_use_ix ON mdl_badge (usermodified)
	;
	CREATE INDEX mdl_badg_use2_ix ON mdl_badge (usercreated)
	;
	CREATE TABLE mdl_badge_criteria (
	    id BIGSERIAL,
	    badgeid BIGINT NOT NULL DEFAULT 0,
	    criteriatype BIGINT,
	    method SMALLINT NOT NULL DEFAULT 1,
	    description TEXT,
	    descriptionformat SMALLINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_badgcrit_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_badge_criteria IS 'Defines criteria for issuing badges'
	;
	CREATE INDEX mdl_badgcrit_cri_ix ON mdl_badge_criteria (criteriatype)
	;
	CREATE UNIQUE INDEX mdl_badgcrit_badcri_uix ON mdl_badge_criteria (badgeid, criteriatype)
	;
	CREATE INDEX mdl_badgcrit_bad_ix ON mdl_badge_criteria (badgeid)
	;
	CREATE TABLE mdl_badge_criteria_param (
	    id BIGSERIAL,
	    critid BIGINT NOT NULL,
	    name VARCHAR(255) NOT NULL DEFAULT '',
	    value VARCHAR(255),
	CONSTRAINT mdl_badgcritpara_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_badge_criteria_param IS 'Defines parameters for badges criteria'
	;
	CREATE INDEX mdl_badgcritpara_cri_ix ON mdl_badge_criteria_param (critid)
	;
	CREATE TABLE mdl_badge_issued (
	    id BIGSERIAL,
	    badgeid BIGINT NOT NULL DEFAULT 0,
	    userid BIGINT NOT NULL DEFAULT 0,
	    uniquehash TEXT NOT NULL,
	    dateissued BIGINT NOT NULL DEFAULT 0,
	    dateexpire BIGINT,
	    visible SMALLINT NOT NULL DEFAULT 0,
	    issuernotified BIGINT,
	CONSTRAINT mdl_badgissu_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_badge_issued IS 'Defines issued badges'
	;
	CREATE UNIQUE INDEX mdl_badgissu_baduse_uix ON mdl_badge_issued (badgeid, userid)
	;
	CREATE INDEX mdl_badgissu_bad_ix ON mdl_badge_issued (badgeid)
	;
	CREATE INDEX mdl_badgissu_use_ix ON mdl_badge_issued (userid)
	;
	CREATE TABLE mdl_badge_criteria_met (
	    id BIGSERIAL,
	    issuedid BIGINT,
	    critid BIGINT NOT NULL,
	    userid BIGINT NOT NULL,
	    datemet BIGINT NOT NULL,
	CONSTRAINT mdl_badgcritmet_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_badge_criteria_met IS 'Defines criteria that were met for an issued badge'
	;
	CREATE INDEX mdl_badgcritmet_cri_ix ON mdl_badge_criteria_met (critid)
	;
	CREATE INDEX mdl_badgcritmet_use_ix ON mdl_badge_criteria_met (userid)
	;
	CREATE INDEX mdl_badgcritmet_iss_ix ON mdl_badge_criteria_met (issuedid)
	;
	CREATE TABLE mdl_badge_manual_award (
	    id BIGSERIAL,
	    badgeid BIGINT NOT NULL,
	    recipientid BIGINT NOT NULL,
	    issuerid BIGINT NOT NULL,
	    issuerrole BIGINT NOT NULL,
	    datemet BIGINT NOT NULL,
	CONSTRAINT mdl_badgmanuawar_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_badge_manual_award IS 'Track manual award criteria for badges'
	;
	CREATE INDEX mdl_badgmanuawar_bad_ix ON mdl_badge_manual_award (badgeid)
	;
	CREATE INDEX mdl_badgmanuawar_rec_ix ON mdl_badge_manual_award (recipientid)
	;
	CREATE INDEX mdl_badgmanuawar_iss_ix ON mdl_badge_manual_award (issuerid)
	;
	CREATE INDEX mdl_badgmanuawar_iss2_ix ON mdl_badge_manual_award (issuerrole)
	;
	CREATE TABLE mdl_badge_backpack (
	    id BIGSERIAL,
	    userid BIGINT NOT NULL DEFAULT 0,
	    email VARCHAR(100) NOT NULL DEFAULT '',
	    backpackurl VARCHAR(255) NOT NULL DEFAULT '',
	    backpackuid BIGINT NOT NULL,
	    autosync SMALLINT NOT NULL DEFAULT 0,
	    password VARCHAR(50),
	CONSTRAINT mdl_badgback_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_badge_backpack IS 'Defines settings for connecting external backpack'
	;
	CREATE INDEX mdl_badgback_use_ix ON mdl_badge_backpack (userid)
	;
	CREATE TABLE mdl_badge_external (
	    id BIGSERIAL,
	    backpackid BIGINT NOT NULL,
	    collectionid BIGINT NOT NULL,
	CONSTRAINT mdl_badgexte_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_badge_external IS 'Setting for external badges display'
	;
	CREATE INDEX mdl_badgexte_bac_ix ON mdl_badge_external (backpackid)
	;
	CREATE TABLE mdl_user_devices (
	    id BIGSERIAL,
	    userid BIGINT NOT NULL DEFAULT 0,
	    appid VARCHAR(128) NOT NULL DEFAULT '',
	    name VARCHAR(32) NOT NULL DEFAULT '',
	    model VARCHAR(32) NOT NULL DEFAULT '',
	    platform VARCHAR(32) NOT NULL DEFAULT '',
	    version VARCHAR(32) NOT NULL DEFAULT '',
	    pushid VARCHAR(255) NOT NULL DEFAULT '',
	    uuid VARCHAR(255) NOT NULL DEFAULT '',
	    timecreated BIGINT NOT NULL,
	    timemodified BIGINT NOT NULL,
	CONSTRAINT mdl_userdevi_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_user_devices IS 'This table stores user''s mobile devices information in order to send PUSH notifications'
	;
	CREATE INDEX mdl_userdevi_uuiuse_ix ON mdl_user_devices (uuid, userid)
	;
	CREATE UNIQUE INDEX mdl_userdevi_pususe_uix ON mdl_user_devices (pushid, userid)
	;
	CREATE INDEX mdl_userdevi_use_ix ON mdl_user_devices (userid)
	;
	CREATE TABLE mdl_user_password_resets (
	    id BIGSERIAL,
	    userid BIGINT NOT NULL,
	    timerequested BIGINT NOT NULL,
	    timererequested BIGINT NOT NULL DEFAULT 0,
	    token VARCHAR(32) NOT NULL DEFAULT '',
	CONSTRAINT mdl_userpassrese_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_user_password_resets IS 'table tracking password reset confirmation tokens'
	;
	CREATE INDEX mdl_userpassrese_use_ix ON mdl_user_password_resets (userid)
	;
	CREATE TABLE mdl_lock_db (
	    id BIGSERIAL,
	    resourcekey VARCHAR(255) NOT NULL DEFAULT '',
	    expires BIGINT,
	    owner VARCHAR(36),
	CONSTRAINT mdl_lockdb_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_lock_db IS 'Stores active and inactive lock types for db locking method.'
	;
	CREATE UNIQUE INDEX mdl_lockdb_res_uix ON mdl_lock_db (resourcekey)
	;
	CREATE INDEX mdl_lockdb_exp_ix ON mdl_lock_db (expires)
	;
	CREATE INDEX mdl_lockdb_own_ix ON mdl_lock_db (owner)
	;
	CREATE TABLE mdl_task_scheduled (
	    id BIGSERIAL,
	    component VARCHAR(255) NOT NULL DEFAULT '',
	    classname VARCHAR(255) NOT NULL DEFAULT '',
	    lastruntime BIGINT,
	    nextruntime BIGINT,
	    blocking SMALLINT NOT NULL DEFAULT 0,
	    minute VARCHAR(25) NOT NULL DEFAULT '',
	    hour VARCHAR(25) NOT NULL DEFAULT '',
	    day VARCHAR(25) NOT NULL DEFAULT '',
	    month VARCHAR(25) NOT NULL DEFAULT '',
	    dayofweek VARCHAR(25) NOT NULL DEFAULT '',
	    faildelay BIGINT,
	    customised SMALLINT NOT NULL DEFAULT 0,
	    disabled SMALLINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_tasksche_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_task_scheduled IS 'List of scheduled tasks to be run by cron.'
	;
	CREATE UNIQUE INDEX mdl_tasksche_cla_uix ON mdl_task_scheduled (classname)
	;
	CREATE TABLE mdl_task_adhoc (
	    id BIGSERIAL,
	    component VARCHAR(255) NOT NULL DEFAULT '',
	    classname VARCHAR(255) NOT NULL DEFAULT '',
	    nextruntime BIGINT NOT NULL,
	    faildelay BIGINT,
	    customdata TEXT,
	    userid BIGINT,
	    blocking SMALLINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_taskadho_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_task_adhoc IS 'List of adhoc tasks waiting to run.'
	;
	CREATE INDEX mdl_taskadho_nex_ix ON mdl_task_adhoc (nextruntime)
	;
	CREATE INDEX mdl_taskadho_use_ix ON mdl_task_adhoc (userid)
	;
	CREATE TABLE mdl_messageinbound_handlers (
	    id BIGSERIAL,
	    component VARCHAR(100) NOT NULL DEFAULT '',
	    classname VARCHAR(255) NOT NULL DEFAULT '',
	    defaultexpiration BIGINT NOT NULL DEFAULT 86400,
	    validateaddress SMALLINT NOT NULL DEFAULT 1,
	    enabled SMALLINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_messhand_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_messageinbound_handlers IS 'Inbound Message Handler definitions.'
	;
	CREATE UNIQUE INDEX mdl_messhand_cla_uix ON mdl_messageinbound_handlers (classname)
	;
	CREATE TABLE mdl_messageinbound_datakeys (
	    id BIGSERIAL,
	    handler BIGINT NOT NULL,
	    datavalue BIGINT NOT NULL,
	    datakey VARCHAR(64),
	    timecreated BIGINT NOT NULL,
	    expires BIGINT,
	CONSTRAINT mdl_messdata_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_messageinbound_datakeys IS 'Inbound Message data item secret keys.'
	;
	CREATE UNIQUE INDEX mdl_messdata_handat_uix ON mdl_messageinbound_datakeys (handler, datavalue)
	;
	CREATE INDEX mdl_messdata_han_ix ON mdl_messageinbound_datakeys (handler)
	;
	CREATE TABLE mdl_messageinbound_messagelist (
	    id BIGSERIAL,
	    messageid TEXT NOT NULL,
	    userid BIGINT NOT NULL,
	    address TEXT NOT NULL,
	    timecreated BIGINT NOT NULL,
	CONSTRAINT mdl_messmess_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_messageinbound_messagelist IS 'A list of message IDs for existing replies'
	;
	CREATE INDEX mdl_messmess_use_ix ON mdl_messageinbound_messagelist (userid)
	;
	CREATE TABLE mdl_competency (
	    id BIGSERIAL,
	    shortname VARCHAR(100),
	    description TEXT,
	    descriptionformat SMALLINT NOT NULL DEFAULT 0,
	    idnumber VARCHAR(100),
	    competencyframeworkid BIGINT NOT NULL,
	    parentid BIGINT NOT NULL DEFAULT 0,
	    path VARCHAR(255) NOT NULL DEFAULT '',
	    sortorder BIGINT NOT NULL,
	    ruletype VARCHAR(100),
	    ruleoutcome SMALLINT NOT NULL DEFAULT 0,
	    ruleconfig TEXT,
	    scaleid BIGINT,
	    scaleconfiguration TEXT,
	    timecreated BIGINT NOT NULL,
	    timemodified BIGINT NOT NULL,
	    usermodified BIGINT,
	CONSTRAINT mdl_comp_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_competency IS 'This table contains the master record of each competency in a framework'
	;
	CREATE UNIQUE INDEX mdl_comp_comidn_uix ON mdl_competency (competencyframeworkid, idnumber)
	;
	CREATE INDEX mdl_comp_rul_ix ON mdl_competency (ruleoutcome)
	;
	CREATE TABLE mdl_competency_coursecompsetting (
	    id BIGSERIAL,
	    courseid BIGINT NOT NULL,
	    pushratingstouserplans SMALLINT,
	    timecreated BIGINT NOT NULL,
	    timemodified BIGINT NOT NULL,
	    usermodified BIGINT,
	CONSTRAINT mdl_compcour_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_competency_coursecompsetting IS 'This table contains the course specific settings for competencies.'
	;
	CREATE UNIQUE INDEX mdl_compcour_cou_uix ON mdl_competency_coursecompsetting (courseid)
	;
	CREATE TABLE mdl_competency_framework (
	    id BIGSERIAL,
	    shortname VARCHAR(100),
	    contextid BIGINT NOT NULL,
	    idnumber VARCHAR(100),
	    description TEXT,
	    descriptionformat SMALLINT NOT NULL DEFAULT 0,
	    scaleid BIGINT,
	    scaleconfiguration TEXT NOT NULL,
	    visible SMALLINT NOT NULL DEFAULT 1,
	    taxonomies VARCHAR(255) NOT NULL DEFAULT '',
	    timecreated BIGINT NOT NULL,
	    timemodified BIGINT NOT NULL,
	    usermodified BIGINT,
	CONSTRAINT mdl_compfram_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_competency_framework IS 'List of competency frameworks.'
	;
	CREATE UNIQUE INDEX mdl_compfram_idn_uix ON mdl_competency_framework (idnumber)
	;
	CREATE TABLE mdl_competency_coursecomp (
	    id BIGSERIAL,
	    courseid BIGINT NOT NULL,
	    competencyid BIGINT NOT NULL,
	    ruleoutcome SMALLINT NOT NULL,
	    timecreated BIGINT NOT NULL,
	    timemodified BIGINT NOT NULL,
	    usermodified BIGINT NOT NULL,
	    sortorder BIGINT NOT NULL,
	CONSTRAINT mdl_compcour_id3_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_competency_coursecomp IS 'Link a competency to a course.'
	;
	CREATE INDEX mdl_compcour_courul_ix ON mdl_competency_coursecomp (courseid, ruleoutcome)
	;
	CREATE UNIQUE INDEX mdl_compcour_coucom_uix ON mdl_competency_coursecomp (courseid, competencyid)
	;
	CREATE INDEX mdl_compcour_cou2_ix ON mdl_competency_coursecomp (courseid)
	;
	CREATE INDEX mdl_compcour_com_ix ON mdl_competency_coursecomp (competencyid)
	;
	CREATE TABLE mdl_competency_plan (
	    id BIGSERIAL,
	    name VARCHAR(100) NOT NULL DEFAULT '',
	    description TEXT,
	    descriptionformat SMALLINT NOT NULL DEFAULT 0,
	    userid BIGINT NOT NULL,
	    templateid BIGINT,
	    origtemplateid BIGINT,
	    status SMALLINT NOT NULL,
	    duedate BIGINT DEFAULT 0,
	    reviewerid BIGINT,
	    timecreated BIGINT NOT NULL,
	    timemodified BIGINT NOT NULL DEFAULT 0,
	    usermodified BIGINT NOT NULL,
	CONSTRAINT mdl_compplan_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_competency_plan IS 'Learning plans'
	;
	CREATE INDEX mdl_compplan_usesta_ix ON mdl_competency_plan (userid, status)
	;
	CREATE INDEX mdl_compplan_tem_ix ON mdl_competency_plan (templateid)
	;
	CREATE INDEX mdl_compplan_stadue_ix ON mdl_competency_plan (status, duedate)
	;
	CREATE TABLE mdl_competency_template (
	    id BIGSERIAL,
	    shortname VARCHAR(100),
	    contextid BIGINT NOT NULL,
	    description TEXT,
	    descriptionformat SMALLINT NOT NULL DEFAULT 0,
	    visible SMALLINT NOT NULL DEFAULT 1,
	    duedate BIGINT,
	    timecreated BIGINT NOT NULL,
	    timemodified BIGINT NOT NULL,
	    usermodified BIGINT,
	CONSTRAINT mdl_comptemp_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_competency_template IS 'Learning plan templates.'
	;
	CREATE TABLE mdl_competency_templatecomp (
	    id BIGSERIAL,
	    templateid BIGINT NOT NULL,
	    competencyid BIGINT NOT NULL,
	    timecreated BIGINT NOT NULL,
	    timemodified BIGINT NOT NULL,
	    usermodified BIGINT NOT NULL,
	    sortorder BIGINT,
	CONSTRAINT mdl_comptemp_id3_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_competency_templatecomp IS 'Link a competency to a learning plan template.'
	;
	CREATE INDEX mdl_comptemp_tem_ix ON mdl_competency_templatecomp (templateid)
	;
	CREATE INDEX mdl_comptemp_com_ix ON mdl_competency_templatecomp (competencyid)
	;
	CREATE TABLE mdl_competency_templatecohort (
	    id BIGSERIAL,
	    templateid BIGINT NOT NULL,
	    cohortid BIGINT NOT NULL,
	    timecreated BIGINT NOT NULL,
	    timemodified BIGINT NOT NULL,
	    usermodified BIGINT NOT NULL,
	CONSTRAINT mdl_comptemp_id5_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_competency_templatecohort IS 'Default comment for the table, please edit me'
	;
	CREATE INDEX mdl_comptemp_tem2_ix ON mdl_competency_templatecohort (templateid)
	;
	CREATE UNIQUE INDEX mdl_comptemp_temcoh_uix ON mdl_competency_templatecohort (templateid, cohortid)
	;
	CREATE TABLE mdl_competency_relatedcomp (
	    id BIGSERIAL,
	    competencyid BIGINT NOT NULL,
	    relatedcompetencyid BIGINT NOT NULL,
	    timecreated BIGINT NOT NULL,
	    timemodified BIGINT,
	    usermodified BIGINT NOT NULL,
	CONSTRAINT mdl_comprela_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_competency_relatedcomp IS 'Related competencies'
	;
	CREATE TABLE mdl_competency_usercomp (
	    id BIGSERIAL,
	    userid BIGINT NOT NULL,
	    competencyid BIGINT NOT NULL,
	    status SMALLINT NOT NULL DEFAULT 0,
	    reviewerid BIGINT,
	    proficiency SMALLINT,
	    grade BIGINT,
	    timecreated BIGINT NOT NULL,
	    timemodified BIGINT,
	    usermodified BIGINT NOT NULL,
	CONSTRAINT mdl_compuser_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_competency_usercomp IS 'User competencies'
	;
	CREATE UNIQUE INDEX mdl_compuser_usecom_uix ON mdl_competency_usercomp (userid, competencyid)
	;
	CREATE TABLE mdl_competency_usercompcourse (
	    id BIGSERIAL,
	    userid BIGINT NOT NULL,
	    courseid BIGINT NOT NULL,
	    competencyid BIGINT NOT NULL,
	    proficiency SMALLINT,
	    grade BIGINT,
	    timecreated BIGINT NOT NULL,
	    timemodified BIGINT,
	    usermodified BIGINT NOT NULL,
	CONSTRAINT mdl_compuser_id3_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_competency_usercompcourse IS 'User competencies in a course'
	;
	CREATE UNIQUE INDEX mdl_compuser_usecoucom_uix ON mdl_competency_usercompcourse (userid, courseid, competencyid)
	;
	CREATE TABLE mdl_competency_usercompplan (
	    id BIGSERIAL,
	    userid BIGINT NOT NULL,
	    competencyid BIGINT NOT NULL,
	    planid BIGINT NOT NULL,
	    proficiency SMALLINT,
	    grade BIGINT,
	    sortorder BIGINT,
	    timecreated BIGINT NOT NULL,
	    timemodified BIGINT,
	    usermodified BIGINT NOT NULL,
	CONSTRAINT mdl_compuser_id5_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_competency_usercompplan IS 'User competencies plans'
	;
	CREATE UNIQUE INDEX mdl_compuser_usecompla_uix ON mdl_competency_usercompplan (userid, competencyid, planid)
	;
	CREATE TABLE mdl_competency_plancomp (
	    id BIGSERIAL,
	    planid BIGINT NOT NULL,
	    competencyid BIGINT NOT NULL,
	    sortorder BIGINT,
	    timecreated BIGINT NOT NULL,
	    timemodified BIGINT,
	    usermodified BIGINT NOT NULL,
	CONSTRAINT mdl_compplan_id3_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_competency_plancomp IS 'Plan competencies'
	;
	CREATE UNIQUE INDEX mdl_compplan_placom_uix ON mdl_competency_plancomp (planid, competencyid)
	;
	CREATE TABLE mdl_competency_evidence (
	    id BIGSERIAL,
	    usercompetencyid BIGINT NOT NULL,
	    contextid BIGINT NOT NULL,
	    action SMALLINT NOT NULL,
	    actionuserid BIGINT,
	    descidentifier VARCHAR(255) NOT NULL DEFAULT '',
	    desccomponent VARCHAR(255) NOT NULL DEFAULT '',
	    desca TEXT,
	    url VARCHAR(255),
	    grade BIGINT,
	    note TEXT,
	    timecreated BIGINT NOT NULL,
	    timemodified BIGINT NOT NULL,
	    usermodified BIGINT NOT NULL,
	CONSTRAINT mdl_compevid_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_competency_evidence IS 'The evidence linked to a user competency'
	;
	CREATE INDEX mdl_compevid_use_ix ON mdl_competency_evidence (usercompetencyid)
	;
	CREATE TABLE mdl_competency_userevidence (
	    id BIGSERIAL,
	    userid BIGINT NOT NULL,
	    name VARCHAR(100) NOT NULL DEFAULT '',
	    description TEXT NOT NULL,
	    descriptionformat SMALLINT NOT NULL,
	    url TEXT NOT NULL,
	    timecreated BIGINT NOT NULL,
	    timemodified BIGINT NOT NULL,
	    usermodified BIGINT NOT NULL,
	CONSTRAINT mdl_compuser_id7_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_competency_userevidence IS 'The evidence of prior learning'
	;
	CREATE INDEX mdl_compuser_use_ix ON mdl_competency_userevidence (userid)
	;
	CREATE TABLE mdl_competency_userevidencecomp (
	    id BIGSERIAL,
	    userevidenceid BIGINT NOT NULL,
	    competencyid BIGINT NOT NULL,
	    timecreated BIGINT NOT NULL,
	    timemodified BIGINT NOT NULL,
	    usermodified BIGINT NOT NULL,
	CONSTRAINT mdl_compuser_id9_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_competency_userevidencecomp IS 'Relationship between user evidence and competencies'
	;
	CREATE INDEX mdl_compuser_use2_ix ON mdl_competency_userevidencecomp (userevidenceid)
	;
	CREATE UNIQUE INDEX mdl_compuser_usecom2_uix ON mdl_competency_userevidencecomp (userevidenceid, competencyid)
	;
	CREATE TABLE mdl_competency_modulecomp (
	    id BIGSERIAL,
	    cmid BIGINT NOT NULL,
	    timecreated BIGINT NOT NULL,
	    timemodified BIGINT NOT NULL,
	    usermodified BIGINT NOT NULL,
	    sortorder BIGINT NOT NULL,
	    competencyid BIGINT NOT NULL,
	    ruleoutcome SMALLINT NOT NULL,
	CONSTRAINT mdl_compmodu_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_competency_modulecomp IS 'Link a competency to a module.'
	;
	CREATE INDEX mdl_compmodu_cmirul_ix ON mdl_competency_modulecomp (cmid, ruleoutcome)
	;
	CREATE UNIQUE INDEX mdl_compmodu_cmicom_uix ON mdl_competency_modulecomp (cmid, competencyid)
	;
	CREATE INDEX mdl_compmodu_cmi_ix ON mdl_competency_modulecomp (cmid)
	;
	CREATE INDEX mdl_compmodu_com_ix ON mdl_competency_modulecomp (competencyid)
	;
	CREATE TABLE mdl_oauth2_endpoint (
	    id BIGSERIAL,
	    timecreated BIGINT NOT NULL,
	    timemodified BIGINT NOT NULL,
	    usermodified BIGINT NOT NULL,
	    name VARCHAR(255) NOT NULL DEFAULT '',
	    url TEXT NOT NULL,
	    issuerid BIGINT NOT NULL,
	CONSTRAINT mdl_oautendp_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_oauth2_endpoint IS 'Describes the named endpoint for an oauth2 service.'
	;
	CREATE INDEX mdl_oautendp_iss_ix ON mdl_oauth2_endpoint (issuerid)
	;
	CREATE TABLE mdl_oauth2_issuer (
	    id BIGSERIAL,
	    timecreated BIGINT NOT NULL,
	    timemodified BIGINT NOT NULL,
	    usermodified BIGINT NOT NULL,
	    name VARCHAR(255) NOT NULL DEFAULT '',
	    image TEXT NOT NULL,
	    baseurl TEXT NOT NULL,
	    clientid TEXT NOT NULL,
	    clientsecret TEXT NOT NULL,
	    loginscopes TEXT NOT NULL,
	    loginscopesoffline TEXT NOT NULL,
	    loginparams TEXT NOT NULL,
	    loginparamsoffline TEXT NOT NULL,
	    alloweddomains TEXT NOT NULL,
	    scopessupported TEXT,
	    enabled SMALLINT NOT NULL DEFAULT 1,
	    showonloginpage SMALLINT NOT NULL DEFAULT 1,
	    basicauth SMALLINT NOT NULL DEFAULT 0,
	    sortorder BIGINT NOT NULL,
	    requireconfirmation SMALLINT NOT NULL DEFAULT 1,
	CONSTRAINT mdl_oautissu_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_oauth2_issuer IS 'Details for an oauth 2 connect identity issuer.'
	;
	CREATE TABLE mdl_oauth2_system_account (
	    id BIGSERIAL,
	    timecreated BIGINT NOT NULL,
	    timemodified BIGINT NOT NULL,
	    usermodified BIGINT NOT NULL,
	    issuerid BIGINT NOT NULL,
	    refreshtoken TEXT NOT NULL,
	    grantedscopes TEXT NOT NULL,
	    email TEXT,
	    username TEXT NOT NULL,
	CONSTRAINT mdl_oautsystacco_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_oauth2_system_account IS 'Stored details used to get an access token as a system user for this oauth2 service.'
	;
	CREATE UNIQUE INDEX mdl_oautsystacco_iss_uix ON mdl_oauth2_system_account (issuerid)
	;
	CREATE TABLE mdl_oauth2_user_field_mapping (
	    id BIGSERIAL,
	    timemodified BIGINT NOT NULL,
	    timecreated BIGINT NOT NULL,
	    usermodified BIGINT NOT NULL,
	    issuerid BIGINT NOT NULL,
	    externalfield VARCHAR(64) NOT NULL DEFAULT '',
	    internalfield VARCHAR(64) NOT NULL DEFAULT '',
	CONSTRAINT mdl_oautuserfielmapp_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_oauth2_user_field_mapping IS 'Mapping of oauth user fields to moodle fields.'
	;
	CREATE INDEX mdl_oautuserfielmapp_iss_ix ON mdl_oauth2_user_field_mapping (issuerid)
	;
	CREATE UNIQUE INDEX mdl_oautuserfielmapp_issin_uix ON mdl_oauth2_user_field_mapping (issuerid, internalfield)
	;
	CREATE TABLE mdl_course_completion_defaults (
	    id BIGSERIAL,
	    course BIGINT NOT NULL,
	    module BIGINT NOT NULL,
	    completion SMALLINT NOT NULL DEFAULT 0,
	    completionview SMALLINT NOT NULL DEFAULT 0,
	    completionusegrade SMALLINT NOT NULL DEFAULT 0,
	    completionexpected BIGINT NOT NULL DEFAULT 0,
	    customrules TEXT,
	CONSTRAINT mdl_courcompdefa_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_course_completion_defaults IS 'Default settings for activities completion'
	;
	CREATE UNIQUE INDEX mdl_courcompdefa_coumod_uix ON mdl_course_completion_defaults (course, module)
	;
	CREATE INDEX mdl_courcompdefa_mod_ix ON mdl_course_completion_defaults (module)
	;
	CREATE INDEX mdl_courcompdefa_cou_ix ON mdl_course_completion_defaults (course)
	;
	CREATE TABLE mdl_analytics_models (
	    id BIGSERIAL,
	    enabled SMALLINT NOT NULL DEFAULT 0,
	    trained SMALLINT NOT NULL DEFAULT 0,
	    target VARCHAR(255) NOT NULL DEFAULT '',
	    indicators TEXT NOT NULL,
	    timesplitting VARCHAR(255),
	    version BIGINT NOT NULL,
	    timecreated BIGINT,
	    timemodified BIGINT NOT NULL,
	    usermodified BIGINT NOT NULL,
	CONSTRAINT mdl_analmode_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_analytics_models IS 'Analytic models.'
	;
	CREATE INDEX mdl_analmode_enatra_ix ON mdl_analytics_models (enabled, trained)
	;
	CREATE TABLE mdl_analytics_models_log (
	    id BIGSERIAL,
	    modelid BIGINT NOT NULL,
	    version BIGINT NOT NULL,
	    target VARCHAR(255) NOT NULL DEFAULT '',
	    indicators TEXT NOT NULL,
	    timesplitting VARCHAR(255),
	    score NUMERIC(10,5) NOT NULL DEFAULT 0,
	    info TEXT,
	    dir TEXT NOT NULL,
	    timecreated BIGINT NOT NULL,
	    usermodified BIGINT NOT NULL,
	CONSTRAINT mdl_analmodelog_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_analytics_models_log IS 'Analytic models changes during evaluation.'
	;
	CREATE INDEX mdl_analmodelog_mod_ix ON mdl_analytics_models_log (modelid)
	;
	CREATE TABLE mdl_analytics_predictions (
	    id BIGSERIAL,
	    modelid BIGINT NOT NULL,
	    contextid BIGINT NOT NULL,
	    sampleid BIGINT NOT NULL,
	    rangeindex INTEGER NOT NULL,
	    prediction NUMERIC(10,2) NOT NULL,
	    predictionscore NUMERIC(10,5) NOT NULL,
	    calculations TEXT NOT NULL,
	    timecreated BIGINT NOT NULL DEFAULT 0,
	    timestart BIGINT,
	    timeend BIGINT,
	CONSTRAINT mdl_analpred_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_analytics_predictions IS 'Predictions'
	;
	CREATE INDEX mdl_analpred_modcon_ix ON mdl_analytics_predictions (modelid, contextid)
	;
	CREATE INDEX mdl_analpred_mod_ix ON mdl_analytics_predictions (modelid)
	;
	CREATE INDEX mdl_analpred_con_ix ON mdl_analytics_predictions (contextid)
	;
	CREATE TABLE mdl_analytics_train_samples (
	    id BIGSERIAL,
	    modelid BIGINT NOT NULL,
	    analysableid BIGINT NOT NULL,
	    timesplitting VARCHAR(255) NOT NULL DEFAULT '',
	    fileid BIGINT NOT NULL,
	    sampleids TEXT NOT NULL,
	    timecreated BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_analtraisamp_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_analytics_train_samples IS 'Samples used for training'
	;
	CREATE INDEX mdl_analtraisamp_modanatim_ix ON mdl_analytics_train_samples (modelid, analysableid, timesplitting)
	;
	CREATE INDEX mdl_analtraisamp_mod_ix ON mdl_analytics_train_samples (modelid)
	;
	CREATE INDEX mdl_analtraisamp_fil_ix ON mdl_analytics_train_samples (fileid)
	;
	CREATE TABLE mdl_analytics_predict_samples (
	    id BIGSERIAL,
	    modelid BIGINT NOT NULL,
	    analysableid BIGINT NOT NULL,
	    timesplitting VARCHAR(255) NOT NULL DEFAULT '',
	    rangeindex BIGINT NOT NULL,
	    sampleids TEXT NOT NULL,
	    timecreated BIGINT NOT NULL DEFAULT 0,
	    timemodified BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_analpredsamp_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_analytics_predict_samples IS 'Samples already used for predictions.'
	;
	CREATE INDEX mdl_analpredsamp_modanatimr_ix ON mdl_analytics_predict_samples (modelid, analysableid, timesplitting, rangeindex)
	;
	CREATE INDEX mdl_analpredsamp_mod_ix ON mdl_analytics_predict_samples (modelid)
	;
	CREATE TABLE mdl_analytics_used_files (
	    id BIGSERIAL,
	    modelid BIGINT NOT NULL DEFAULT 0,
	    fileid BIGINT NOT NULL DEFAULT 0,
	    action VARCHAR(50) NOT NULL DEFAULT '',
	    time BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_analusedfile_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_analytics_used_files IS 'Files that have already been used for training and prediction.'
	;
	CREATE INDEX mdl_analusedfile_modactfil_ix ON mdl_analytics_used_files (modelid, action, fileid)
	;
	CREATE INDEX mdl_analusedfile_mod_ix ON mdl_analytics_used_files (modelid)
	;
	CREATE INDEX mdl_analusedfile_fil_ix ON mdl_analytics_used_files (fileid)
	;
	CREATE TABLE mdl_analytics_indicator_calc (
	    id BIGSERIAL,
	    starttime BIGINT NOT NULL,
	    endtime BIGINT NOT NULL,
	    contextid BIGINT NOT NULL,
	    sampleorigin VARCHAR(255) NOT NULL DEFAULT '',
	    sampleid BIGINT NOT NULL,
	    indicator VARCHAR(255) NOT NULL DEFAULT '',
	    value NUMERIC(10,2),
	    timecreated BIGINT NOT NULL,
	CONSTRAINT mdl_analindicalc_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_analytics_indicator_calc IS 'Stored indicator calculations'
	;
	CREATE INDEX mdl_analindicalc_staendcon_ix ON mdl_analytics_indicator_calc (starttime, endtime, contextid)
	;
	CREATE INDEX mdl_analindicalc_con_ix ON mdl_analytics_indicator_calc (contextid)
	;
	CREATE TABLE mdl_analytics_prediction_actions (
	    id BIGSERIAL,
	    predictionid BIGINT NOT NULL,
	    userid BIGINT NOT NULL,
	    actionname VARCHAR(255) NOT NULL DEFAULT '',
	    timecreated BIGINT NOT NULL,
	CONSTRAINT mdl_analpredacti_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_analytics_prediction_actions IS 'Register of user actions over predictions.'
	;
	CREATE INDEX mdl_analpredacti_preuseact_ix ON mdl_analytics_prediction_actions (predictionid, userid, actionname)
	;
	CREATE INDEX mdl_analpredacti_pre_ix ON mdl_analytics_prediction_actions (predictionid)
	;
	CREATE INDEX mdl_analpredacti_use_ix ON mdl_analytics_prediction_actions (userid)
	;
	CREATE TABLE mdl_analytics_used_analysables (
	    id BIGSERIAL,
	    modelid BIGINT NOT NULL,
	    action VARCHAR(50) NOT NULL DEFAULT '',
	    analysableid BIGINT NOT NULL,
	    timeanalysed BIGINT NOT NULL,
	CONSTRAINT mdl_analusedanal_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_analytics_used_analysables IS 'List of analysables used by each model'
	;
	CREATE INDEX mdl_analusedanal_modact_ix ON mdl_analytics_used_analysables (modelid, action)
	;
	CREATE INDEX mdl_analusedanal_mod_ix ON mdl_analytics_used_analysables (modelid)
	;
	CREATE TABLE mdl_search_index_requests (
	    id BIGSERIAL,
	    contextid BIGINT NOT NULL,
	    searcharea VARCHAR(255) NOT NULL DEFAULT '',
	    timerequested BIGINT NOT NULL,
	    partialarea VARCHAR(255) NOT NULL DEFAULT '',
	    partialtime BIGINT NOT NULL,
	    indexpriority BIGINT NOT NULL,
	CONSTRAINT mdl_searinderequ_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_search_index_requests IS 'Records requests for (re)indexing of specific contexts. Entries will be removed from this table when indexing of that context is complete. (This table is not used for normal time-based indexing of new content.)'
	;
	CREATE INDEX mdl_searinderequ_indtim_ix ON mdl_search_index_requests (indexpriority, timerequested)
	;
	CREATE INDEX mdl_searinderequ_con_ix ON mdl_search_index_requests (contextid)
	; COMMIT
LOG:  DDL LOCK TRACE: acquiring in mode <write_lock> (upgrading from <ddl_lock>) for (bdr (6678401888864649257,1,16384,)) [tracelevel=statement]
STATEMENT:  BEGIN ISOLATION LEVEL SERIALIZABLE;
	CREATE TABLE mdl_config (
	    id BIGSERIAL,
	    name VARCHAR(255) NOT NULL DEFAULT '',
	    value TEXT NOT NULL,
	CONSTRAINT mdl_conf_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_config IS 'Moodle configuration variables'
	;
	CREATE UNIQUE INDEX mdl_conf_nam_uix ON mdl_config (name)
	;
	CREATE TABLE mdl_config_plugins (
	    id BIGSERIAL,
	    plugin VARCHAR(100) NOT NULL DEFAULT 'core',
	    name VARCHAR(100) NOT NULL DEFAULT '',
	    value TEXT NOT NULL,
	CONSTRAINT mdl_confplug_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_config_plugins IS 'Moodle modules and plugins configuration variables'
	;
	CREATE UNIQUE INDEX mdl_confplug_plunam_uix ON mdl_config_plugins (plugin, name)
	;
	CREATE TABLE mdl_config_log (
	    id BIGSERIAL,
	    userid BIGINT NOT NULL,
	    timemodified BIGINT NOT NULL,
	    plugin VARCHAR(100),
	    name VARCHAR(100) NOT NULL DEFAULT '',
	    value TEXT,
	    oldvalue TEXT,
	CONSTRAINT mdl_conflog_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_config_log IS 'Changes done in server configuration through admin UI'
	;
	CREATE INDEX mdl_conflog_tim_ix ON mdl_config_log (timemodified)
	;
	CREATE INDEX mdl_conflog_use_ix ON mdl_config_log (userid)
	;
	CREATE TABLE mdl_upgrade_log (
	    id BIGSERIAL,
	    type BIGINT NOT NULL,
	    plugin VARCHAR(100),
	    version VARCHAR(100),
	    targetversion VARCHAR(100),
	    info VARCHAR(255) NOT NULL DEFAULT '',
	    details TEXT,
	    backtrace TEXT,
	    userid BIGINT NOT NULL,
	    timemodified BIGINT NOT NULL,
	CONSTRAINT mdl_upgrlog_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_upgrade_log IS 'Upgrade logging'
	;
	CREATE INDEX mdl_upgrlog_tim_ix ON mdl_upgrade_log (timemodified)
	;
	CREATE INDEX mdl_upgrlog_typtim_ix ON mdl_upgrade_log (type, timemodified)
	;
	CREATE INDEX mdl_upgrlog_use_ix ON mdl_upgrade_log (userid)
	;
	CREATE TABLE mdl_course (
	    id BIGSERIAL,
	    category BIGINT NOT NULL DEFAULT 0,
	    sortorder BIGINT NOT NULL DEFAULT 0,
	    fullname VARCHAR(254) NOT NULL DEFAULT '',
	    shortname VARCHAR(255) NOT NULL DEFAULT '',
	    idnumber VARCHAR(100) NOT NULL DEFAULT '',
	    summary TEXT,
	    summaryformat SMALLINT NOT NULL DEFAULT 0,
	    format VARCHAR(21) NOT NULL DEFAULT 'topics',
	    showgrades SMALLINT NOT NULL DEFAULT 1,
	    newsitems INTEGER NOT NULL DEFAULT 1,
	    startdate BIGINT NOT NULL DEFAULT 0,
	    enddate BIGINT NOT NULL DEFAULT 0,
	    marker BIGINT NOT NULL DEFAULT 0,
	    maxbytes BIGINT NOT NULL DEFAULT 0,
	    legacyfiles SMALLINT NOT NULL DEFAULT 0,
	    showreports SMALLINT NOT NULL DEFAULT 0,
	    visible SMALLINT NOT NULL DEFAULT 1,
	    visibleold SMALLINT NOT NULL DEFAULT 1,
	    groupmode SMALLINT NOT NULL DEFAULT 0,
	    groupmodeforce SMALLINT NOT NULL DEFAULT 0,
	    defaultgroupingid BIGINT NOT NULL DEFAULT 0,
	    lang VARCHAR(30) NOT NULL DEFAULT '',
	    calendartype VARCHAR(30) NOT NULL DEFAULT '',
	    theme VARCHAR(50) NOT NULL DEFAULT '',
	    timecreated BIGINT NOT NULL DEFAULT 0,
	    timemodified BIGINT NOT NULL DEFAULT 0,
	    requested SMALLINT NOT NULL DEFAULT 0,
	    enablecompletion SMALLINT NOT NULL DEFAULT 0,
	    completionnotify SMALLINT NOT NULL DEFAULT 0,
	    cacherev BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_cour_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_course IS 'Central course table'
	;
	CREATE INDEX mdl_cour_cat_ix ON mdl_course (category)
	;
	CREATE INDEX mdl_cour_idn_ix ON mdl_course (idnumber)
	;
	CREATE INDEX mdl_cour_sho_ix ON mdl_course (shortname)
	;
	CREATE INDEX mdl_cour_sor_ix ON mdl_course (sortorder)
	;
	CREATE TABLE mdl_course_categories (
	    id BIGSERIAL,
	    name VARCHAR(255) NOT NULL DEFAULT '',
	    idnumber VARCHAR(100),
	    description TEXT,
	    descriptionformat SMALLINT NOT NULL DEFAULT 0,
	    parent BIGINT NOT NULL DEFAULT 0,
	    sortorder BIGINT NOT NULL DEFAULT 0,
	    coursecount BIGINT NOT NULL DEFAULT 0,
	    visible SMALLINT NOT NULL DEFAULT 1,
	    visibleold SMALLINT NOT NULL DEFAULT 1,
	    timemodified BIGINT NOT NULL DEFAULT 0,
	    depth BIGINT NOT NULL DEFAULT 0,
	    path VARCHAR(255) NOT NULL DEFAULT '',
	    theme VARCHAR(50),
	CONSTRAINT mdl_courcate_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_course_categories IS 'Course categories'
	;
	CREATE INDEX mdl_courcate_par_ix ON mdl_course_categories (parent)
	;
	CREATE TABLE mdl_course_completion_aggr_methd (
	    id BIGSERIAL,
	    course BIGINT NOT NULL DEFAULT 0,
	    criteriatype BIGINT,
	    method SMALLINT NOT NULL DEFAULT 0,
	    value NUMERIC(10,5),
	CONSTRAINT mdl_courcompaggrmeth_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_course_completion_aggr_methd IS 'Course completion aggregation methods for criteria'
	;
	CREATE INDEX mdl_courcompaggrmeth_cou_ix ON mdl_course_completion_aggr_methd (course)
	;
	CREATE INDEX mdl_courcompaggrmeth_cri_ix ON mdl_course_completion_aggr_methd (criteriatype)
	;
	CREATE UNIQUE INDEX mdl_courcompaggrmeth_coucr_uix ON mdl_course_completion_aggr_methd (course, criteriatype)
	;
	CREATE TABLE mdl_course_completion_criteria (
	    id BIGSERIAL,
	    course BIGINT NOT NULL DEFAULT 0,
	    criteriatype BIGINT NOT NULL DEFAULT 0,
	    module VARCHAR(100),
	    moduleinstance BIGINT,
	    courseinstance BIGINT,
	    enrolperiod BIGINT,
	    timeend BIGINT,
	    gradepass NUMERIC(10,5),
	    role BIGINT,
	CONSTRAINT mdl_courcompcrit_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_course_completion_criteria IS 'Course completion criteria'
	;
	CREATE INDEX mdl_courcompcrit_cou_ix ON mdl_course_completion_criteria (course)
	;
	CREATE TABLE mdl_course_completion_crit_compl (
	    id BIGSERIAL,
	    userid BIGINT NOT NULL DEFAULT 0,
	    course BIGINT NOT NULL DEFAULT 0,
	    criteriaid BIGINT NOT NULL DEFAULT 0,
	    gradefinal NUMERIC(10,5),
	    unenroled BIGINT,
	    timecompleted BIGINT,
	CONSTRAINT mdl_courcompcritcomp_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_course_completion_crit_compl IS 'Course completion user records'
	;
	CREATE INDEX mdl_courcompcritcomp_use_ix ON mdl_course_completion_crit_compl (userid)
	;
	CREATE INDEX mdl_courcompcritcomp_cou_ix ON mdl_course_completion_crit_compl (course)
	;
	CREATE INDEX mdl_courcompcritcomp_cri_ix ON mdl_course_completion_crit_compl (criteriaid)
	;
	CREATE INDEX mdl_courcompcritcomp_tim_ix ON mdl_course_completion_crit_compl (timecompleted)
	;
	CREATE UNIQUE INDEX mdl_courcompcritcomp_useco_uix ON mdl_course_completion_crit_compl (userid, course, criteriaid)
	;
	CREATE TABLE mdl_course_completions (
	    id BIGSERIAL,
	    userid BIGINT NOT NULL DEFAULT 0,
	    course BIGINT NOT NULL DEFAULT 0,
	    timeenrolled BIGINT NOT NULL DEFAULT 0,
	    timestarted BIGINT NOT NULL DEFAULT 0,
	    timecompleted BIGINT,
	    reaggregate BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_courcomp_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_course_completions IS 'Course completion records'
	;
	CREATE INDEX mdl_courcomp_use_ix ON mdl_course_completions (userid)
	;
	CREATE INDEX mdl_courcomp_cou_ix ON mdl_course_completions (course)
	;
	CREATE INDEX mdl_courcomp_tim_ix ON mdl_course_completions (timecompleted)
	;
	CREATE UNIQUE INDEX mdl_courcomp_usecou_uix ON mdl_course_completions (userid, course)
	;
	CREATE TABLE mdl_enrol (
	    id BIGSERIAL,
	    enrol VARCHAR(20) NOT NULL DEFAULT '',
	    status BIGINT NOT NULL DEFAULT 0,
	    courseid BIGINT NOT NULL,
	    sortorder BIGINT NOT NULL DEFAULT 0,
	    name VARCHAR(255),
	    enrolperiod BIGINT DEFAULT 0,
	    enrolstartdate BIGINT DEFAULT 0,
	    enrolenddate BIGINT DEFAULT 0,
	    expirynotify SMALLINT DEFAULT 0,
	    expirythreshold BIGINT DEFAULT 0,
	    notifyall SMALLINT DEFAULT 0,
	    password VARCHAR(50),
	    cost VARCHAR(20),
	    currency VARCHAR(3),
	    roleid BIGINT DEFAULT 0,
	    customint1 BIGINT,
	    customint2 BIGINT,
	    customint3 BIGINT,
	    customint4 BIGINT,
	    customint5 BIGINT,
	    customint6 BIGINT,
	    customint7 BIGINT,
	    customint8 BIGINT,
	    customchar1 VARCHAR(255),
	    customchar2 VARCHAR(255),
	    customchar3 VARCHAR(1333),
	    customdec1 NUMERIC(12,7),
	    customdec2 NUMERIC(12,7),
	    customtext1 TEXT,
	    customtext2 TEXT,
	    customtext3 TEXT,
	    customtext4 TEXT,
	    timecreated BIGINT NOT NULL DEFAULT 0,
	    timemodified BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_enro_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_enrol IS 'Instances of enrolment plugins used in courses, fields marked as custom have a plugin defined meaning, core does not touch them. Create a new linked table if you need even more custom fields.'
	;
	CREATE INDEX mdl_enro_enr_ix ON mdl_enrol (enrol)
	;
	CREATE INDEX mdl_enro_cou_ix ON mdl_enrol (courseid)
	;
	CREATE TABLE mdl_user_enrolments (
	    id BIGSERIAL,
	    status BIGINT NOT NULL DEFAULT 0,
	    enrolid BIGINT NOT NULL,
	    userid BIGINT NOT NULL,
	    timestart BIGINT NOT NULL DEFAULT 0,
	    timeend BIGINT NOT NULL DEFAULT 2147483647,
	    modifierid BIGINT NOT NULL DEFAULT 0,
	    timecreated BIGINT NOT NULL DEFAULT 0,
	    timemodified BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_userenro_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_user_enrolments IS 'Users participating in courses (aka enrolled users) - everybody who is participating/visible in course, that means both teachers and students'
	;
	CREATE UNIQUE INDEX mdl_userenro_enruse_uix ON mdl_user_enrolments (enrolid, userid)
	;
	CREATE INDEX mdl_userenro_enr_ix ON mdl_user_enrolments (enrolid)
	;
	CREATE INDEX mdl_userenro_use_ix ON mdl_user_enrolments (userid)
	;
	CREATE INDEX mdl_userenro_mod_ix ON mdl_user_enrolments (modifierid)
	;
	CREATE TABLE mdl_course_modules (
	    id BIGSERIAL,
	    course BIGINT NOT NULL DEFAULT 0,
	    module BIGINT NOT NULL DEFAULT 0,
	    instance BIGINT NOT NULL DEFAULT 0,
	    section BIGINT NOT NULL DEFAULT 0,
	    idnumber VARCHAR(100),
	    added BIGINT NOT NULL DEFAULT 0,
	    score SMALLINT NOT NULL DEFAULT 0,
	    indent INTEGER NOT NULL DEFAULT 0,
	    visible SMALLINT NOT NULL DEFAULT 1,
	    visibleoncoursepage SMALLINT NOT NULL DEFAULT 1,
	    visibleold SMALLINT NOT NULL DEFAULT 1,
	    groupmode SMALLINT NOT NULL DEFAULT 0,
	    groupingid BIGINT NOT NULL DEFAULT 0,
	    completion SMALLINT NOT NULL DEFAULT 0,
	    completiongradeitemnumber BIGINT,
	    completionview SMALLINT NOT NULL DEFAULT 0,
	    completionexpected BIGINT NOT NULL DEFAULT 0,
	    showdescription SMALLINT NOT NULL DEFAULT 0,
	    availability TEXT,
	    deletioninprogress SMALLINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_courmodu_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_course_modules IS 'course_modules table retrofitted from MySQL'
	;
	CREATE INDEX mdl_courmodu_vis_ix ON mdl_course_modules (visible)
	;
	CREATE INDEX mdl_courmodu_cou_ix ON mdl_course_modules (course)
	;
	CREATE INDEX mdl_courmodu_mod_ix ON mdl_course_modules (module)
	;
	CREATE INDEX mdl_courmodu_ins_ix ON mdl_course_modules (instance)
	;
	CREATE INDEX mdl_courmodu_idncou_ix ON mdl_course_modules (idnumber, course)
	;
	CREATE INDEX mdl_courmodu_gro_ix ON mdl_course_modules (groupingid)
	;
	CREATE TABLE mdl_course_modules_completion (
	    id BIGSERIAL,
	    coursemoduleid BIGINT NOT NULL,
	    userid BIGINT NOT NULL,
	    completionstate SMALLINT NOT NULL,
	    viewed SMALLINT,
	    overrideby BIGINT,
	    timemodified BIGINT NOT NULL,
	CONSTRAINT mdl_courmoducomp_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_course_modules_completion IS 'Stores the completion state (completed or not completed, etc) of each user on each activity.'
	;
	CREATE INDEX mdl_courmoducomp_cou_ix ON mdl_course_modules_completion (coursemoduleid)
	;
	CREATE UNIQUE INDEX mdl_courmoducomp_usecou_uix ON mdl_course_modules_completion (userid, coursemoduleid)
	;
	CREATE TABLE mdl_course_sections (
	    id BIGSERIAL,
	    course BIGINT NOT NULL DEFAULT 0,
	    section BIGINT NOT NULL DEFAULT 0,
	    name VARCHAR(255),
	    summary TEXT,
	    summaryformat SMALLINT NOT NULL DEFAULT 0,
	    sequence TEXT,
	    visible SMALLINT NOT NULL DEFAULT 1,
	    availability TEXT,
	    timemodified BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_coursect_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_course_sections IS 'to define the sections for each course'
	;
	CREATE UNIQUE INDEX mdl_coursect_cousec_uix ON mdl_course_sections (course, section)
	;
	CREATE TABLE mdl_course_request (
	    id BIGSERIAL,
	    fullname VARCHAR(254) NOT NULL DEFAULT '',
	    shortname VARCHAR(100) NOT NULL DEFAULT '',
	    summary TEXT NOT NULL,
	    summaryformat SMALLINT NOT NULL DEFAULT 0,
	    category BIGINT NOT NULL DEFAULT 0,
	    reason TEXT NOT NULL,
	    requester BIGINT NOT NULL DEFAULT 0,
	    password VARCHAR(50) NOT NULL DEFAULT '',
	CONSTRAINT mdl_courrequ_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_course_request IS 'course requests'
	;
	CREATE INDEX mdl_courrequ_sho_ix ON mdl_course_request (shortname)
	;
	CREATE TABLE mdl_course_format_options (
	    id BIGSERIAL,
	    courseid BIGINT NOT NULL,
	    format VARCHAR(21) NOT NULL DEFAULT '',
	    sectionid BIGINT NOT NULL DEFAULT 0,
	    name VARCHAR(100) NOT NULL DEFAULT '',
	    value TEXT,
	CONSTRAINT mdl_courformopti_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_course_format_options IS 'Stores format-specific options for the course or course section'
	;
	CREATE UNIQUE INDEX mdl_courformopti_couforsec_uix ON mdl_course_format_options (courseid, format, sectionid, name)
	;
	CREATE INDEX mdl_courformopti_cou_ix ON mdl_course_format_options (courseid)
	;
	CREATE TABLE mdl_filter_active (
	    id BIGSERIAL,
	    filter VARCHAR(32) NOT NULL DEFAULT '',
	    contextid BIGINT NOT NULL,
	    active SMALLINT NOT NULL,
	    sortorder BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_filtacti_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_filter_active IS 'Stores information about which filters are active in which contexts. Also the filter sort order. See get_active_filters in lib/filterlib.php for how this data is used.'
	;
	CREATE UNIQUE INDEX mdl_filtacti_confil_uix ON mdl_filter_active (contextid, filter)
	;
	CREATE INDEX mdl_filtacti_con_ix ON mdl_filter_active (contextid)
	;
	CREATE TABLE mdl_filter_config (
	    id BIGSERIAL,
	    filter VARCHAR(32) NOT NULL DEFAULT '',
	    contextid BIGINT NOT NULL,
	    name VARCHAR(255) NOT NULL DEFAULT '',
	    value TEXT,
	CONSTRAINT mdl_filtconf_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_filter_config IS 'Stores per-context configuration settings for filters which have them.'
	;
	CREATE UNIQUE INDEX mdl_filtconf_confilnam_uix ON mdl_filter_config (contextid, filter, name)
	;
	CREATE INDEX mdl_filtconf_con_ix ON mdl_filter_config (contextid)
	;
	CREATE TABLE mdl_event (
	    id BIGSERIAL,
	    name TEXT NOT NULL,
	    description TEXT NOT NULL,
	    format SMALLINT NOT NULL DEFAULT 0,
	    categoryid BIGINT NOT NULL DEFAULT 0,
	    courseid BIGINT NOT NULL DEFAULT 0,
	    groupid BIGINT NOT NULL DEFAULT 0,
	    userid BIGINT NOT NULL DEFAULT 0,
	    repeatid BIGINT NOT NULL DEFAULT 0,
	    modulename VARCHAR(20) NOT NULL DEFAULT '',
	    instance BIGINT NOT NULL DEFAULT 0,
	    type SMALLINT NOT NULL DEFAULT 0,
	    eventtype VARCHAR(20) NOT NULL DEFAULT '',
	    timestart BIGINT NOT NULL DEFAULT 0,
	    timeduration BIGINT NOT NULL DEFAULT 0,
	    timesort BIGINT,
	    visible SMALLINT NOT NULL DEFAULT 1,
	    uuid VARCHAR(255) NOT NULL DEFAULT '',
	    sequence BIGINT NOT NULL DEFAULT 1,
	    timemodified BIGINT NOT NULL DEFAULT 0,
	    subscriptionid BIGINT,
	    priority BIGINT,
	CONSTRAINT mdl_even_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_event IS 'For everything with a time associated to it'
	;
	CREATE INDEX mdl_even_cou_ix ON mdl_event (courseid)
	;
	CREATE INDEX mdl_even_use_ix ON mdl_event (userid)
	;
	CREATE INDEX mdl_even_tim_ix ON mdl_event (timestart)
	;
	CREATE INDEX mdl_even_tim2_ix ON mdl_event (timeduration)
	;
	CREATE INDEX mdl_even_uui_ix ON mdl_event (uuid)
	;
	CREATE INDEX mdl_even_typtim_ix ON mdl_event (type, timesort)
	;
	CREATE INDEX mdl_even_grocoucatvisuse_ix ON mdl_event (groupid, courseid, categoryid, visible, userid)
	;
	CREATE INDEX mdl_even_cat_ix ON mdl_event (categoryid)
	;
	CREATE INDEX mdl_even_sub_ix ON mdl_event (subscriptionid)
	;
	CREATE TABLE mdl_cache_filters (
	    id BIGSERIAL,
	    filter VARCHAR(32) NOT NULL DEFAULT '',
	    version BIGINT NOT NULL DEFAULT 0,
	    md5key VARCHAR(32) NOT NULL DEFAULT '',
	    rawtext TEXT NOT NULL,
	    timemodified BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_cachfilt_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_cache_filters IS 'For keeping information about cached data'
	;
	CREATE INDEX mdl_cachfilt_filmd5_ix ON mdl_cache_filters (filter, md5key)
	;
	CREATE TABLE mdl_log (
	    id BIGSERIAL,
	    time BIGINT NOT NULL DEFAULT 0,
	    userid BIGINT NOT NULL DEFAULT 0,
	    ip VARCHAR(45) NOT NULL DEFAULT '',
	    course BIGINT NOT NULL DEFAULT 0,
	    module VARCHAR(20) NOT NULL DEFAULT '',
	    cmid BIGINT NOT NULL DEFAULT 0,
	    action VARCHAR(40) NOT NULL DEFAULT '',
	    url VARCHAR(100) NOT NULL DEFAULT '',
	    info VARCHAR(255) NOT NULL DEFAULT '',
	CONSTRAINT mdl_log_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_log IS 'Every action is logged as far as possible'
	;
	CREATE INDEX mdl_log_coumodact_ix ON mdl_log (course, module, action)
	;
	CREATE INDEX mdl_log_tim_ix ON mdl_log (time)
	;
	CREATE INDEX mdl_log_act_ix ON mdl_log (action)
	;
	CREATE INDEX mdl_log_usecou_ix ON mdl_log (userid, course)
	;
	CREATE INDEX mdl_log_cmi_ix ON mdl_log (cmid)
	;
	CREATE TABLE mdl_log_queries (
	    id BIGSERIAL,
	    qtype INTEGER NOT NULL,
	    sqltext TEXT NOT NULL,
	    sqlparams TEXT,
	    error INTEGER NOT NULL DEFAULT 0,
	    info TEXT,
	    backtrace TEXT,
	    exectime NUMERIC(10,5) NOT NULL,
	    timelogged BIGINT NOT NULL,
	CONSTRAINT mdl_logquer_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_log_queries IS 'Logged database queries.'
	;
	CREATE TABLE mdl_log_display (
	    id BIGSERIAL,
	    module VARCHAR(20) NOT NULL DEFAULT '',
	    action VARCHAR(40) NOT NULL DEFAULT '',
	    mtable VARCHAR(30) NOT NULL DEFAULT '',
	    field VARCHAR(200) NOT NULL DEFAULT '',
	    component VARCHAR(100) NOT NULL DEFAULT '',
	CONSTRAINT mdl_logdisp_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_log_display IS 'For a particular module/action, specifies a moodle table/field'
	;
	CREATE UNIQUE INDEX mdl_logdisp_modact_uix ON mdl_log_display (module, action)
	;
	CREATE TABLE mdl_message (
	    id BIGSERIAL,
	    useridfrom BIGINT NOT NULL DEFAULT 0,
	    useridto BIGINT NOT NULL DEFAULT 0,
	    subject TEXT,
	    fullmessage TEXT,
	    fullmessageformat SMALLINT DEFAULT 0,
	    fullmessagehtml TEXT,
	    smallmessage TEXT,
	    notification SMALLINT DEFAULT 0,
	    contexturl TEXT,
	    contexturlname TEXT,
	    timecreated BIGINT NOT NULL DEFAULT 0,
	    timeuserfromdeleted BIGINT NOT NULL DEFAULT 0,
	    timeusertodeleted BIGINT NOT NULL DEFAULT 0,
	    component VARCHAR(100),
	    eventtype VARCHAR(100),
	CONSTRAINT mdl_mess_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_message IS 'Stores all unread messages'
	;
	CREATE INDEX mdl_mess_useusetimtim_ix ON mdl_message (useridfrom, useridto, timeuserfromdeleted, timeusertodeleted)
	;
	CREATE INDEX mdl_mess_usetimnot_ix ON mdl_message (useridfrom, timeuserfromdeleted, notification)
	;
	CREATE INDEX mdl_mess_usetimnot2_ix ON mdl_message (useridto, timeusertodeleted, notification)
	;
	CREATE TABLE mdl_message_read (
	    id BIGSERIAL,
	    useridfrom BIGINT NOT NULL DEFAULT 0,
	    useridto BIGINT NOT NULL DEFAULT 0,
	    subject TEXT,
	    fullmessage TEXT,
	    fullmessageformat SMALLINT DEFAULT 0,
	    fullmessagehtml TEXT,
	    smallmessage TEXT,
	    notification SMALLINT DEFAULT 0,
	    contexturl TEXT,
	    contexturlname TEXT,
	    timecreated BIGINT NOT NULL DEFAULT 0,
	    timeread BIGINT NOT NULL DEFAULT 0,
	    timeuserfromdeleted BIGINT NOT NULL DEFAULT 0,
	    timeusertodeleted BIGINT NOT NULL DEFAULT 0,
	    component VARCHAR(100),
	    eventtype VARCHAR(100),
	CONSTRAINT mdl_messread_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_message_read IS 'Stores all messages that have been read'
	;
	CREATE INDEX mdl_messread_useusetimtim_ix ON mdl_message_read (useridfrom, useridto, timeuserfromdeleted, timeusertodeleted)
	;
	CREATE INDEX mdl_messread_nottim_ix ON mdl_message_read (notification, timeread)
	;
	CREATE INDEX mdl_messread_usetimnot_ix ON mdl_message_read (useridfrom, timeuserfromdeleted, notification)
	;
	CREATE INDEX mdl_messread_usetimnot2_ix ON mdl_message_read (useridto, timeusertodeleted, notification)
	;
	CREATE TABLE mdl_messages (
	    id BIGSERIAL,
	    useridfrom BIGINT NOT NULL,
	    conversationid BIGINT NOT NULL,
	    subject TEXT,
	    fullmessage TEXT,
	    fullmessageformat SMALLINT NOT NULL DEFAULT 0,
	    fullmessagehtml TEXT,
	    smallmessage TEXT,
	    timecreated BIGINT NOT NULL,
	CONSTRAINT mdl_mess_id3_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_messages IS 'Stores all messages'
	;
	CREATE INDEX mdl_mess_contim_ix ON mdl_messages (conversationid, timecreated)
	;
	CREATE INDEX mdl_mess_use_ix ON mdl_messages (useridfrom)
	;
	CREATE INDEX mdl_mess_con_ix ON mdl_messages (conversationid)
	;
	CREATE TABLE mdl_message_conversations (
	    id BIGSERIAL,
	    convhash VARCHAR(40) NOT NULL DEFAULT '',
	    timecreated BIGINT NOT NULL,
	CONSTRAINT mdl_messconv_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_message_conversations IS 'Stores all message conversations'
	;
	CREATE UNIQUE INDEX mdl_messconv_con_uix ON mdl_message_conversations (convhash)
	;
	CREATE TABLE mdl_message_conversation_members (
	    id BIGSERIAL,
	    conversationid BIGINT NOT NULL,
	    userid BIGINT NOT NULL,
	    timecreated BIGINT NOT NULL,
	CONSTRAINT mdl_messconvmemb_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_message_conversation_members IS 'Stores all members in a conversations'
	;
	CREATE INDEX mdl_messconvmemb_con_ix ON mdl_message_conversation_members (conversationid)
	;
	CREATE INDEX mdl_messconvmemb_use_ix ON mdl_message_conversation_members (userid)
	;
	CREATE TABLE mdl_message_user_actions (
	    id BIGSERIAL,
	    userid BIGINT NOT NULL,
	    messageid BIGINT NOT NULL,
	    action BIGINT NOT NULL,
	    timecreated BIGINT NOT NULL,
	CONSTRAINT mdl_messuseracti_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_message_user_actions IS 'Stores all per-user actions on individual messages'
	;
	CREATE UNIQUE INDEX mdl_messuseracti_usemesact_uix ON mdl_message_user_actions (userid, messageid, action)
	;
	CREATE INDEX mdl_messuseracti_use_ix ON mdl_message_user_actions (userid)
	;
	CREATE INDEX mdl_messuseracti_mes_ix ON mdl_message_user_actions (messageid)
	;
	CREATE TABLE mdl_notifications (
	    id BIGSERIAL,
	    useridfrom BIGINT NOT NULL,
	    useridto BIGINT NOT NULL,
	    subject TEXT,
	    fullmessage TEXT,
	    fullmessageformat SMALLINT NOT NULL DEFAULT 0,
	    fullmessagehtml TEXT,
	    smallmessage TEXT,
	    component VARCHAR(100),
	    eventtype VARCHAR(100),
	    contexturl TEXT,
	    contexturlname TEXT,
	    timeread BIGINT,
	    timecreated BIGINT NOT NULL,
	CONSTRAINT mdl_noti_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_notifications IS 'Stores all notifications'
	;
	CREATE INDEX mdl_noti_use_ix ON mdl_notifications (useridfrom)
	;
	CREATE INDEX mdl_noti_use2_ix ON mdl_notifications (useridto)
	;
	CREATE TABLE mdl_message_contacts (
	    id BIGSERIAL,
	    userid BIGINT NOT NULL DEFAULT 0,
	    contactid BIGINT NOT NULL DEFAULT 0,
	    blocked SMALLINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_messcont_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_message_contacts IS 'Maintains lists of relationships between users'
	;
	CREATE UNIQUE INDEX mdl_messcont_usecon_uix ON mdl_message_contacts (userid, contactid)
	;
	CREATE TABLE mdl_modules (
	    id BIGSERIAL,
	    name VARCHAR(20) NOT NULL DEFAULT '',
	    cron BIGINT NOT NULL DEFAULT 0,
	    lastcron BIGINT NOT NULL DEFAULT 0,
	    search VARCHAR(255) NOT NULL DEFAULT '',
	    visible SMALLINT NOT NULL DEFAULT 1,
	CONSTRAINT mdl_modu_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_modules IS 'modules available in the site'
	;
	CREATE INDEX mdl_modu_nam_ix ON mdl_modules (name)
	;
	CREATE TABLE mdl_my_pages (
	    id BIGSERIAL,
	    userid BIGINT DEFAULT 0,
	    name VARCHAR(200) NOT NULL DEFAULT '',
	    private SMALLINT NOT NULL DEFAULT 1,
	    sortorder INTEGER NOT NULL DEFAULT 0,
	CONSTRAINT mdl_mypage_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_my_pages IS 'Extra user pages for the My Moodle system'
	;
	CREATE INDEX mdl_mypage_usepri_ix ON mdl_my_pages (userid, private)
	;
	CREATE TABLE mdl_sessions (
	    id BIGSERIAL,
	    state BIGINT NOT NULL DEFAULT 0,
	    sid VARCHAR(128) NOT NULL DEFAULT '',
	    userid BIGINT NOT NULL,
	    sessdata TEXT,
	    timecreated BIGINT NOT NULL,
	    timemodified BIGINT NOT NULL,
	    firstip VARCHAR(45),
	    lastip VARCHAR(45),
	CONSTRAINT mdl_sess_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_sessions IS 'Database based session storage - now recommended'
	;
	CREATE INDEX mdl_sess_sta_ix ON mdl_sessions (state)
	;
	CREATE UNIQUE INDEX mdl_sess_sid_uix ON mdl_sessions (sid)
	;
	CREATE INDEX mdl_sess_tim_ix ON mdl_sessions (timecreated)
	;
	CREATE INDEX mdl_sess_tim2_ix ON mdl_sessions (timemodified)
	;
	CREATE INDEX mdl_sess_use_ix ON mdl_sessions (userid)
	;
	CREATE TABLE mdl_user (
	    id BIGSERIAL,
	    auth VARCHAR(20) NOT NULL DEFAULT 'manual',
	    confirmed SMALLINT NOT NULL DEFAULT 0,
	    policyagreed SMALLINT NOT NULL DEFAULT 0,
	    deleted SMALLINT NOT NULL DEFAULT 0,
	    suspended SMALLINT NOT NULL DEFAULT 0,
	    mnethostid BIGINT NOT NULL DEFAULT 0,
	    username VARCHAR(100) NOT NULL DEFAULT '',
	    password VARCHAR(255) NOT NULL DEFAULT '',
	    idnumber VARCHAR(255) NOT NULL DEFAULT '',
	    firstname VARCHAR(100) NOT NULL DEFAULT '',
	    lastname VARCHAR(100) NOT NULL DEFAULT '',
	    email VARCHAR(100) NOT NULL DEFAULT '',
	    emailstop SMALLINT NOT NULL DEFAULT 0,
	    icq VARCHAR(15) NOT NULL DEFAULT '',
	    skype VARCHAR(50) NOT NULL DEFAULT '',
	    yahoo VARCHAR(50) NOT NULL DEFAULT '',
	    aim VARCHAR(50) NOT NULL DEFAULT '',
	    msn VARCHAR(50) NOT NULL DEFAULT '',
	    phone1 VARCHAR(20) NOT NULL DEFAULT '',
	    phone2 VARCHAR(20) NOT NULL DEFAULT '',
	    institution VARCHAR(255) NOT NULL DEFAULT '',
	    department VARCHAR(255) NOT NULL DEFAULT '',
	    address VARCHAR(255) NOT NULL DEFAULT '',
	    city VARCHAR(120) NOT NULL DEFAULT '',
	    country VARCHAR(2) NOT NULL DEFAULT '',
	    lang VARCHAR(30) NOT NULL DEFAULT 'en',
	    calendartype VARCHAR(30) NOT NULL DEFAULT 'gregorian',
	    theme VARCHAR(50) NOT NULL DEFAULT '',
	    timezone VARCHAR(100) NOT NULL DEFAULT '99',
	    firstaccess BIGINT NOT NULL DEFAULT 0,
	    lastaccess BIGINT NOT NULL DEFAULT 0,
	    lastlogin BIGINT NOT NULL DEFAULT 0,
	    currentlogin BIGINT NOT NULL DEFAULT 0,
	    lastip VARCHAR(45) NOT NULL DEFAULT '',
	    secret VARCHAR(15) NOT NULL DEFAULT '',
	    picture BIGINT NOT NULL DEFAULT 0,
	    url VARCHAR(255) NOT NULL DEFAULT '',
	    description TEXT,
	    descriptionformat SMALLINT NOT NULL DEFAULT 1,
	    mailformat SMALLINT NOT NULL DEFAULT 1,
	    maildigest SMALLINT NOT NULL DEFAULT 0,
	    maildisplay SMALLINT NOT NULL DEFAULT 2,
	    autosubscribe SMALLINT NOT NULL DEFAULT 1,
	    trackforums SMALLINT NOT NULL DEFAULT 0,
	    timecreated BIGINT NOT NULL DEFAULT 0,
	    timemodified BIGINT NOT NULL DEFAULT 0,
	    trustbitmask BIGINT NOT NULL DEFAULT 0,
	    imagealt VARCHAR(255),
	    lastnamephonetic VARCHAR(255),
	    firstnamephonetic VARCHAR(255),
	    middlename VARCHAR(255),
	    alternatename VARCHAR(255),
	CONSTRAINT mdl_user_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_user IS 'One record for each person'
	;
	CREATE UNIQUE INDEX mdl_user_mneuse_uix ON mdl_user (mnethostid, username)
	;
	CREATE INDEX mdl_user_del_ix ON mdl_user (deleted)
	;
	CREATE INDEX mdl_user_con_ix ON mdl_user (confirmed)
	;
	CREATE INDEX mdl_user_fir_ix ON mdl_user (firstname)
	;
	CREATE INDEX mdl_user_las_ix ON mdl_user (lastname)
	;
	CREATE INDEX mdl_user_cit_ix ON mdl_user (city)
	;
	CREATE INDEX mdl_user_cou_ix ON mdl_user (country)
	;
	CREATE INDEX mdl_user_las2_ix ON mdl_user (lastaccess)
	;
	CREATE INDEX mdl_user_ema_ix ON mdl_user (email)
	;
	CREATE INDEX mdl_user_aut_ix ON mdl_user (auth)
	;
	CREATE INDEX mdl_user_idn_ix ON mdl_user (idnumber)
	;
	CREATE INDEX mdl_user_fir2_ix ON mdl_user (firstnamephonetic)
	;
	CREATE INDEX mdl_user_las3_ix ON mdl_user (lastnamephonetic)
	;
	CREATE INDEX mdl_user_mid_ix ON mdl_user (middlename)
	;
	CREATE INDEX mdl_user_alt_ix ON mdl_user (alternatename)
	;
	CREATE TABLE mdl_user_preferences (
	    id BIGSERIAL,
	    userid BIGINT NOT NULL DEFAULT 0,
	    name VARCHAR(255) NOT NULL DEFAULT '',
	    value VARCHAR(1333) NOT NULL DEFAULT '',
	CONSTRAINT mdl_userpref_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_user_preferences IS 'Allows modules to store arbitrary user preferences'
	;
	CREATE UNIQUE INDEX mdl_userpref_usenam_uix ON mdl_user_preferences (userid, name)
	;
	CREATE TABLE mdl_user_lastaccess (
	    id BIGSERIAL,
	    userid BIGINT NOT NULL DEFAULT 0,
	    courseid BIGINT NOT NULL DEFAULT 0,
	    timeaccess BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_userlast_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_user_lastaccess IS 'To keep track of course page access times, used in online participants block, and participants list'
	;
	CREATE UNIQUE INDEX mdl_userlast_usecou_uix ON mdl_user_lastaccess (userid, courseid)
	;
	CREATE INDEX mdl_userlast_use_ix ON mdl_user_lastaccess (userid)
	;
	CREATE INDEX mdl_userlast_cou_ix ON mdl_user_lastaccess (courseid)
	;
	CREATE TABLE mdl_user_password_history (
	    id BIGSERIAL,
	    userid BIGINT NOT NULL,
	    hash VARCHAR(255) NOT NULL DEFAULT '',
	    timecreated BIGINT NOT NULL,
	CONSTRAINT mdl_userpasshist_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_user_password_history IS 'A rotating log of hashes of previously used passwords for each user.'
	;
	CREATE INDEX mdl_userpasshist_use_ix ON mdl_user_password_history (userid)
	;
	CREATE TABLE mdl_scale (
	    id BIGSERIAL,
	    courseid BIGINT NOT NULL DEFAULT 0,
	    userid BIGINT NOT NULL DEFAULT 0,
	    name VARCHAR(255) NOT NULL DEFAULT '',
	    scale TEXT NOT NULL,
	    description TEXT NOT NULL,
	    descriptionformat SMALLINT NOT NULL DEFAULT 0,
	    timemodified BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_scal_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_scale IS 'Defines grading scales'
	;
	CREATE INDEX mdl_scal_cou_ix ON mdl_scale (courseid)
	;
	CREATE TABLE mdl_scale_history (
	    id BIGSERIAL,
	    action BIGINT NOT NULL DEFAULT 0,
	    oldid BIGINT NOT NULL,
	    source VARCHAR(255),
	    timemodified BIGINT,
	    loggeduser BIGINT,
	    courseid BIGINT NOT NULL DEFAULT 0,
	    userid BIGINT NOT NULL DEFAULT 0,
	    name VARCHAR(255) NOT NULL DEFAULT '',
	    scale TEXT NOT NULL,
	    description TEXT NOT NULL,
	CONSTRAINT mdl_scalhist_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_scale_history IS 'History table'
	;
	CREATE INDEX mdl_scalhist_act_ix ON mdl_scale_history (action)
	;
	CREATE INDEX mdl_scalhist_tim_ix ON mdl_scale_history (timemodified)
	;
	CREATE INDEX mdl_scalhist_old_ix ON mdl_scale_history (oldid)
	;
	CREATE INDEX mdl_scalhist_cou_ix ON mdl_scale_history (courseid)
	;
	CREATE INDEX mdl_scalhist_log_ix ON mdl_scale_history (loggeduser)
	;
	CREATE TABLE mdl_stats_daily (
	    id BIGSERIAL,
	    courseid BIGINT NOT NULL DEFAULT 0,
	    timeend BIGINT NOT NULL DEFAULT 0,
	    roleid BIGINT NOT NULL DEFAULT 0,
	    stattype VARCHAR(20) NOT NULL DEFAULT 'activity',
	    stat1 BIGINT NOT NULL DEFAULT 0,
	    stat2 BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_statdail_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_stats_daily IS 'to accumulate daily stats'
	;
	CREATE INDEX mdl_statdail_cou_ix ON mdl_stats_daily (courseid)
	;
	CREATE INDEX mdl_statdail_tim_ix ON mdl_stats_daily (timeend)
	;
	CREATE INDEX mdl_statdail_rol_ix ON mdl_stats_daily (roleid)
	;
	CREATE TABLE mdl_stats_weekly (
	    id BIGSERIAL,
	    courseid BIGINT NOT NULL DEFAULT 0,
	    timeend BIGINT NOT NULL DEFAULT 0,
	    roleid BIGINT NOT NULL DEFAULT 0,
	    stattype VARCHAR(20) NOT NULL DEFAULT 'activity',
	    stat1 BIGINT NOT NULL DEFAULT 0,
	    stat2 BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_statweek_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_stats_weekly IS 'To accumulate weekly stats'
	;
	CREATE INDEX mdl_statweek_cou_ix ON mdl_stats_weekly (courseid)
	;
	CREATE INDEX mdl_statweek_tim_ix ON mdl_stats_weekly (timeend)
	;
	CREATE INDEX mdl_statweek_rol_ix ON mdl_stats_weekly (roleid)
	;
	CREATE TABLE mdl_stats_monthly (
	    id BIGSERIAL,
	    courseid BIGINT NOT NULL DEFAULT 0,
	    timeend BIGINT NOT NULL DEFAULT 0,
	    roleid BIGINT NOT NULL DEFAULT 0,
	    stattype VARCHAR(20) NOT NULL DEFAULT 'activity',
	    stat1 BIGINT NOT NULL DEFAULT 0,
	    stat2 BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_statmont_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_stats_monthly IS 'To accumulate monthly stats'
	;
	CREATE INDEX mdl_statmont_cou_ix ON mdl_stats_monthly (courseid)
	;
	CREATE INDEX mdl_statmont_tim_ix ON mdl_stats_monthly (timeend)
	;
	CREATE INDEX mdl_statmont_rol_ix ON mdl_stats_monthly (roleid)
	;
	CREATE TABLE mdl_stats_user_daily (
	    id BIGSERIAL,
	    courseid BIGINT NOT NULL DEFAULT 0,
	    userid BIGINT NOT NULL DEFAULT 0,
	    roleid BIGINT NOT NULL DEFAULT 0,
	    timeend BIGINT NOT NULL DEFAULT 0,
	    statsreads BIGINT NOT NULL DEFAULT 0,
	    statswrites BIGINT NOT NULL DEFAULT 0,
	    stattype VARCHAR(30) NOT NULL DEFAULT '',
	CONSTRAINT mdl_statuserdail_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_stats_user_daily IS 'To accumulate daily stats per course/user'
	;
	CREATE INDEX mdl_statuserdail_cou_ix ON mdl_stats_user_daily (courseid)
	;
	CREATE INDEX mdl_statuserdail_use_ix ON mdl_stats_user_daily (userid)
	;
	CREATE INDEX mdl_statuserdail_rol_ix ON mdl_stats_user_daily (roleid)
	;
	CREATE INDEX mdl_statuserdail_tim_ix ON mdl_stats_user_daily (timeend)
	;
	CREATE TABLE mdl_stats_user_weekly (
	    id BIGSERIAL,
	    courseid BIGINT NOT NULL DEFAULT 0,
	    userid BIGINT NOT NULL DEFAULT 0,
	    roleid BIGINT NOT NULL DEFAULT 0,
	    timeend BIGINT NOT NULL DEFAULT 0,
	    statsreads BIGINT NOT NULL DEFAULT 0,
	    statswrites BIGINT NOT NULL DEFAULT 0,
	    stattype VARCHAR(30) NOT NULL DEFAULT '',
	CONSTRAINT mdl_statuserweek_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_stats_user_weekly IS 'To accumulate weekly stats per course/user'
	;
	CREATE INDEX mdl_statuserweek_cou_ix ON mdl_stats_user_weekly (courseid)
	;
	CREATE INDEX mdl_statuserweek_use_ix ON mdl_stats_user_weekly (userid)
	;
	CREATE INDEX mdl_statuserweek_rol_ix ON mdl_stats_user_weekly (roleid)
	;
	CREATE INDEX mdl_statuserweek_tim_ix ON mdl_stats_user_weekly (timeend)
	;
	CREATE TABLE mdl_stats_user_monthly (
	    id BIGSERIAL,
	    courseid BIGINT NOT NULL DEFAULT 0,
	    userid BIGINT NOT NULL DEFAULT 0,
	    roleid BIGINT NOT NULL DEFAULT 0,
	    timeend BIGINT NOT NULL DEFAULT 0,
	    statsreads BIGINT NOT NULL DEFAULT 0,
	    statswrites BIGINT NOT NULL DEFAULT 0,
	    stattype VARCHAR(30) NOT NULL DEFAULT '',
	CONSTRAINT mdl_statusermont_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_stats_user_monthly IS 'To accumulate monthly stats per course/user'
	;
	CREATE INDEX mdl_statusermont_cou_ix ON mdl_stats_user_monthly (courseid)
	;
	CREATE INDEX mdl_statusermont_use_ix ON mdl_stats_user_monthly (userid)
	;
	CREATE INDEX mdl_statusermont_rol_ix ON mdl_stats_user_monthly (roleid)
	;
	CREATE INDEX mdl_statusermont_tim_ix ON mdl_stats_user_monthly (timeend)
	;
	CREATE TABLE mdl_post (
	    id BIGSERIAL,
	    module VARCHAR(20) NOT NULL DEFAULT '',
	    userid BIGINT NOT NULL DEFAULT 0,
	    courseid BIGINT NOT NULL DEFAULT 0,
	    groupid BIGINT NOT NULL DEFAULT 0,
	    moduleid BIGINT NOT NULL DEFAULT 0,
	    coursemoduleid BIGINT NOT NULL DEFAULT 0,
	    subject VARCHAR(128) NOT NULL DEFAULT '',
	    summary TEXT,
	    content TEXT,
	    uniquehash VARCHAR(255) NOT NULL DEFAULT '',
	    rating BIGINT NOT NULL DEFAULT 0,
	    format BIGINT NOT NULL DEFAULT 0,
	    summaryformat SMALLINT NOT NULL DEFAULT 0,
	    attachment VARCHAR(100),
	    publishstate VARCHAR(20) NOT NULL DEFAULT 'draft',
	    lastmodified BIGINT NOT NULL DEFAULT 0,
	    created BIGINT NOT NULL DEFAULT 0,
	    usermodified BIGINT,
	CONSTRAINT mdl_post_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_post IS 'Generic post table to hold data blog entries etc in different modules'
	;
	CREATE UNIQUE INDEX mdl_post_iduse_uix ON mdl_post (id, userid)
	;
	CREATE INDEX mdl_post_las_ix ON mdl_post (lastmodified)
	;
	CREATE INDEX mdl_post_mod_ix ON mdl_post (module)
	;
	CREATE INDEX mdl_post_sub_ix ON mdl_post (subject)
	;
	CREATE INDEX mdl_post_use_ix ON mdl_post (usermodified)
	;
	CREATE TABLE mdl_role (
	    id BIGSERIAL,
	    name VARCHAR(255) NOT NULL DEFAULT '',
	    shortname VARCHAR(100) NOT NULL DEFAULT '',
	    description TEXT NOT NULL,
	    sortorder BIGINT NOT NULL DEFAULT 0,
	    archetype VARCHAR(30) NOT NULL DEFAULT '',
	CONSTRAINT mdl_role_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_role IS 'moodle roles'
	;
	CREATE UNIQUE INDEX mdl_role_sor_uix ON mdl_role (sortorder)
	;
	CREATE UNIQUE INDEX mdl_role_sho_uix ON mdl_role (shortname)
	;
	CREATE TABLE mdl_context (
	    id BIGSERIAL,
	    contextlevel BIGINT NOT NULL DEFAULT 0,
	    instanceid BIGINT NOT NULL DEFAULT 0,
	    path VARCHAR(255),
	    depth SMALLINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_cont_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_context IS 'one of these must be set'
	;
	CREATE UNIQUE INDEX mdl_cont_conins_uix ON mdl_context (contextlevel, instanceid)
	;
	CREATE INDEX mdl_cont_ins_ix ON mdl_context (instanceid)
	;
	CREATE INDEX mdl_cont_pat_ix ON mdl_context (path)
	;
	CREATE INDEX mdl_cont_pat_ix_pattern ON mdl_context USING btree (path varchar_pattern_ops)
	;
	CREATE TABLE mdl_context_temp (
	    id BIGINT NOT NULL,
	    path VARCHAR(255) NOT NULL DEFAULT '',
	    depth SMALLINT NOT NULL,
	CONSTRAINT mdl_conttemp_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_context_temp IS 'Used by build_context_path() in upgrade and cron to keep context depths and paths in sync.'
	;
	CREATE TABLE mdl_capabilities (
	    id BIGSERIAL,
	    name VARCHAR(255) NOT NULL DEFAULT '',
	    captype VARCHAR(50) NOT NULL DEFAULT '',
	    contextlevel BIGINT NOT NULL DEFAULT 0,
	    component VARCHAR(100) NOT NULL DEFAULT '',
	    riskbitmask BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_capa_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_capabilities IS 'this defines all capabilities'
	;
	CREATE UNIQUE INDEX mdl_capa_nam_uix ON mdl_capabilities (name)
	;
	CREATE TABLE mdl_role_allow_assign (
	    id BIGSERIAL,
	    roleid BIGINT NOT NULL DEFAULT 0,
	    allowassign BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_rolealloassi_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_role_allow_assign IS 'this defines what role can assign what role'
	;
	CREATE UNIQUE INDEX mdl_rolealloassi_rolall_uix ON mdl_role_allow_assign (roleid, allowassign)
	;
	CREATE INDEX mdl_rolealloassi_rol_ix ON mdl_role_allow_assign (roleid)
	;
	CREATE INDEX mdl_rolealloassi_all_ix ON mdl_role_allow_assign (allowassign)
	;
	CREATE TABLE mdl_role_allow_override (
	    id BIGSERIAL,
	    roleid BIGINT NOT NULL DEFAULT 0,
	    allowoverride BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_rolealloover_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_role_allow_override IS 'this defines what role can override what role'
	;
	CREATE UNIQUE INDEX mdl_rolealloover_rolall_uix ON mdl_role_allow_override (roleid, allowoverride)
	;
	CREATE INDEX mdl_rolealloover_rol_ix ON mdl_role_allow_override (roleid)
	;
	CREATE INDEX mdl_rolealloover_all_ix ON mdl_role_allow_override (allowoverride)
	;
	CREATE TABLE mdl_role_allow_switch (
	    id BIGSERIAL,
	    roleid BIGINT NOT NULL,
	    allowswitch BIGINT NOT NULL,
	CONSTRAINT mdl_rolealloswit_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_role_allow_switch IS 'This table stores which which other roles a user is allowed to switch to if they have one role.'
	;
	CREATE UNIQUE INDEX mdl_rolealloswit_rolall_uix ON mdl_role_allow_switch (roleid, allowswitch)
	;
	CREATE INDEX mdl_rolealloswit_rol_ix ON mdl_role_allow_switch (roleid)
	;
	CREATE INDEX mdl_rolealloswit_all_ix ON mdl_role_allow_switch (allowswitch)
	;
	CREATE TABLE mdl_role_allow_view (
	    id BIGSERIAL,
	    roleid BIGINT NOT NULL,
	    allowview BIGINT NOT NULL,
	CONSTRAINT mdl_rolealloview_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_role_allow_view IS 'This table stores which which other roles a user is allowed to view to if they have one role.'
	;
	CREATE UNIQUE INDEX mdl_rolealloview_rolall_uix ON mdl_role_allow_view (roleid, allowview)
	;
	CREATE INDEX mdl_rolealloview_rol_ix ON mdl_role_allow_view (roleid)
	;
	CREATE INDEX mdl_rolealloview_all_ix ON mdl_role_allow_view (allowview)
	;
	CREATE TABLE mdl_role_assignments (
	    id BIGSERIAL,
	    roleid BIGINT NOT NULL DEFAULT 0,
	    contextid BIGINT NOT NULL DEFAULT 0,
	    userid BIGINT NOT NULL DEFAULT 0,
	    timemodified BIGINT NOT NULL DEFAULT 0,
	    modifierid BIGINT NOT NULL DEFAULT 0,
	    component VARCHAR(100) NOT NULL DEFAULT '',
	    itemid BIGINT NOT NULL DEFAULT 0,
	    sortorder BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_roleassi_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_role_assignments IS 'assigning roles in different context'
	;
	CREATE INDEX mdl_roleassi_sor_ix ON mdl_role_assignments (sortorder)
	;
	CREATE INDEX mdl_roleassi_rolcon_ix ON mdl_role_assignments (roleid, contextid)
	;
	CREATE INDEX mdl_roleassi_useconrol_ix ON mdl_role_assignments (userid, contextid, roleid)
	;
	CREATE INDEX mdl_roleassi_comiteuse_ix ON mdl_role_assignments (component, itemid, userid)
	;
	CREATE INDEX mdl_roleassi_rol_ix ON mdl_role_assignments (roleid)
	;
	CREATE INDEX mdl_roleassi_con_ix ON mdl_role_assignments (contextid)
	;
	CREATE INDEX mdl_roleassi_use_ix ON mdl_role_assignments (userid)
	;
	CREATE TABLE mdl_role_capabilities (
	    id BIGSERIAL,
	    contextid BIGINT NOT NULL DEFAULT 0,
	    roleid BIGINT NOT NULL DEFAULT 0,
	    capability VARCHAR(255) NOT NULL DEFAULT '',
	    permission BIGINT NOT NULL DEFAULT 0,
	    timemodified BIGINT NOT NULL DEFAULT 0,
	    modifierid BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_rolecapa_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_role_capabilities IS 'permission has to be signed, overriding a capability for a particular role in a particular context'
	;
	CREATE UNIQUE INDEX mdl_rolecapa_rolconcap_uix ON mdl_role_capabilities (roleid, contextid, capability)
	;
	CREATE INDEX mdl_rolecapa_rol_ix ON mdl_role_capabilities (roleid)
	;
	CREATE INDEX mdl_rolecapa_con_ix ON mdl_role_capabilities (contextid)
	;
	CREATE INDEX mdl_rolecapa_mod_ix ON mdl_role_capabilities (modifierid)
	;
	CREATE INDEX mdl_rolecapa_cap_ix ON mdl_role_capabilities (capability)
	;
	CREATE TABLE mdl_role_names (
	    id BIGSERIAL,
	    roleid BIGINT NOT NULL DEFAULT 0,
	    contextid BIGINT NOT NULL DEFAULT 0,
	    name VARCHAR(255) NOT NULL DEFAULT '',
	CONSTRAINT mdl_rolename_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_role_names IS 'role names in native strings'
	;
	CREATE UNIQUE INDEX mdl_rolename_rolcon_uix ON mdl_role_names (roleid, contextid)
	;
	CREATE INDEX mdl_rolename_rol_ix ON mdl_role_names (roleid)
	;
	CREATE INDEX mdl_rolename_con_ix ON mdl_role_names (contextid)
	;
	CREATE TABLE mdl_role_sortorder (
	    id BIGSERIAL,
	    userid BIGINT NOT NULL,
	    roleid BIGINT NOT NULL,
	    contextid BIGINT NOT NULL,
	    sortoder BIGINT NOT NULL,
	CONSTRAINT mdl_rolesort_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_role_sortorder IS 'sort order of course managers in a course'
	;
	CREATE UNIQUE INDEX mdl_rolesort_userolcon_uix ON mdl_role_sortorder (userid, roleid, contextid)
	;
	CREATE INDEX mdl_rolesort_use_ix ON mdl_role_sortorder (userid)
	;
	CREATE INDEX mdl_rolesort_rol_ix ON mdl_role_sortorder (roleid)
	;
	CREATE INDEX mdl_rolesort_con_ix ON mdl_role_sortorder (contextid)
	;
	CREATE TABLE mdl_role_context_levels (
	    id BIGSERIAL,
	    roleid BIGINT NOT NULL,
	    contextlevel BIGINT NOT NULL,
	CONSTRAINT mdl_rolecontleve_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_role_context_levels IS 'Lists which roles can be assigned at which context levels. The assignment is allowed in the corresponding row is present in this table.'
	;
	CREATE UNIQUE INDEX mdl_rolecontleve_conrol_uix ON mdl_role_context_levels (contextlevel, roleid)
	;
	CREATE INDEX mdl_rolecontleve_rol_ix ON mdl_role_context_levels (roleid)
	;
	CREATE TABLE mdl_user_info_field (
	    id BIGSERIAL,
	    shortname VARCHAR(255) NOT NULL DEFAULT 'shortname',
	    name TEXT NOT NULL,
	    datatype VARCHAR(255) NOT NULL DEFAULT '',
	    description TEXT,
	    descriptionformat SMALLINT NOT NULL DEFAULT 0,
	    categoryid BIGINT NOT NULL DEFAULT 0,
	    sortorder BIGINT NOT NULL DEFAULT 0,
	    required SMALLINT NOT NULL DEFAULT 0,
	    locked SMALLINT NOT NULL DEFAULT 0,
	    visible SMALLINT NOT NULL DEFAULT 0,
	    forceunique SMALLINT NOT NULL DEFAULT 0,
	    signup SMALLINT NOT NULL DEFAULT 0,
	    defaultdata TEXT,
	    defaultdataformat SMALLINT NOT NULL DEFAULT 0,
	    param1 TEXT,
	    param2 TEXT,
	    param3 TEXT,
	    param4 TEXT,
	    param5 TEXT,
	CONSTRAINT mdl_userinfofiel_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_user_info_field IS 'Customisable user profile fields'
	;
	CREATE TABLE mdl_user_info_category (
	    id BIGSERIAL,
	    name VARCHAR(255) NOT NULL DEFAULT '',
	    sortorder BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_userinfocate_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_user_info_category IS 'Customisable fields categories'
	;
	CREATE TABLE mdl_user_info_data (
	    id BIGSERIAL,
	    userid BIGINT NOT NULL DEFAULT 0,
	    fieldid BIGINT NOT NULL DEFAULT 0,
	    data TEXT NOT NULL,
	    dataformat SMALLINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_userinfodata_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_user_info_data IS 'Data for the customisable user fields'
	;
	CREATE UNIQUE INDEX mdl_userinfodata_usefie_uix ON mdl_user_info_data (userid, fieldid)
	;
	CREATE TABLE mdl_question_categories (
	    id BIGSERIAL,
	    name VARCHAR(255) NOT NULL DEFAULT '',
	    contextid BIGINT NOT NULL DEFAULT 0,
	    info TEXT NOT NULL,
	    infoformat SMALLINT NOT NULL DEFAULT 0,
	    stamp VARCHAR(255) NOT NULL DEFAULT '',
	    parent BIGINT NOT NULL DEFAULT 0,
	    sortorder BIGINT NOT NULL DEFAULT 999,
	CONSTRAINT mdl_quescate_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_question_categories IS 'Categories are for grouping questions'
	;
	CREATE INDEX mdl_quescate_con_ix ON mdl_question_categories (contextid)
	;
	CREATE UNIQUE INDEX mdl_quescate_consta_uix ON mdl_question_categories (contextid, stamp)
	;
	CREATE INDEX mdl_quescate_par_ix ON mdl_question_categories (parent)
	;
	CREATE TABLE mdl_question (
	    id BIGSERIAL,
	    category BIGINT NOT NULL DEFAULT 0,
	    parent BIGINT NOT NULL DEFAULT 0,
	    name VARCHAR(255) NOT NULL DEFAULT '',
	    questiontext TEXT NOT NULL,
	    questiontextformat SMALLINT NOT NULL DEFAULT 0,
	    generalfeedback TEXT NOT NULL,
	    generalfeedbackformat SMALLINT NOT NULL DEFAULT 0,
	    defaultmark NUMERIC(12,7) NOT NULL DEFAULT 1,
	    penalty NUMERIC(12,7) NOT NULL DEFAULT 0.3333333,
	    qtype VARCHAR(20) NOT NULL DEFAULT '',
	    length BIGINT NOT NULL DEFAULT 1,
	    stamp VARCHAR(255) NOT NULL DEFAULT '',
	    version VARCHAR(255) NOT NULL DEFAULT '',
	    hidden SMALLINT NOT NULL DEFAULT 0,
	    timecreated BIGINT NOT NULL DEFAULT 0,
	    timemodified BIGINT NOT NULL DEFAULT 0,
	    createdby BIGINT,
	    modifiedby BIGINT,
	CONSTRAINT mdl_ques_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_question IS 'The questions themselves'
	;
	CREATE INDEX mdl_ques_qty_ix ON mdl_question (qtype)
	;
	CREATE INDEX mdl_ques_cat_ix ON mdl_question (category)
	;
	CREATE INDEX mdl_ques_par_ix ON mdl_question (parent)
	;
	CREATE INDEX mdl_ques_cre_ix ON mdl_question (createdby)
	;
	CREATE INDEX mdl_ques_mod_ix ON mdl_question (modifiedby)
	;
	CREATE TABLE mdl_question_answers (
	    id BIGSERIAL,
	    question BIGINT NOT NULL DEFAULT 0,
	    answer TEXT NOT NULL,
	    answerformat SMALLINT NOT NULL DEFAULT 0,
	    fraction NUMERIC(12,7) NOT NULL DEFAULT 0,
	    feedback TEXT NOT NULL,
	    feedbackformat SMALLINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_quesansw_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_question_answers IS 'Answers, with a fractional grade (0-1) and feedback'
	;
	CREATE INDEX mdl_quesansw_que_ix ON mdl_question_answers (question)
	;
	CREATE TABLE mdl_question_hints (
	    id BIGSERIAL,
	    questionid BIGINT NOT NULL,
	    hint TEXT NOT NULL,
	    hintformat SMALLINT NOT NULL DEFAULT 0,
	    shownumcorrect SMALLINT,
	    clearwrong SMALLINT,
	    options VARCHAR(255),
	CONSTRAINT mdl_queshint_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_question_hints IS 'Stores the the part of the question definition that gives different feedback after each try in interactive and similar behaviours.'
	;
	CREATE INDEX mdl_queshint_que_ix ON mdl_question_hints (questionid)
	;
	CREATE TABLE mdl_question_usages (
	    id BIGSERIAL,
	    contextid BIGINT NOT NULL,
	    component VARCHAR(255) NOT NULL DEFAULT '',
	    preferredbehaviour VARCHAR(32) NOT NULL DEFAULT '',
	CONSTRAINT mdl_quesusag_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_question_usages IS 'This table''s main purpose it to assign a unique id to each attempt at a set of questions by some part of Moodle. A question usage is made up of a number of question_attempts.'
	;
	CREATE INDEX mdl_quesusag_con_ix ON mdl_question_usages (contextid)
	;
	CREATE TABLE mdl_question_attempts (
	    id BIGSERIAL,
	    questionusageid BIGINT NOT NULL,
	    slot BIGINT NOT NULL,
	    behaviour VARCHAR(32) NOT NULL DEFAULT '',
	    questionid BIGINT NOT NULL,
	    variant BIGINT NOT NULL DEFAULT 1,
	    maxmark NUMERIC(12,7) NOT NULL,
	    minfraction NUMERIC(12,7) NOT NULL,
	    maxfraction NUMERIC(12,7) NOT NULL DEFAULT 1,
	    flagged SMALLINT NOT NULL DEFAULT 0,
	    questionsummary TEXT,
	    rightanswer TEXT,
	    responsesummary TEXT,
	    timemodified BIGINT NOT NULL,
	CONSTRAINT mdl_quesatte_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_question_attempts IS 'Each row here corresponds to an attempt at one question, as part of a question_usage. A question_attempt will have some question_attempt_steps'
	;
	CREATE UNIQUE INDEX mdl_quesatte_queslo_uix ON mdl_question_attempts (questionusageid, slot)
	;
	CREATE INDEX mdl_quesatte_beh_ix ON mdl_question_attempts (behaviour)
	;
	CREATE INDEX mdl_quesatte_que_ix ON mdl_question_attempts (questionid)
	;
	CREATE INDEX mdl_quesatte_que2_ix ON mdl_question_attempts (questionusageid)
	;
	CREATE TABLE mdl_question_attempt_steps (
	    id BIGSERIAL,
	    questionattemptid BIGINT NOT NULL,
	    sequencenumber BIGINT NOT NULL,
	    state VARCHAR(13) NOT NULL DEFAULT '',
	    fraction NUMERIC(12,7),
	    timecreated BIGINT NOT NULL,
	    userid BIGINT,
	CONSTRAINT mdl_quesattestep_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_question_attempt_steps IS 'Stores one step in in a question attempt. As well as the data here, the step will have some data in the question_attempt_step_data table.'
	;
	CREATE UNIQUE INDEX mdl_quesattestep_queseq_uix ON mdl_question_attempt_steps (questionattemptid, sequencenumber)
	;
	CREATE INDEX mdl_quesattestep_que_ix ON mdl_question_attempt_steps (questionattemptid)
	;
	CREATE INDEX mdl_quesattestep_use_ix ON mdl_question_attempt_steps (userid)
	;
	CREATE TABLE mdl_question_attempt_step_data (
	    id BIGSERIAL,
	    attemptstepid BIGINT NOT NULL,
	    name VARCHAR(32) NOT NULL DEFAULT '',
	    value TEXT,
	CONSTRAINT mdl_quesattestepdata_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_question_attempt_step_data IS 'Each question_attempt_step has an associative array of the data that was submitted by the user in the POST request. It can also contain extra data from the question type or behaviour to avoid re-computation. The convention is that names belonging to '
	;
	CREATE INDEX mdl_quesattestepdata_att_ix ON mdl_question_attempt_step_data (attemptstepid)
	;
	CREATE TABLE mdl_question_statistics (
	    id BIGSERIAL,
	    hashcode VARCHAR(40) NOT NULL DEFAULT '',
	    timemodified BIGINT NOT NULL,
	    questionid BIGINT NOT NULL,
	    slot BIGINT,
	    subquestion SMALLINT NOT NULL,
	    variant BIGINT,
	    s BIGINT NOT NULL DEFAULT 0,
	    effectiveweight NUMERIC(15,5),
	    negcovar SMALLINT NOT NULL DEFAULT 0,
	    discriminationindex NUMERIC(15,5),
	    discriminativeefficiency NUMERIC(15,5),
	    sd NUMERIC(15,10),
	    facility NUMERIC(15,10),
	    subquestions TEXT,
	    maxmark NUMERIC(12,7),
	    positions TEXT,
	    randomguessscore NUMERIC(12,7),
	CONSTRAINT mdl_quesstat_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_question_statistics IS 'Statistics for individual questions used in an activity.'
	;
	CREATE TABLE mdl_question_response_analysis (
	    id BIGSERIAL,
	    hashcode VARCHAR(40) NOT NULL DEFAULT '',
	    whichtries VARCHAR(255) NOT NULL DEFAULT '',
	    timemodified BIGINT NOT NULL,
	    questionid BIGINT NOT NULL,
	    variant BIGINT,
	    subqid VARCHAR(100) NOT NULL DEFAULT '',
	    aid VARCHAR(100),
	    response TEXT,
	    credit NUMERIC(15,5) NOT NULL,
	CONSTRAINT mdl_quesrespanal_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_question_response_analysis IS 'Analysis of student responses given to questions.'
	;
	CREATE TABLE mdl_question_response_count (
	    id BIGSERIAL,
	    analysisid BIGINT NOT NULL,
	    try BIGINT NOT NULL,
	    rcount BIGINT NOT NULL,
	CONSTRAINT mdl_quesrespcoun_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_question_response_count IS 'Count for each responses for each try at a question.'
	;
	CREATE INDEX mdl_quesrespcoun_ana_ix ON mdl_question_response_count (analysisid)
	;
	CREATE TABLE mdl_mnet_application (
	    id BIGSERIAL,
	    name VARCHAR(50) NOT NULL DEFAULT '',
	    display_name VARCHAR(50) NOT NULL DEFAULT '',
	    xmlrpc_server_url VARCHAR(255) NOT NULL DEFAULT '',
	    sso_land_url VARCHAR(255) NOT NULL DEFAULT '',
	    sso_jump_url VARCHAR(255) NOT NULL DEFAULT '',
	CONSTRAINT mdl_mnetappl_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_mnet_application IS 'Information about applications on remote hosts'
	;
	CREATE TABLE mdl_mnet_host (
	    id BIGSERIAL,
	    deleted SMALLINT NOT NULL DEFAULT 0,
	    wwwroot VARCHAR(255) NOT NULL DEFAULT '',
	    ip_address VARCHAR(45) NOT NULL DEFAULT '',
	    name VARCHAR(80) NOT NULL DEFAULT '',
	    public_key TEXT NOT NULL,
	    public_key_expires BIGINT NOT NULL DEFAULT 0,
	    transport SMALLINT NOT NULL DEFAULT 0,
	    portno INTEGER NOT NULL DEFAULT 0,
	    last_connect_time BIGINT NOT NULL DEFAULT 0,
	    last_log_id BIGINT NOT NULL DEFAULT 0,
	    force_theme SMALLINT NOT NULL DEFAULT 0,
	    theme VARCHAR(100),
	    applicationid BIGINT NOT NULL DEFAULT 1,
	    sslverification SMALLINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_mnethost_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_mnet_host IS 'Information about the local and remote hosts for RPC'
	;
	CREATE INDEX mdl_mnethost_app_ix ON mdl_mnet_host (applicationid)
	;
	CREATE TABLE mdl_mnet_host2service (
	    id BIGSERIAL,
	    hostid BIGINT NOT NULL DEFAULT 0,
	    serviceid BIGINT NOT NULL DEFAULT 0,
	    publish SMALLINT NOT NULL DEFAULT 0,
	    subscribe SMALLINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_mnethost_id3_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_mnet_host2service IS 'Information about the services for a given host'
	;
	CREATE UNIQUE INDEX mdl_mnethost_hosser_uix ON mdl_mnet_host2service (hostid, serviceid)
	;
	CREATE TABLE mdl_mnet_log (
	    id BIGSERIAL,
	    hostid BIGINT NOT NULL DEFAULT 0,
	    remoteid BIGINT NOT NULL DEFAULT 0,
	    time BIGINT NOT NULL DEFAULT 0,
	    userid BIGINT NOT NULL DEFAULT 0,
	    ip VARCHAR(45) NOT NULL DEFAULT '',
	    course BIGINT NOT NULL DEFAULT 0,
	    coursename VARCHAR(40) NOT NULL DEFAULT '',
	    module VARCHAR(20) NOT NULL DEFAULT '',
	    cmid BIGINT NOT NULL DEFAULT 0,
	    action VARCHAR(40) NOT NULL DEFAULT '',
	    url VARCHAR(100) NOT NULL DEFAULT '',
	    info VARCHAR(255) NOT NULL DEFAULT '',
	CONSTRAINT mdl_mnetlog_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_mnet_log IS 'Store session data from users migrating to other sites'
	;
	CREATE INDEX mdl_mnetlog_hosusecou_ix ON mdl_mnet_log (hostid, userid, course)
	;
	CREATE TABLE mdl_mnet_rpc (
	    id BIGSERIAL,
	    functionname VARCHAR(40) NOT NULL DEFAULT '',
	    xmlrpcpath VARCHAR(80) NOT NULL DEFAULT '',
	    plugintype VARCHAR(20) NOT NULL DEFAULT '',
	    pluginname VARCHAR(20) NOT NULL DEFAULT '',
	    enabled SMALLINT NOT NULL DEFAULT 0,
	    help TEXT NOT NULL,
	    profile TEXT NOT NULL,
	    filename VARCHAR(100) NOT NULL DEFAULT '',
	    classname VARCHAR(150),
	    static SMALLINT,
	CONSTRAINT mdl_mnetrpc_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_mnet_rpc IS 'Functions or methods that we may publish or subscribe to'
	;
	CREATE INDEX mdl_mnetrpc_enaxml_ix ON mdl_mnet_rpc (enabled, xmlrpcpath)
	;
	CREATE TABLE mdl_mnet_remote_rpc (
	    id BIGSERIAL,
	    functionname VARCHAR(40) NOT NULL DEFAULT '',
	    xmlrpcpath VARCHAR(80) NOT NULL DEFAULT '',
	    plugintype VARCHAR(20) NOT NULL DEFAULT '',
	    pluginname VARCHAR(20) NOT NULL DEFAULT '',
	    enabled SMALLINT NOT NULL,
	CONSTRAINT mdl_mnetremorpc_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_mnet_remote_rpc IS 'This table describes functions that might be called remotely (we have less information about them than local functions)'
	;
	CREATE TABLE mdl_mnet_service (
	    id BIGSERIAL,
	    name VARCHAR(40) NOT NULL DEFAULT '',
	    description VARCHAR(40) NOT NULL DEFAULT '',
	    apiversion VARCHAR(10) NOT NULL DEFAULT '',
	    offer SMALLINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_mnetserv_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_mnet_service IS 'A service is a group of functions'
	;
	CREATE TABLE mdl_mnet_service2rpc (
	    id BIGSERIAL,
	    serviceid BIGINT NOT NULL DEFAULT 0,
	    rpcid BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_mnetserv_id3_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_mnet_service2rpc IS 'Group functions or methods under a service'
	;
	CREATE UNIQUE INDEX mdl_mnetserv_rpcser_uix ON mdl_mnet_service2rpc (rpcid, serviceid)
	;
	CREATE TABLE mdl_mnet_remote_service2rpc (
	    id BIGSERIAL,
	    serviceid BIGINT NOT NULL DEFAULT 0,
	    rpcid BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_mnetremoserv_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_mnet_remote_service2rpc IS 'Group functions or methods under a service'
	;
	CREATE UNIQUE INDEX mdl_mnetremoserv_rpcser_uix ON mdl_mnet_remote_service2rpc (rpcid, serviceid)
	;
	CREATE TABLE mdl_mnet_session (
	    id BIGSERIAL,
	    userid BIGINT NOT NULL DEFAULT 0,
	    username VARCHAR(100) NOT NULL DEFAULT '',
	    token VARCHAR(40) NOT NULL DEFAULT '',
	    mnethostid BIGINT NOT NULL DEFAULT 0,
	    useragent VARCHAR(40) NOT NULL DEFAULT '',
	    confirm_timeout BIGINT NOT NULL DEFAULT 0,
	    session_id VARCHAR(40) NOT NULL DEFAULT '',
	    expires BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_mnetsess_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_mnet_session IS 'Store session data from users migrating to other sites'
	;
	CREATE UNIQUE INDEX mdl_mnetsess_tok_uix ON mdl_mnet_session (token)
	;
	CREATE TABLE mdl_mnet_sso_access_control (
	    id BIGSERIAL,
	    username VARCHAR(100) NOT NULL DEFAULT '',
	    mnet_host_id BIGINT NOT NULL DEFAULT 0,
	    accessctrl VARCHAR(20) NOT NULL DEFAULT 'allow',
	CONSTRAINT mdl_mnetssoaccecont_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_mnet_sso_access_control IS 'Users by host permitted (or not) to login from a remote provider'
	;
	CREATE UNIQUE INDEX mdl_mnetssoaccecont_mneuse_uix ON mdl_mnet_sso_access_control (mnet_host_id, username)
	;
	CREATE TABLE mdl_events_queue (
	    id BIGSERIAL,
	    eventdata TEXT NOT NULL,
	    stackdump TEXT,
	    userid BIGINT,
	    timecreated BIGINT NOT NULL,
	CONSTRAINT mdl_evenqueu_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_events_queue IS 'This table is for storing queued events. It stores only one copy of the eventdata here, and entries from this table are being references by the event_queue_handlers table.'
	;
	CREATE INDEX mdl_evenqueu_use_ix ON mdl_events_queue (userid)
	;
	CREATE TABLE mdl_events_handlers (
	    id BIGSERIAL,
	    eventname VARCHAR(166) NOT NULL DEFAULT '',
	    component VARCHAR(166) NOT NULL DEFAULT '',
	    handlerfile VARCHAR(255) NOT NULL DEFAULT '',
	    handlerfunction TEXT,
	    schedule VARCHAR(255),
	    status BIGINT NOT NULL DEFAULT 0,
	    internal SMALLINT NOT NULL DEFAULT 1,
	CONSTRAINT mdl_evenhand_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_events_handlers IS 'This table is for storing which components requests what type of event, and the location of the responsible handlers. For example, the assignment registers ''grade_updated'' event with a function assignment_grade_handler() that should be called event t'
	;
	CREATE UNIQUE INDEX mdl_evenhand_evecom_uix ON mdl_events_handlers (eventname, component)
	;
	CREATE TABLE mdl_events_queue_handlers (
	    id BIGSERIAL,
	    queuedeventid BIGINT NOT NULL,
	    handlerid BIGINT NOT NULL,
	    status BIGINT,
	    errormessage TEXT,
	    timemodified BIGINT NOT NULL,
	CONSTRAINT mdl_evenqueuhand_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_events_queue_handlers IS 'This is the list of queued handlers for processing. The event object is retrieved from the events_queue table. When no further reference is made to the event_queues table, the corresponding entry in the events_queue table should be deleted. Entry sho'
	;
	CREATE INDEX mdl_evenqueuhand_que_ix ON mdl_events_queue_handlers (queuedeventid)
	;
	CREATE INDEX mdl_evenqueuhand_han_ix ON mdl_events_queue_handlers (handlerid)
	;
	CREATE TABLE mdl_grade_outcomes (
	    id BIGSERIAL,
	    courseid BIGINT,
	    shortname VARCHAR(255) NOT NULL DEFAULT '',
	    fullname TEXT NOT NULL,
	    scaleid BIGINT,
	    description TEXT,
	    descriptionformat SMALLINT NOT NULL DEFAULT 0,
	    timecreated BIGINT,
	    timemodified BIGINT,
	    usermodified BIGINT,
	CONSTRAINT mdl_gradoutc_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_grade_outcomes IS 'This table describes the outcomes used in the system. An outcome is a statement tied to a rubric scale from low to high, such as âNot met, Borderline, Metâ (stored as 0,1 or 2)'
	;
	CREATE INDEX mdl_gradoutc_cou_ix ON mdl_grade_outcomes (courseid)
	;
	CREATE INDEX mdl_gradoutc_sca_ix ON mdl_grade_outcomes (scaleid)
	;
	CREATE INDEX mdl_gradoutc_use_ix ON mdl_grade_outcomes (usermodified)
	;
	CREATE UNIQUE INDEX mdl_gradoutc_cousho_uix ON mdl_grade_outcomes (courseid, shortname)
	;
	CREATE TABLE mdl_grade_outcomes_courses (
	    id BIGSERIAL,
	    courseid BIGINT NOT NULL,
	    outcomeid BIGINT NOT NULL,
	CONSTRAINT mdl_gradoutccour_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_grade_outcomes_courses IS 'stores what outcomes are used in what courses.'
	;
	CREATE INDEX mdl_gradoutccour_cou_ix ON mdl_grade_outcomes_courses (courseid)
	;
	CREATE INDEX mdl_gradoutccour_out_ix ON mdl_grade_outcomes_courses (outcomeid)
	;
	CREATE UNIQUE INDEX mdl_gradoutccour_couout_uix ON mdl_grade_outcomes_courses (courseid, outcomeid)
	;
	CREATE TABLE mdl_grade_categories (
	    id BIGSERIAL,
	    courseid BIGINT NOT NULL,
	    parent BIGINT,
	    depth BIGINT NOT NULL DEFAULT 0,
	    path VARCHAR(255),
	    fullname VARCHAR(255) NOT NULL DEFAULT '',
	    aggregation BIGINT NOT NULL DEFAULT 0,
	    keephigh BIGINT NOT NULL DEFAULT 0,
	    droplow BIGINT NOT NULL DEFAULT 0,
	    aggregateonlygraded SMALLINT NOT NULL DEFAULT 0,
	    aggregateoutcomes SMALLINT NOT NULL DEFAULT 0,
	    timecreated BIGINT NOT NULL,
	    timemodified BIGINT NOT NULL,
	    hidden SMALLINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_gradcate_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_grade_categories IS 'This table keeps information about categories, used for grouping items.'
	;
	CREATE INDEX mdl_gradcate_cou_ix ON mdl_grade_categories (courseid)
	;
	CREATE INDEX mdl_gradcate_par_ix ON mdl_grade_categories (parent)
	;
	CREATE TABLE mdl_grade_items (
	    id BIGSERIAL,
	    courseid BIGINT,
	    categoryid BIGINT,
	    itemname VARCHAR(255),
	    itemtype VARCHAR(30) NOT NULL DEFAULT '',
	    itemmodule VARCHAR(30),
	    iteminstance BIGINT,
	    itemnumber BIGINT,
	    iteminfo TEXT,
	    idnumber VARCHAR(255),
	    calculation TEXT,
	    gradetype SMALLINT NOT NULL DEFAULT 1,
	    grademax NUMERIC(10,5) NOT NULL DEFAULT 100,
	    grademin NUMERIC(10,5) NOT NULL DEFAULT 0,
	    scaleid BIGINT,
	    outcomeid BIGINT,
	    gradepass NUMERIC(10,5) NOT NULL DEFAULT 0,
	    multfactor NUMERIC(10,5) NOT NULL DEFAULT 1.0,
	    plusfactor NUMERIC(10,5) NOT NULL DEFAULT 0,
	    aggregationcoef NUMERIC(10,5) NOT NULL DEFAULT 0,
	    aggregationcoef2 NUMERIC(10,5) NOT NULL DEFAULT 0,
	    sortorder BIGINT NOT NULL DEFAULT 0,
	    display BIGINT NOT NULL DEFAULT 0,
	    decimals SMALLINT,
	    hidden BIGINT NOT NULL DEFAULT 0,
	    locked BIGINT NOT NULL DEFAULT 0,
	    locktime BIGINT NOT NULL DEFAULT 0,
	    needsupdate BIGINT NOT NULL DEFAULT 0,
	    weightoverride SMALLINT NOT NULL DEFAULT 0,
	    timecreated BIGINT,
	    timemodified BIGINT,
	CONSTRAINT mdl_graditem_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_grade_items IS 'This table keeps information about gradeable items (ie columns). If an activity (eg an assignment or quiz) has multiple grade_items associated with it (eg several outcomes or numerical grades), then there will be a corresponding multiple number of ro'
	;
	CREATE INDEX mdl_graditem_locloc_ix ON mdl_grade_items (locked, locktime)
	;
	CREATE INDEX mdl_graditem_itenee_ix ON mdl_grade_items (itemtype, needsupdate)
	;
	CREATE INDEX mdl_graditem_gra_ix ON mdl_grade_items (gradetype)
	;
	CREATE INDEX mdl_graditem_idncou_ix ON mdl_grade_items (idnumber, courseid)
	;
	CREATE INDEX mdl_graditem_cou_ix ON mdl_grade_items (courseid)
	;
	CREATE INDEX mdl_graditem_cat_ix ON mdl_grade_items (categoryid)
	;
	CREATE INDEX mdl_graditem_sca_ix ON mdl_grade_items (scaleid)
	;
	CREATE INDEX mdl_graditem_out_ix ON mdl_grade_items (outcomeid)
	;
	CREATE TABLE mdl_grade_grades (
	    id BIGSERIAL,
	    itemid BIGINT NOT NULL,
	    userid BIGINT NOT NULL,
	    rawgrade NUMERIC(10,5),
	    rawgrademax NUMERIC(10,5) NOT NULL DEFAULT 100,
	    rawgrademin NUMERIC(10,5) NOT NULL DEFAULT 0,
	    rawscaleid BIGINT,
	    usermodified BIGINT,
	    finalgrade NUMERIC(10,5),
	    hidden BIGINT NOT NULL DEFAULT 0,
	    locked BIGINT NOT NULL DEFAULT 0,
	    locktime BIGINT NOT NULL DEFAULT 0,
	    exported BIGINT NOT NULL DEFAULT 0,
	    overridden BIGINT NOT NULL DEFAULT 0,
	    excluded BIGINT NOT NULL DEFAULT 0,
	    feedback TEXT,
	    feedbackformat BIGINT NOT NULL DEFAULT 0,
	    information TEXT,
	    informationformat BIGINT NOT NULL DEFAULT 0,
	    timecreated BIGINT,
	    timemodified BIGINT,
	    aggregationstatus VARCHAR(10) NOT NULL DEFAULT 'unknown',
	    aggregationweight NUMERIC(10,5),
	CONSTRAINT mdl_gradgrad_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_grade_grades IS 'grade_grades  This table keeps individual grades for each user and each item, exactly as imported or submitted by modules. The rawgrademax/min and rawscaleid are stored here to record the values at the time the grade was stored, because teachers migh'
	;
	CREATE INDEX mdl_gradgrad_locloc_ix ON mdl_grade_grades (locked, locktime)
	;
	CREATE INDEX mdl_gradgrad_ite_ix ON mdl_grade_grades (itemid)
	;
	CREATE INDEX mdl_gradgrad_use_ix ON mdl_grade_grades (userid)
	;
	CREATE INDEX mdl_gradgrad_raw_ix ON mdl_grade_grades (rawscaleid)
	;
	CREATE INDEX mdl_gradgrad_use2_ix ON mdl_grade_grades (usermodified)
	;
	CREATE UNIQUE INDEX mdl_gradgrad_useite_uix ON mdl_grade_grades (userid, itemid)
	;
	CREATE TABLE mdl_grade_outcomes_history (
	    id BIGSERIAL,
	    action BIGINT NOT NULL DEFAULT 0,
	    oldid BIGINT NOT NULL,
	    source VARCHAR(255),
	    timemodified BIGINT,
	    loggeduser BIGINT,
	    courseid BIGINT,
	    shortname VARCHAR(255) NOT NULL DEFAULT '',
	    fullname TEXT NOT NULL,
	    scaleid BIGINT,
	    description TEXT,
	    descriptionformat SMALLINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_gradoutchist_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_grade_outcomes_history IS 'History table'
	;
	CREATE INDEX mdl_gradoutchist_act_ix ON mdl_grade_outcomes_history (action)
	;
	CREATE INDEX mdl_gradoutchist_tim_ix ON mdl_grade_outcomes_history (timemodified)
	;
	CREATE INDEX mdl_gradoutchist_old_ix ON mdl_grade_outcomes_history (oldid)
	;
	CREATE INDEX mdl_gradoutchist_cou_ix ON mdl_grade_outcomes_history (courseid)
	;
	CREATE INDEX mdl_gradoutchist_sca_ix ON mdl_grade_outcomes_history (scaleid)
	;
	CREATE INDEX mdl_gradoutchist_log_ix ON mdl_grade_outcomes_history (loggeduser)
	;
	CREATE TABLE mdl_grade_categories_history (
	    id BIGSERIAL,
	    action BIGINT NOT NULL DEFAULT 0,
	    oldid BIGINT NOT NULL,
	    source VARCHAR(255),
	    timemodified BIGINT,
	    loggeduser BIGINT,
	    courseid BIGINT NOT NULL,
	    parent BIGINT,
	    depth BIGINT NOT NULL DEFAULT 0,
	    path VARCHAR(255),
	    fullname VARCHAR(255) NOT NULL DEFAULT '',
	    aggregation BIGINT NOT NULL DEFAULT 0,
	    keephigh BIGINT NOT NULL DEFAULT 0,
	    droplow BIGINT NOT NULL DEFAULT 0,
	    aggregateonlygraded SMALLINT NOT NULL DEFAULT 0,
	    aggregateoutcomes SMALLINT NOT NULL DEFAULT 0,
	    aggregatesubcats SMALLINT NOT NULL DEFAULT 0,
	    hidden SMALLINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_gradcatehist_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_grade_categories_history IS 'History of grade_categories'
	;
	CREATE INDEX mdl_gradcatehist_act_ix ON mdl_grade_categories_history (action)
	;
	CREATE INDEX mdl_gradcatehist_tim_ix ON mdl_grade_categories_history (timemodified)
	;
	CREATE INDEX mdl_gradcatehist_old_ix ON mdl_grade_categories_history (oldid)
	;
	CREATE INDEX mdl_gradcatehist_cou_ix ON mdl_grade_categories_history (courseid)
	;
	CREATE INDEX mdl_gradcatehist_par_ix ON mdl_grade_categories_history (parent)
	;
	CREATE INDEX mdl_gradcatehist_log_ix ON mdl_grade_categories_history (loggeduser)
	;
	CREATE TABLE mdl_grade_items_history (
	    id BIGSERIAL,
	    action BIGINT NOT NULL DEFAULT 0,
	    oldid BIGINT NOT NULL,
	    source VARCHAR(255),
	    timemodified BIGINT,
	    loggeduser BIGINT,
	    courseid BIGINT,
	    categoryid BIGINT,
	    itemname VARCHAR(255),
	    itemtype VARCHAR(30) NOT NULL DEFAULT '',
	    itemmodule VARCHAR(30),
	    iteminstance BIGINT,
	    itemnumber BIGINT,
	    iteminfo TEXT,
	    idnumber VARCHAR(255),
	    calculation TEXT,
	    gradetype SMALLINT NOT NULL DEFAULT 1,
	    grademax NUMERIC(10,5) NOT NULL DEFAULT 100,
	    grademin NUMERIC(10,5) NOT NULL DEFAULT 0,
	    scaleid BIGINT,
	    outcomeid BIGINT,
	    gradepass NUMERIC(10,5) NOT NULL DEFAULT 0,
	    multfactor NUMERIC(10,5) NOT NULL DEFAULT 1.0,
	    plusfactor NUMERIC(10,5) NOT NULL DEFAULT 0,
	    aggregationcoef NUMERIC(10,5) NOT NULL DEFAULT 0,
	    aggregationcoef2 NUMERIC(10,5) NOT NULL DEFAULT 0,
	    sortorder BIGINT NOT NULL DEFAULT 0,
	    hidden BIGINT NOT NULL DEFAULT 0,
	    locked BIGINT NOT NULL DEFAULT 0,
	    locktime BIGINT NOT NULL DEFAULT 0,
	    needsupdate BIGINT NOT NULL DEFAULT 0,
	    display BIGINT NOT NULL DEFAULT 0,
	    decimals SMALLINT,
	    weightoverride SMALLINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_graditemhist_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_grade_items_history IS 'History of grade_items'
	;
	CREATE INDEX mdl_graditemhist_act_ix ON mdl_grade_items_history (action)
	;
	CREATE INDEX mdl_graditemhist_tim_ix ON mdl_grade_items_history (timemodified)
	;
	CREATE INDEX mdl_graditemhist_old_ix ON mdl_grade_items_history (oldid)
	;
	CREATE INDEX mdl_graditemhist_cou_ix ON mdl_grade_items_history (courseid)
	;
	CREATE INDEX mdl_graditemhist_cat_ix ON mdl_grade_items_history (categoryid)
	;
	CREATE INDEX mdl_graditemhist_sca_ix ON mdl_grade_items_history (scaleid)
	;
	CREATE INDEX mdl_graditemhist_out_ix ON mdl_grade_items_history (outcomeid)
	;
	CREATE INDEX mdl_graditemhist_log_ix ON mdl_grade_items_history (loggeduser)
	;
	CREATE TABLE mdl_grade_grades_history (
	    id BIGSERIAL,
	    action BIGINT NOT NULL DEFAULT 0,
	    oldid BIGINT NOT NULL,
	    source VARCHAR(255),
	    timemodified BIGINT,
	    loggeduser BIGINT,
	    itemid BIGINT NOT NULL,
	    userid BIGINT NOT NULL,
	    rawgrade NUMERIC(10,5),
	    rawgrademax NUMERIC(10,5) NOT NULL DEFAULT 100,
	    rawgrademin NUMERIC(10,5) NOT NULL DEFAULT 0,
	    rawscaleid BIGINT,
	    usermodified BIGINT,
	    finalgrade NUMERIC(10,5),
	    hidden BIGINT NOT NULL DEFAULT 0,
	    locked BIGINT NOT NULL DEFAULT 0,
	    locktime BIGINT NOT NULL DEFAULT 0,
	    exported BIGINT NOT NULL DEFAULT 0,
	    overridden BIGINT NOT NULL DEFAULT 0,
	    excluded BIGINT NOT NULL DEFAULT 0,
	    feedback TEXT,
	    feedbackformat BIGINT NOT NULL DEFAULT 0,
	    information TEXT,
	    informationformat BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_gradgradhist_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_grade_grades_history IS 'History table'
	;
	CREATE INDEX mdl_gradgradhist_act_ix ON mdl_grade_grades_history (action)
	;
	CREATE INDEX mdl_gradgradhist_tim_ix ON mdl_grade_grades_history (timemodified)
	;
	CREATE INDEX mdl_gradgradhist_useitetim_ix ON mdl_grade_grades_history (userid, itemid, timemodified)
	;
	CREATE INDEX mdl_gradgradhist_old_ix ON mdl_grade_grades_history (oldid)
	;
	CREATE INDEX mdl_gradgradhist_ite_ix ON mdl_grade_grades_history (itemid)
	;
	CREATE INDEX mdl_gradgradhist_use_ix ON mdl_grade_grades_history (userid)
	;
	CREATE INDEX mdl_gradgradhist_raw_ix ON mdl_grade_grades_history (rawscaleid)
	;
	CREATE INDEX mdl_gradgradhist_use2_ix ON mdl_grade_grades_history (usermodified)
	;
	CREATE INDEX mdl_gradgradhist_log_ix ON mdl_grade_grades_history (loggeduser)
	;
	CREATE TABLE mdl_grade_import_newitem (
	    id BIGSERIAL,
	    itemname VARCHAR(255) NOT NULL DEFAULT '',
	    importcode BIGINT NOT NULL,
	    importer BIGINT NOT NULL,
	CONSTRAINT mdl_gradimponewi_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_grade_import_newitem IS 'temporary table for storing new grade_item names from grade import'
	;
	CREATE INDEX mdl_gradimponewi_imp_ix ON mdl_grade_import_newitem (importer)
	;
	CREATE TABLE mdl_grade_import_values (
	    id BIGSERIAL,
	    itemid BIGINT,
	    newgradeitem BIGINT,
	    userid BIGINT NOT NULL,
	    finalgrade NUMERIC(10,5),
	    feedback TEXT,
	    importcode BIGINT NOT NULL,
	    importer BIGINT,
	    importonlyfeedback SMALLINT DEFAULT 0,
	CONSTRAINT mdl_gradimpovalu_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_grade_import_values IS 'Temporary table for importing grades'
	;
	CREATE INDEX mdl_gradimpovalu_ite_ix ON mdl_grade_import_values (itemid)
	;
	CREATE INDEX mdl_gradimpovalu_new_ix ON mdl_grade_import_values (newgradeitem)
	;
	CREATE INDEX mdl_gradimpovalu_imp_ix ON mdl_grade_import_values (importer)
	;
	CREATE TABLE mdl_tag_coll (
	    id BIGSERIAL,
	    name VARCHAR(255),
	    isdefault SMALLINT NOT NULL DEFAULT 0,
	    component VARCHAR(100),
	    sortorder INTEGER NOT NULL DEFAULT 0,
	    searchable SMALLINT NOT NULL DEFAULT 1,
	    customurl VARCHAR(255),
	CONSTRAINT mdl_tagcoll_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_tag_coll IS 'Defines different set of tags'
	;
	CREATE TABLE mdl_tag_area (
	    id BIGSERIAL,
	    component VARCHAR(100) NOT NULL DEFAULT '',
	    itemtype VARCHAR(100) NOT NULL DEFAULT '',
	    enabled SMALLINT NOT NULL DEFAULT 1,
	    tagcollid BIGINT NOT NULL,
	    callback VARCHAR(100),
	    callbackfile VARCHAR(100),
	    showstandard SMALLINT NOT NULL DEFAULT 0,
	    multiplecontexts SMALLINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_tagarea_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_tag_area IS 'Defines various tag areas, one area is identified by component and itemtype'
	;
	CREATE UNIQUE INDEX mdl_tagarea_comite_uix ON mdl_tag_area (component, itemtype)
	;
	CREATE INDEX mdl_tagarea_tag_ix ON mdl_tag_area (tagcollid)
	;
	CREATE TABLE mdl_tag (
	    id BIGSERIAL,
	    userid BIGINT NOT NULL,
	    tagcollid BIGINT NOT NULL,
	    name VARCHAR(255) NOT NULL DEFAULT '',
	    rawname VARCHAR(255) NOT NULL DEFAULT '',
	    isstandard SMALLINT NOT NULL DEFAULT 0,
	    description TEXT,
	    descriptionformat SMALLINT NOT NULL DEFAULT 0,
	    flag SMALLINT DEFAULT 0,
	    timemodified BIGINT,
	CONSTRAINT mdl_tag_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_tag IS 'Tag table - this generic table will replace the old "tags" table.'
	;
	CREATE UNIQUE INDEX mdl_tag_tagnam_uix ON mdl_tag (tagcollid, name)
	;
	CREATE INDEX mdl_tag_tagiss_ix ON mdl_tag (tagcollid, isstandard)
	;
	CREATE INDEX mdl_tag_use_ix ON mdl_tag (userid)
	;
	CREATE INDEX mdl_tag_tag_ix ON mdl_tag (tagcollid)
	;
	CREATE TABLE mdl_tag_correlation (
	    id BIGSERIAL,
	    tagid BIGINT NOT NULL,
	    correlatedtags TEXT NOT NULL,
	CONSTRAINT mdl_tagcorr_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_tag_correlation IS 'The rationale for the ''tag_correlation'' table is performance.   It works as a cache for a potentially heavy load query done at the ''tag_instance'' table.   So, the ''tag_correlation'' table stores redundant information derived from the ''tag_instance'' ta'
	;
	CREATE INDEX mdl_tagcorr_tag_ix ON mdl_tag_correlation (tagid)
	;
	CREATE TABLE mdl_tag_instance (
	    id BIGSERIAL,
	    tagid BIGINT NOT NULL,
	    component VARCHAR(100) NOT NULL DEFAULT '',
	    itemtype VARCHAR(100) NOT NULL DEFAULT '',
	    itemid BIGINT NOT NULL,
	    contextid BIGINT,
	    tiuserid BIGINT NOT NULL DEFAULT 0,
	    ordering BIGINT,
	    timecreated BIGINT NOT NULL DEFAULT 0,
	    timemodified BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_taginst_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_tag_instance IS 'tag_instance table holds the information of associations between tags and other items'
	;
	CREATE UNIQUE INDEX mdl_taginst_comiteiteconti_uix ON mdl_tag_instance (component, itemtype, itemid, contextid, tiuserid, tagid)
	;
	CREATE INDEX mdl_taginst_itecomtagcon_ix ON mdl_tag_instance (itemtype, component, tagid, contextid)
	;
	CREATE INDEX mdl_taginst_tag_ix ON mdl_tag_instance (tagid)
	;
	CREATE INDEX mdl_taginst_con_ix ON mdl_tag_instance (contextid)
	;
	CREATE TABLE mdl_groups (
	    id BIGSERIAL,
	    courseid BIGINT NOT NULL,
	    idnumber VARCHAR(100) NOT NULL DEFAULT '',
	    name VARCHAR(254) NOT NULL DEFAULT '',
	    description TEXT,
	    descriptionformat SMALLINT NOT NULL DEFAULT 0,
	    enrolmentkey VARCHAR(50),
	    picture BIGINT NOT NULL DEFAULT 0,
	    hidepicture SMALLINT NOT NULL DEFAULT 0,
	    timecreated BIGINT NOT NULL DEFAULT 0,
	    timemodified BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_grou_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_groups IS 'Each record represents a group.'
	;
	CREATE INDEX mdl_grou_idn_ix ON mdl_groups (idnumber)
	;
	CREATE INDEX mdl_grou_cou_ix ON mdl_groups (courseid)
	;
	CREATE TABLE mdl_groupings (
	    id BIGSERIAL,
	    courseid BIGINT NOT NULL DEFAULT 0,
	    name VARCHAR(255) NOT NULL DEFAULT '',
	    idnumber VARCHAR(100) NOT NULL DEFAULT '',
	    description TEXT,
	    descriptionformat SMALLINT NOT NULL DEFAULT 0,
	    configdata TEXT,
	    timecreated BIGINT NOT NULL DEFAULT 0,
	    timemodified BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_grou_id3_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_groupings IS 'A grouping is a collection of groups. WAS: groups_groupings'
	;
	CREATE INDEX mdl_grou_idn2_ix ON mdl_groupings (idnumber)
	;
	CREATE INDEX mdl_grou_cou2_ix ON mdl_groupings (courseid)
	;
	CREATE TABLE mdl_groups_members (
	    id BIGSERIAL,
	    groupid BIGINT NOT NULL DEFAULT 0,
	    userid BIGINT NOT NULL DEFAULT 0,
	    timeadded BIGINT NOT NULL DEFAULT 0,
	    component VARCHAR(100) NOT NULL DEFAULT '',
	    itemid BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_groumemb_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_groups_members IS 'Link a user to a group.'
	;
	CREATE INDEX mdl_groumemb_gro_ix ON mdl_groups_members (groupid)
	;
	CREATE INDEX mdl_groumemb_use_ix ON mdl_groups_members (userid)
	;
	CREATE UNIQUE INDEX mdl_groumemb_usegro_uix ON mdl_groups_members (userid, groupid)
	;
	CREATE TABLE mdl_groupings_groups (
	    id BIGSERIAL,
	    groupingid BIGINT NOT NULL DEFAULT 0,
	    groupid BIGINT NOT NULL DEFAULT 0,
	    timeadded BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_grougrou_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_groupings_groups IS 'Link a grouping to a group (note, groups can be in multiple groupings ONLY in a course). WAS: groups_groupings_groups'
	;
	CREATE INDEX mdl_grougrou_gro_ix ON mdl_groupings_groups (groupingid)
	;
	CREATE INDEX mdl_grougrou_gro2_ix ON mdl_groupings_groups (groupid)
	;
	CREATE TABLE mdl_cohort (
	    id BIGSERIAL,
	    contextid BIGINT NOT NULL,
	    name VARCHAR(254) NOT NULL DEFAULT '',
	    idnumber VARCHAR(100),
	    description TEXT,
	    descriptionformat SMALLINT NOT NULL,
	    visible SMALLINT NOT NULL DEFAULT 1,
	    component VARCHAR(100) NOT NULL DEFAULT '',
	    timecreated BIGINT NOT NULL,
	    timemodified BIGINT NOT NULL,
	    theme VARCHAR(50),
	CONSTRAINT mdl_coho_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_cohort IS 'Each record represents one cohort (aka site-wide group).'
	;
	CREATE INDEX mdl_coho_con_ix ON mdl_cohort (contextid)
	;
	CREATE TABLE mdl_cohort_members (
	    id BIGSERIAL,
	    cohortid BIGINT NOT NULL DEFAULT 0,
	    userid BIGINT NOT NULL DEFAULT 0,
	    timeadded BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_cohomemb_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_cohort_members IS 'Link a user to a cohort.'
	;
	CREATE UNIQUE INDEX mdl_cohomemb_cohuse_uix ON mdl_cohort_members (cohortid, userid)
	;
	CREATE INDEX mdl_cohomemb_coh_ix ON mdl_cohort_members (cohortid)
	;
	CREATE INDEX mdl_cohomemb_use_ix ON mdl_cohort_members (userid)
	;
	CREATE TABLE mdl_user_private_key (
	    id BIGSERIAL,
	    script VARCHAR(128) NOT NULL DEFAULT '',
	    value VARCHAR(128) NOT NULL DEFAULT '',
	    userid BIGINT NOT NULL,
	    instance BIGINT,
	    iprestriction VARCHAR(255),
	    validuntil BIGINT,
	    timecreated BIGINT,
	CONSTRAINT mdl_userprivkey_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_user_private_key IS 'access keys used in cookieless scripts - rss, etc.'
	;
	CREATE INDEX mdl_userprivkey_scrval_ix ON mdl_user_private_key (script, value)
	;
	CREATE INDEX mdl_userprivkey_use_ix ON mdl_user_private_key (userid)
	;
	CREATE TABLE mdl_grade_letters (
	    id BIGSERIAL,
	    contextid BIGINT NOT NULL,
	    lowerboundary NUMERIC(10,5) NOT NULL,
	    letter VARCHAR(255) NOT NULL DEFAULT '',
	CONSTRAINT mdl_gradlett_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_grade_letters IS 'Repository for grade letters, for courses and other moodle entities that use grades.'
	;
	CREATE UNIQUE INDEX mdl_gradlett_conlowlet_uix ON mdl_grade_letters (contextid, lowerboundary, letter)
	;
	CREATE TABLE mdl_cache_flags (
	    id BIGSERIAL,
	    flagtype VARCHAR(255) NOT NULL DEFAULT '',
	    name VARCHAR(255) NOT NULL DEFAULT '',
	    timemodified BIGINT NOT NULL DEFAULT 0,
	    value TEXT NOT NULL,
	    expiry BIGINT NOT NULL,
	CONSTRAINT mdl_cachflag_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_cache_flags IS 'Cache of time-sensitive flags'
	;
	CREATE INDEX mdl_cachflag_fla_ix ON mdl_cache_flags (flagtype)
	;
	CREATE INDEX mdl_cachflag_nam_ix ON mdl_cache_flags (name)
	;
	CREATE TABLE mdl_grade_settings (
	    id BIGSERIAL,
	    courseid BIGINT NOT NULL,
	    name VARCHAR(255) NOT NULL DEFAULT '',
	    value TEXT,
	CONSTRAINT mdl_gradsett_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_grade_settings IS 'gradebook settings'
	;
	CREATE UNIQUE INDEX mdl_gradsett_counam_uix ON mdl_grade_settings (courseid, name)
	;
	CREATE INDEX mdl_gradsett_cou_ix ON mdl_grade_settings (courseid)
	;
	CREATE TABLE mdl_portfolio_instance (
	    id BIGSERIAL,
	    plugin VARCHAR(50) NOT NULL DEFAULT '',
	    name VARCHAR(255) NOT NULL DEFAULT '',
	    visible SMALLINT NOT NULL DEFAULT 1,
	CONSTRAINT mdl_portinst_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_portfolio_instance IS 'base table (not including config data) for instances of portfolio plugins.'
	;
	CREATE TABLE mdl_portfolio_instance_config (
	    id BIGSERIAL,
	    instance BIGINT NOT NULL,
	    name VARCHAR(255) NOT NULL DEFAULT '',
	    value TEXT,
	CONSTRAINT mdl_portinstconf_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_portfolio_instance_config IS 'config for portfolio plugin instances'
	;
	CREATE INDEX mdl_portinstconf_nam_ix ON mdl_portfolio_instance_config (name)
	;
	CREATE INDEX mdl_portinstconf_ins_ix ON mdl_portfolio_instance_config (instance)
	;
	CREATE TABLE mdl_portfolio_instance_user (
	    id BIGSERIAL,
	    instance BIGINT NOT NULL,
	    userid BIGINT NOT NULL,
	    name VARCHAR(255) NOT NULL DEFAULT '',
	    value TEXT,
	CONSTRAINT mdl_portinstuser_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_portfolio_instance_user IS 'user data for portfolio instances.'
	;
	CREATE INDEX mdl_portinstuser_ins_ix ON mdl_portfolio_instance_user (instance)
	;
	CREATE INDEX mdl_portinstuser_use_ix ON mdl_portfolio_instance_user (userid)
	;
	CREATE TABLE mdl_portfolio_log (
	    id BIGSERIAL,
	    userid BIGINT NOT NULL,
	    time BIGINT NOT NULL,
	    portfolio BIGINT NOT NULL,
	    caller_class VARCHAR(150) NOT NULL DEFAULT '',
	    caller_file VARCHAR(255) NOT NULL DEFAULT '',
	    caller_component VARCHAR(255),
	    caller_sha1 VARCHAR(255) NOT NULL DEFAULT '',
	    tempdataid BIGINT NOT NULL DEFAULT 0,
	    returnurl VARCHAR(255) NOT NULL DEFAULT '',
	    continueurl VARCHAR(255) NOT NULL DEFAULT '',
	CONSTRAINT mdl_portlog_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_portfolio_log IS 'log of portfolio transfers (used to later check for duplicates)'
	;
	CREATE INDEX mdl_portlog_use_ix ON mdl_portfolio_log (userid)
	;
	CREATE INDEX mdl_portlog_por_ix ON mdl_portfolio_log (portfolio)
	;
	CREATE TABLE mdl_portfolio_tempdata (
	    id BIGSERIAL,
	    data TEXT,
	    expirytime BIGINT NOT NULL,
	    userid BIGINT NOT NULL,
	    instance BIGINT DEFAULT 0,
	    queued SMALLINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_porttemp_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_portfolio_tempdata IS 'stores temporary data for portfolio exports. the id of this table is used for the itemid for the temporary files area.  cron can clean up stale records (and associated file data) after expirytime.'
	;
	CREATE INDEX mdl_porttemp_use_ix ON mdl_portfolio_tempdata (userid)
	;
	CREATE INDEX mdl_porttemp_ins_ix ON mdl_portfolio_tempdata (instance)
	;
	CREATE TABLE mdl_message_providers (
	    id BIGSERIAL,
	    name VARCHAR(100) NOT NULL DEFAULT '',
	    component VARCHAR(200) NOT NULL DEFAULT '',
	    capability VARCHAR(255),
	CONSTRAINT mdl_messprov_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_message_providers IS 'This table stores the message providers (modules and core systems)'
	;
	CREATE UNIQUE INDEX mdl_messprov_comnam_uix ON mdl_message_providers (component, name)
	;
	CREATE TABLE mdl_message_processors (
	    id BIGSERIAL,
	    name VARCHAR(166) NOT NULL DEFAULT '',
	    enabled SMALLINT NOT NULL DEFAULT 1,
	CONSTRAINT mdl_messproc_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_message_processors IS 'List of message output plugins'
	;
	CREATE TABLE mdl_files (
	    id BIGSERIAL,
	    contenthash VARCHAR(40) NOT NULL DEFAULT '',
	    pathnamehash VARCHAR(40) NOT NULL DEFAULT '',
	    contextid BIGINT NOT NULL,
	    component VARCHAR(100) NOT NULL DEFAULT '',
	    filearea VARCHAR(50) NOT NULL DEFAULT '',
	    itemid BIGINT NOT NULL,
	    filepath VARCHAR(255) NOT NULL DEFAULT '',
	    filename VARCHAR(255) NOT NULL DEFAULT '',
	    userid BIGINT,
	    filesize BIGINT NOT NULL,
	    mimetype VARCHAR(100),
	    status BIGINT NOT NULL DEFAULT 0,
	    source TEXT,
	    author VARCHAR(255),
	    license VARCHAR(255),
	    timecreated BIGINT NOT NULL,
	    timemodified BIGINT NOT NULL,
	    sortorder BIGINT NOT NULL DEFAULT 0,
	    referencefileid BIGINT,
	CONSTRAINT mdl_file_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_files IS 'description of files, content is stored in sha1 file pool'
	;
	CREATE INDEX mdl_file_comfilconite_ix ON mdl_files (component, filearea, contextid, itemid)
	;
	CREATE INDEX mdl_file_con_ix ON mdl_files (contenthash)
	;
	CREATE UNIQUE INDEX mdl_file_pat_uix ON mdl_files (pathnamehash)
	;
	CREATE INDEX mdl_file_con2_ix ON mdl_files (contextid)
	;
	CREATE INDEX mdl_file_use_ix ON mdl_files (userid)
	;
	CREATE INDEX mdl_file_ref_ix ON mdl_files (referencefileid)
	;
	CREATE TABLE mdl_files_reference (
	    id BIGSERIAL,
	    repositoryid BIGINT NOT NULL,
	    lastsync BIGINT,
	    reference TEXT,
	    referencehash VARCHAR(40) NOT NULL DEFAULT '',
	CONSTRAINT mdl_filerefe_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_files_reference IS 'Store files references'
	;
	CREATE UNIQUE INDEX mdl_filerefe_refrep_uix ON mdl_files_reference (referencehash, repositoryid)
	;
	CREATE INDEX mdl_filerefe_rep_ix ON mdl_files_reference (repositoryid)
	;
	CREATE TABLE mdl_file_conversion (
	    id BIGSERIAL,
	    usermodified BIGINT NOT NULL,
	    timecreated BIGINT NOT NULL,
	    timemodified BIGINT NOT NULL,
	    sourcefileid BIGINT NOT NULL,
	    targetformat VARCHAR(100) NOT NULL DEFAULT '',
	    status BIGINT DEFAULT 0,
	    statusmessage TEXT,
	    converter VARCHAR(255),
	    destfileid BIGINT,
	    data TEXT,
	CONSTRAINT mdl_fileconv_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_file_conversion IS 'Table to track file conversions.'
	;
	CREATE INDEX mdl_fileconv_sou_ix ON mdl_file_conversion (sourcefileid)
	;
	CREATE INDEX mdl_fileconv_des_ix ON mdl_file_conversion (destfileid)
	;
	CREATE TABLE mdl_repository (
	    id BIGSERIAL,
	    type VARCHAR(255) NOT NULL DEFAULT '',
	    visible SMALLINT DEFAULT 1,
	    sortorder BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_repo_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_repository IS 'This table contains one entry for every configured external repository instance.'
	;
	CREATE TABLE mdl_repository_instances (
	    id BIGSERIAL,
	    name VARCHAR(255) NOT NULL DEFAULT '',
	    typeid BIGINT NOT NULL,
	    userid BIGINT NOT NULL DEFAULT 0,
	    contextid BIGINT NOT NULL,
	    username VARCHAR(255),
	    password VARCHAR(255),
	    timecreated BIGINT,
	    timemodified BIGINT,
	    readonly SMALLINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_repoinst_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_repository_instances IS 'This table contains one entry for every configured external repository instance.'
	;
	CREATE TABLE mdl_repository_instance_config (
	    id BIGSERIAL,
	    instanceid BIGINT NOT NULL,
	    name VARCHAR(255) NOT NULL DEFAULT '',
	    value TEXT,
	CONSTRAINT mdl_repoinstconf_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_repository_instance_config IS 'The config for intances'
	;
	CREATE TABLE mdl_backup_courses (
	    id BIGSERIAL,
	    courseid BIGINT NOT NULL DEFAULT 0,
	    laststarttime BIGINT NOT NULL DEFAULT 0,
	    lastendtime BIGINT NOT NULL DEFAULT 0,
	    laststatus VARCHAR(1) NOT NULL DEFAULT '5',
	    nextstarttime BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_backcour_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_backup_courses IS 'To store every course backup status'
	;
	CREATE UNIQUE INDEX mdl_backcour_cou_uix ON mdl_backup_courses (courseid)
	;
	CREATE TABLE mdl_block (
	    id BIGSERIAL,
	    name VARCHAR(40) NOT NULL DEFAULT '',
	    cron BIGINT NOT NULL DEFAULT 0,
	    lastcron BIGINT NOT NULL DEFAULT 0,
	    visible SMALLINT NOT NULL DEFAULT 1,
	CONSTRAINT mdl_bloc_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_block IS 'contains all installed blocks'
	;
	CREATE UNIQUE INDEX mdl_bloc_nam_uix ON mdl_block (name)
	;
	CREATE TABLE mdl_block_instances (
	    id BIGSERIAL,
	    blockname VARCHAR(40) NOT NULL DEFAULT '',
	    parentcontextid BIGINT NOT NULL,
	    showinsubcontexts SMALLINT NOT NULL,
	    requiredbytheme SMALLINT NOT NULL DEFAULT 0,
	    pagetypepattern VARCHAR(64) NOT NULL DEFAULT '',
	    subpagepattern VARCHAR(16),
	    defaultregion VARCHAR(16) NOT NULL DEFAULT '',
	    defaultweight BIGINT NOT NULL,
	    configdata TEXT,
	    timecreated BIGINT NOT NULL,
	    timemodified BIGINT NOT NULL,
	CONSTRAINT mdl_blocinst_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_block_instances IS 'This table stores block instances. The type of block this is is given by the blockname column. The places this block instance appears is controlled by the parentcontexid, showinsubcontexts, pagetypepattern and subpagepattern fields. Where the block a'
	;
	CREATE INDEX mdl_blocinst_parshopagsub_ix ON mdl_block_instances (parentcontextid, showinsubcontexts, pagetypepattern, subpagepattern)
	;
	CREATE INDEX mdl_blocinst_tim_ix ON mdl_block_instances (timemodified)
	;
	CREATE INDEX mdl_blocinst_par_ix ON mdl_block_instances (parentcontextid)
	;
	CREATE TABLE mdl_block_positions (
	    id BIGSERIAL,
	    blockinstanceid BIGINT NOT NULL,
	    contextid BIGINT NOT NULL,
	    pagetype VARCHAR(64) NOT NULL DEFAULT '',
	    subpage VARCHAR(16) NOT NULL DEFAULT '',
	    visible SMALLINT NOT NULL,
	    region VARCHAR(16) NOT NULL DEFAULT '',
	    weight BIGINT NOT NULL,
	CONSTRAINT mdl_blocposi_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_block_positions IS 'Stores the position of a sticky block_instance on a another page than the one where it was added.'
	;
	CREATE UNIQUE INDEX mdl_blocposi_bloconpagsub_uix ON mdl_block_positions (blockinstanceid, contextid, pagetype, subpage)
	;
	CREATE INDEX mdl_blocposi_blo_ix ON mdl_block_positions (blockinstanceid)
	;
	CREATE INDEX mdl_blocposi_con_ix ON mdl_block_positions (contextid)
	;
	CREATE TABLE mdl_comments (
	    id BIGSERIAL,
	    contextid BIGINT NOT NULL,
	    component VARCHAR(255),
	    commentarea VARCHAR(255) NOT NULL DEFAULT '',
	    itemid BIGINT NOT NULL,
	    content TEXT NOT NULL,
	    format SMALLINT NOT NULL DEFAULT 0,
	    userid BIGINT NOT NULL,
	    timecreated BIGINT NOT NULL,
	CONSTRAINT mdl_comm_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_comments IS 'moodle comments module'
	;
	CREATE INDEX mdl_comm_concomite_ix ON mdl_comments (contextid, commentarea, itemid)
	;
	CREATE INDEX mdl_comm_use_ix ON mdl_comments (userid)
	;
	CREATE TABLE mdl_external_services (
	    id BIGSERIAL,
	    name VARCHAR(200) NOT NULL DEFAULT '',
	    enabled SMALLINT NOT NULL,
	    requiredcapability VARCHAR(150),
	    restrictedusers SMALLINT NOT NULL,
	    component VARCHAR(100),
	    timecreated BIGINT NOT NULL,
	    timemodified BIGINT,
	    shortname VARCHAR(255),
	    downloadfiles SMALLINT NOT NULL DEFAULT 0,
	    uploadfiles SMALLINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_exteserv_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_external_services IS 'built in and custom external services'
	;
	CREATE UNIQUE INDEX mdl_exteserv_nam_uix ON mdl_external_services (name)
	;
	CREATE TABLE mdl_external_functions (
	    id BIGSERIAL,
	    name VARCHAR(200) NOT NULL DEFAULT '',
	    classname VARCHAR(100) NOT NULL DEFAULT '',
	    methodname VARCHAR(100) NOT NULL DEFAULT '',
	    classpath VARCHAR(255),
	    component VARCHAR(100) NOT NULL DEFAULT '',
	    capabilities VARCHAR(255),
	    services VARCHAR(1333),
	CONSTRAINT mdl_extefunc_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_external_functions IS 'list of all external functions'
	;
	CREATE UNIQUE INDEX mdl_extefunc_nam_uix ON mdl_external_functions (name)
	;
	CREATE TABLE mdl_external_services_functions (
	    id BIGSERIAL,
	    externalserviceid BIGINT NOT NULL,
	    functionname VARCHAR(200) NOT NULL DEFAULT '',
	CONSTRAINT mdl_exteservfunc_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_external_services_functions IS 'lists functions available in each service group'
	;
	CREATE INDEX mdl_exteservfunc_ext_ix ON mdl_external_services_functions (externalserviceid)
	;
	CREATE TABLE mdl_external_services_users (
	    id BIGSERIAL,
	    externalserviceid BIGINT NOT NULL,
	    userid BIGINT NOT NULL,
	    iprestriction VARCHAR(255),
	    validuntil BIGINT,
	    timecreated BIGINT,
	CONSTRAINT mdl_exteservuser_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_external_services_users IS 'users allowed to use services with restricted users flag'
	;
	CREATE INDEX mdl_exteservuser_ext_ix ON mdl_external_services_users (externalserviceid)
	;
	CREATE INDEX mdl_exteservuser_use_ix ON mdl_external_services_users (userid)
	;
	CREATE TABLE mdl_external_tokens (
	    id BIGSERIAL,
	    token VARCHAR(128) NOT NULL DEFAULT '',
	    privatetoken VARCHAR(64),
	    tokentype SMALLINT NOT NULL,
	    userid BIGINT NOT NULL,
	    externalserviceid BIGINT NOT NULL,
	    sid VARCHAR(128),
	    contextid BIGINT NOT NULL,
	    creatorid BIGINT NOT NULL DEFAULT 1,
	    iprestriction VARCHAR(255),
	    validuntil BIGINT,
	    timecreated BIGINT NOT NULL,
	    lastaccess BIGINT,
	CONSTRAINT mdl_extetoke_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_external_tokens IS 'Security tokens for accessing of external services'
	;
	CREATE INDEX mdl_extetoke_use_ix ON mdl_external_tokens (userid)
	;
	CREATE INDEX mdl_extetoke_ext_ix ON mdl_external_tokens (externalserviceid)
	;
	CREATE INDEX mdl_extetoke_con_ix ON mdl_external_tokens (contextid)
	;
	CREATE INDEX mdl_extetoke_cre_ix ON mdl_external_tokens (creatorid)
	;
	CREATE TABLE mdl_blog_association (
	    id BIGSERIAL,
	    contextid BIGINT NOT NULL,
	    blogid BIGINT NOT NULL,
	CONSTRAINT mdl_blogasso_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_blog_association IS 'Associations of blog entries with courses and module instances'
	;
	CREATE INDEX mdl_blogasso_con_ix ON mdl_blog_association (contextid)
	;
	CREATE INDEX mdl_blogasso_blo_ix ON mdl_blog_association (blogid)
	;
	CREATE TABLE mdl_blog_external (
	    id BIGSERIAL,
	    userid BIGINT NOT NULL,
	    name VARCHAR(255) NOT NULL DEFAULT '',
	    description TEXT,
	    url TEXT NOT NULL,
	    filtertags VARCHAR(255),
	    failedlastsync SMALLINT NOT NULL DEFAULT 0,
	    timemodified BIGINT,
	    timefetched BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_blogexte_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_blog_external IS 'External blog links used for RSS copying of blog entries to Moodle user blogs'
	;
	CREATE INDEX mdl_blogexte_use_ix ON mdl_blog_external (userid)
	;
	CREATE TABLE mdl_rating (
	    id BIGSERIAL,
	    contextid BIGINT NOT NULL,
	    component VARCHAR(100) NOT NULL DEFAULT '',
	    ratingarea VARCHAR(50) NOT NULL DEFAULT '',
	    itemid BIGINT NOT NULL,
	    scaleid BIGINT NOT NULL,
	    rating BIGINT NOT NULL,
	    userid BIGINT NOT NULL,
	    timecreated BIGINT NOT NULL,
	    timemodified BIGINT NOT NULL,
	CONSTRAINT mdl_rati_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_rating IS 'moodle ratings'
	;
	CREATE INDEX mdl_rati_comratconite_ix ON mdl_rating (component, ratingarea, contextid, itemid)
	;
	CREATE INDEX mdl_rati_con_ix ON mdl_rating (contextid)
	;
	CREATE INDEX mdl_rati_use_ix ON mdl_rating (userid)
	;
	CREATE TABLE mdl_license (
	    id BIGSERIAL,
	    shortname VARCHAR(255),
	    fullname TEXT,
	    source VARCHAR(255),
	    enabled SMALLINT NOT NULL DEFAULT 1,
	    version BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_lice_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_license IS 'store licenses used by moodle'
	;
	CREATE TABLE mdl_registration_hubs (
	    id BIGSERIAL,
	    token VARCHAR(255) NOT NULL DEFAULT '',
	    hubname VARCHAR(255) NOT NULL DEFAULT '',
	    huburl VARCHAR(255) NOT NULL DEFAULT '',
	    confirmed SMALLINT NOT NULL DEFAULT 0,
	    secret VARCHAR(255),
	    timemodified BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_regihubs_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_registration_hubs IS 'hub where the site is registered on with their associated token'
	;
	CREATE TABLE mdl_backup_controllers (
	    id BIGSERIAL,
	    backupid VARCHAR(32) NOT NULL DEFAULT '',
	    operation VARCHAR(20) NOT NULL DEFAULT 'backup',
	    type VARCHAR(10) NOT NULL DEFAULT '',
	    itemid BIGINT NOT NULL,
	    format VARCHAR(20) NOT NULL DEFAULT '',
	    interactive SMALLINT NOT NULL,
	    purpose SMALLINT NOT NULL,
	    userid BIGINT NOT NULL,
	    status SMALLINT NOT NULL,
	    execution SMALLINT NOT NULL,
	    executiontime BIGINT NOT NULL,
	    checksum VARCHAR(32) NOT NULL DEFAULT '',
	    timecreated BIGINT NOT NULL,
	    timemodified BIGINT NOT NULL,
	    controller TEXT NOT NULL,
	CONSTRAINT mdl_backcont_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_backup_controllers IS 'To store the backup_controllers as they are used'
	;
	CREATE INDEX mdl_backcont_typite_ix ON mdl_backup_controllers (type, itemid)
	;
	CREATE UNIQUE INDEX mdl_backcont_bac_uix ON mdl_backup_controllers (backupid)
	;
	CREATE INDEX mdl_backcont_use_ix ON mdl_backup_controllers (userid)
	;
	CREATE TABLE mdl_backup_logs (
	    id BIGSERIAL,
	    backupid VARCHAR(32) NOT NULL DEFAULT '',
	    loglevel SMALLINT NOT NULL,
	    message TEXT NOT NULL,
	    timecreated BIGINT NOT NULL,
	CONSTRAINT mdl_backlogs_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_backup_logs IS 'To store all the logs from backup and restore operations (by db logger)'
	;
	CREATE UNIQUE INDEX mdl_backlogs_bacid_uix ON mdl_backup_logs (backupid, id)
	;
	CREATE INDEX mdl_backlogs_bac_ix ON mdl_backup_logs (backupid)
	;
	CREATE TABLE mdl_profiling (
	    id BIGSERIAL,
	    runid VARCHAR(32) NOT NULL DEFAULT '',
	    url VARCHAR(255) NOT NULL DEFAULT '',
	    data TEXT NOT NULL,
	    totalexecutiontime BIGINT NOT NULL,
	    totalcputime BIGINT NOT NULL,
	    totalcalls BIGINT NOT NULL,
	    totalmemory BIGINT NOT NULL,
	    runreference SMALLINT NOT NULL DEFAULT 0,
	    runcomment VARCHAR(255) NOT NULL DEFAULT '',
	    timecreated BIGINT NOT NULL,
	CONSTRAINT mdl_prof_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_profiling IS 'Stores the results of all the profiling runs'
	;
	CREATE INDEX mdl_prof_urlrun_ix ON mdl_profiling (url, runreference)
	;
	CREATE INDEX mdl_prof_timrun_ix ON mdl_profiling (timecreated, runreference)
	;
	CREATE UNIQUE INDEX mdl_prof_run_uix ON mdl_profiling (runid)
	;
	CREATE TABLE mdl_course_published (
	    id BIGSERIAL,
	    huburl VARCHAR(255),
	    courseid BIGINT NOT NULL,
	    timepublished BIGINT NOT NULL,
	    enrollable SMALLINT NOT NULL DEFAULT 1,
	    hubcourseid BIGINT NOT NULL,
	    status SMALLINT DEFAULT 0,
	    timechecked BIGINT,
	CONSTRAINT mdl_courpubl_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_course_published IS 'Information about how and when an local courses were published to hubs'
	;
	CREATE TABLE mdl_grading_areas (
	    id BIGSERIAL,
	    contextid BIGINT NOT NULL,
	    component VARCHAR(100) NOT NULL DEFAULT '',
	    areaname VARCHAR(100) NOT NULL DEFAULT '',
	    activemethod VARCHAR(100),
	CONSTRAINT mdl_gradarea_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_grading_areas IS 'Identifies gradable areas where advanced grading can happen. For each area, the current active plugin can be set.'
	;
	CREATE UNIQUE INDEX mdl_gradarea_concomare_uix ON mdl_grading_areas (contextid, component, areaname)
	;
	CREATE INDEX mdl_gradarea_con_ix ON mdl_grading_areas (contextid)
	;
	CREATE TABLE mdl_grading_definitions (
	    id BIGSERIAL,
	    areaid BIGINT NOT NULL,
	    method VARCHAR(100) NOT NULL DEFAULT '',
	    name VARCHAR(255) NOT NULL DEFAULT '',
	    description TEXT,
	    descriptionformat SMALLINT,
	    status BIGINT NOT NULL DEFAULT 0,
	    copiedfromid BIGINT,
	    timecreated BIGINT NOT NULL,
	    usercreated BIGINT NOT NULL,
	    timemodified BIGINT NOT NULL,
	    usermodified BIGINT NOT NULL,
	    timecopied BIGINT DEFAULT 0,
	    options TEXT,
	CONSTRAINT mdl_graddefi_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_grading_definitions IS 'Contains the basic information about an advanced grading form defined in the given gradable area'
	;
	CREATE INDEX mdl_graddefi_are_ix ON mdl_grading_definitions (areaid)
	;
	CREATE INDEX mdl_graddefi_use_ix ON mdl_grading_definitions (usermodified)
	;
	CREATE UNIQUE INDEX mdl_graddefi_aremet_uix ON mdl_grading_definitions (areaid, method)
	;
	CREATE INDEX mdl_graddefi_use2_ix ON mdl_grading_definitions (usercreated)
	;
	CREATE TABLE mdl_grading_instances (
	    id BIGSERIAL,
	    definitionid BIGINT NOT NULL,
	    raterid BIGINT NOT NULL,
	    itemid BIGINT,
	    rawgrade NUMERIC(10,5),
	    status BIGINT NOT NULL DEFAULT 0,
	    feedback TEXT,
	    feedbackformat SMALLINT,
	    timemodified BIGINT NOT NULL,
	CONSTRAINT mdl_gradinst_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_grading_instances IS 'Grading form instance is an assessment record for one gradable item assessed by one rater'
	;
	CREATE INDEX mdl_gradinst_def_ix ON mdl_grading_instances (definitionid)
	;
	CREATE INDEX mdl_gradinst_rat_ix ON mdl_grading_instances (raterid)
	;
	CREATE TABLE mdl_event_subscriptions (
	    id BIGSERIAL,
	    url VARCHAR(255) NOT NULL DEFAULT '',
	    categoryid BIGINT NOT NULL DEFAULT 0,
	    courseid BIGINT NOT NULL DEFAULT 0,
	    groupid BIGINT NOT NULL DEFAULT 0,
	    userid BIGINT NOT NULL DEFAULT 0,
	    eventtype VARCHAR(20) NOT NULL DEFAULT '',
	    pollinterval BIGINT NOT NULL DEFAULT 0,
	    lastupdated BIGINT,
	    name VARCHAR(255) NOT NULL DEFAULT '',
	CONSTRAINT mdl_evensubs_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_event_subscriptions IS 'Tracks subscriptions to remote calendars.'
	;
	CREATE TABLE mdl_badge (
	    id BIGSERIAL,
	    name VARCHAR(255) NOT NULL DEFAULT '',
	    description TEXT,
	    timecreated BIGINT NOT NULL DEFAULT 0,
	    timemodified BIGINT NOT NULL DEFAULT 0,
	    usercreated BIGINT NOT NULL,
	    usermodified BIGINT NOT NULL,
	    issuername VARCHAR(255) NOT NULL DEFAULT '',
	    issuerurl VARCHAR(255) NOT NULL DEFAULT '',
	    issuercontact VARCHAR(255),
	    expiredate BIGINT,
	    expireperiod BIGINT,
	    type SMALLINT NOT NULL DEFAULT 1,
	    courseid BIGINT,
	    message TEXT NOT NULL,
	    messagesubject TEXT NOT NULL,
	    attachment SMALLINT NOT NULL DEFAULT 1,
	    notification SMALLINT NOT NULL DEFAULT 1,
	    status SMALLINT NOT NULL DEFAULT 0,
	    nextcron BIGINT,
	CONSTRAINT mdl_badg_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_badge IS 'Defines badge'
	;
	CREATE INDEX mdl_badg_typ_ix ON mdl_badge (type)
	;
	CREATE INDEX mdl_badg_cou_ix ON mdl_badge (courseid)
	;
	CREATE INDEX mdl_badg_use_ix ON mdl_badge (usermodified)
	;
	CREATE INDEX mdl_badg_use2_ix ON mdl_badge (usercreated)
	;
	CREATE TABLE mdl_badge_criteria (
	    id BIGSERIAL,
	    badgeid BIGINT NOT NULL DEFAULT 0,
	    criteriatype BIGINT,
	    method SMALLINT NOT NULL DEFAULT 1,
	    description TEXT,
	    descriptionformat SMALLINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_badgcrit_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_badge_criteria IS 'Defines criteria for issuing badges'
	;
	CREATE INDEX mdl_badgcrit_cri_ix ON mdl_badge_criteria (criteriatype)
	;
	CREATE UNIQUE INDEX mdl_badgcrit_badcri_uix ON mdl_badge_criteria (badgeid, criteriatype)
	;
	CREATE INDEX mdl_badgcrit_bad_ix ON mdl_badge_criteria (badgeid)
	;
	CREATE TABLE mdl_badge_criteria_param (
	    id BIGSERIAL,
	    critid BIGINT NOT NULL,
	    name VARCHAR(255) NOT NULL DEFAULT '',
	    value VARCHAR(255),
	CONSTRAINT mdl_badgcritpara_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_badge_criteria_param IS 'Defines parameters for badges criteria'
	;
	CREATE INDEX mdl_badgcritpara_cri_ix ON mdl_badge_criteria_param (critid)
	;
	CREATE TABLE mdl_badge_issued (
	    id BIGSERIAL,
	    badgeid BIGINT NOT NULL DEFAULT 0,
	    userid BIGINT NOT NULL DEFAULT 0,
	    uniquehash TEXT NOT NULL,
	    dateissued BIGINT NOT NULL DEFAULT 0,
	    dateexpire BIGINT,
	    visible SMALLINT NOT NULL DEFAULT 0,
	    issuernotified BIGINT,
	CONSTRAINT mdl_badgissu_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_badge_issued IS 'Defines issued badges'
	;
	CREATE UNIQUE INDEX mdl_badgissu_baduse_uix ON mdl_badge_issued (badgeid, userid)
	;
	CREATE INDEX mdl_badgissu_bad_ix ON mdl_badge_issued (badgeid)
	;
	CREATE INDEX mdl_badgissu_use_ix ON mdl_badge_issued (userid)
	;
	CREATE TABLE mdl_badge_criteria_met (
	    id BIGSERIAL,
	    issuedid BIGINT,
	    critid BIGINT NOT NULL,
	    userid BIGINT NOT NULL,
	    datemet BIGINT NOT NULL,
	CONSTRAINT mdl_badgcritmet_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_badge_criteria_met IS 'Defines criteria that were met for an issued badge'
	;
	CREATE INDEX mdl_badgcritmet_cri_ix ON mdl_badge_criteria_met (critid)
	;
	CREATE INDEX mdl_badgcritmet_use_ix ON mdl_badge_criteria_met (userid)
	;
	CREATE INDEX mdl_badgcritmet_iss_ix ON mdl_badge_criteria_met (issuedid)
	;
	CREATE TABLE mdl_badge_manual_award (
	    id BIGSERIAL,
	    badgeid BIGINT NOT NULL,
	    recipientid BIGINT NOT NULL,
	    issuerid BIGINT NOT NULL,
	    issuerrole BIGINT NOT NULL,
	    datemet BIGINT NOT NULL,
	CONSTRAINT mdl_badgmanuawar_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_badge_manual_award IS 'Track manual award criteria for badges'
	;
	CREATE INDEX mdl_badgmanuawar_bad_ix ON mdl_badge_manual_award (badgeid)
	;
	CREATE INDEX mdl_badgmanuawar_rec_ix ON mdl_badge_manual_award (recipientid)
	;
	CREATE INDEX mdl_badgmanuawar_iss_ix ON mdl_badge_manual_award (issuerid)
	;
	CREATE INDEX mdl_badgmanuawar_iss2_ix ON mdl_badge_manual_award (issuerrole)
	;
	CREATE TABLE mdl_badge_backpack (
	    id BIGSERIAL,
	    userid BIGINT NOT NULL DEFAULT 0,
	    email VARCHAR(100) NOT NULL DEFAULT '',
	    backpackurl VARCHAR(255) NOT NULL DEFAULT '',
	    backpackuid BIGINT NOT NULL,
	    autosync SMALLINT NOT NULL DEFAULT 0,
	    password VARCHAR(50),
	CONSTRAINT mdl_badgback_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_badge_backpack IS 'Defines settings for connecting external backpack'
	;
	CREATE INDEX mdl_badgback_use_ix ON mdl_badge_backpack (userid)
	;
	CREATE TABLE mdl_badge_external (
	    id BIGSERIAL,
	    backpackid BIGINT NOT NULL,
	    collectionid BIGINT NOT NULL,
	CONSTRAINT mdl_badgexte_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_badge_external IS 'Setting for external badges display'
	;
	CREATE INDEX mdl_badgexte_bac_ix ON mdl_badge_external (backpackid)
	;
	CREATE TABLE mdl_user_devices (
	    id BIGSERIAL,
	    userid BIGINT NOT NULL DEFAULT 0,
	    appid VARCHAR(128) NOT NULL DEFAULT '',
	    name VARCHAR(32) NOT NULL DEFAULT '',
	    model VARCHAR(32) NOT NULL DEFAULT '',
	    platform VARCHAR(32) NOT NULL DEFAULT '',
	    version VARCHAR(32) NOT NULL DEFAULT '',
	    pushid VARCHAR(255) NOT NULL DEFAULT '',
	    uuid VARCHAR(255) NOT NULL DEFAULT '',
	    timecreated BIGINT NOT NULL,
	    timemodified BIGINT NOT NULL,
	CONSTRAINT mdl_userdevi_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_user_devices IS 'This table stores user''s mobile devices information in order to send PUSH notifications'
	;
	CREATE INDEX mdl_userdevi_uuiuse_ix ON mdl_user_devices (uuid, userid)
	;
	CREATE UNIQUE INDEX mdl_userdevi_pususe_uix ON mdl_user_devices (pushid, userid)
	;
	CREATE INDEX mdl_userdevi_use_ix ON mdl_user_devices (userid)
	;
	CREATE TABLE mdl_user_password_resets (
	    id BIGSERIAL,
	    userid BIGINT NOT NULL,
	    timerequested BIGINT NOT NULL,
	    timererequested BIGINT NOT NULL DEFAULT 0,
	    token VARCHAR(32) NOT NULL DEFAULT '',
	CONSTRAINT mdl_userpassrese_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_user_password_resets IS 'table tracking password reset confirmation tokens'
	;
	CREATE INDEX mdl_userpassrese_use_ix ON mdl_user_password_resets (userid)
	;
	CREATE TABLE mdl_lock_db (
	    id BIGSERIAL,
	    resourcekey VARCHAR(255) NOT NULL DEFAULT '',
	    expires BIGINT,
	    owner VARCHAR(36),
	CONSTRAINT mdl_lockdb_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_lock_db IS 'Stores active and inactive lock types for db locking method.'
	;
	CREATE UNIQUE INDEX mdl_lockdb_res_uix ON mdl_lock_db (resourcekey)
	;
	CREATE INDEX mdl_lockdb_exp_ix ON mdl_lock_db (expires)
	;
	CREATE INDEX mdl_lockdb_own_ix ON mdl_lock_db (owner)
	;
	CREATE TABLE mdl_task_scheduled (
	    id BIGSERIAL,
	    component VARCHAR(255) NOT NULL DEFAULT '',
	    classname VARCHAR(255) NOT NULL DEFAULT '',
	    lastruntime BIGINT,
	    nextruntime BIGINT,
	    blocking SMALLINT NOT NULL DEFAULT 0,
	    minute VARCHAR(25) NOT NULL DEFAULT '',
	    hour VARCHAR(25) NOT NULL DEFAULT '',
	    day VARCHAR(25) NOT NULL DEFAULT '',
	    month VARCHAR(25) NOT NULL DEFAULT '',
	    dayofweek VARCHAR(25) NOT NULL DEFAULT '',
	    faildelay BIGINT,
	    customised SMALLINT NOT NULL DEFAULT 0,
	    disabled SMALLINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_tasksche_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_task_scheduled IS 'List of scheduled tasks to be run by cron.'
	;
	CREATE UNIQUE INDEX mdl_tasksche_cla_uix ON mdl_task_scheduled (classname)
	;
	CREATE TABLE mdl_task_adhoc (
	    id BIGSERIAL,
	    component VARCHAR(255) NOT NULL DEFAULT '',
	    classname VARCHAR(255) NOT NULL DEFAULT '',
	    nextruntime BIGINT NOT NULL,
	    faildelay BIGINT,
	    customdata TEXT,
	    userid BIGINT,
	    blocking SMALLINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_taskadho_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_task_adhoc IS 'List of adhoc tasks waiting to run.'
	;
	CREATE INDEX mdl_taskadho_nex_ix ON mdl_task_adhoc (nextruntime)
	;
	CREATE INDEX mdl_taskadho_use_ix ON mdl_task_adhoc (userid)
	;
	CREATE TABLE mdl_messageinbound_handlers (
	    id BIGSERIAL,
	    component VARCHAR(100) NOT NULL DEFAULT '',
	    classname VARCHAR(255) NOT NULL DEFAULT '',
	    defaultexpiration BIGINT NOT NULL DEFAULT 86400,
	    validateaddress SMALLINT NOT NULL DEFAULT 1,
	    enabled SMALLINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_messhand_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_messageinbound_handlers IS 'Inbound Message Handler definitions.'
	;
	CREATE UNIQUE INDEX mdl_messhand_cla_uix ON mdl_messageinbound_handlers (classname)
	;
	CREATE TABLE mdl_messageinbound_datakeys (
	    id BIGSERIAL,
	    handler BIGINT NOT NULL,
	    datavalue BIGINT NOT NULL,
	    datakey VARCHAR(64),
	    timecreated BIGINT NOT NULL,
	    expires BIGINT,
	CONSTRAINT mdl_messdata_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_messageinbound_datakeys IS 'Inbound Message data item secret keys.'
	;
	CREATE UNIQUE INDEX mdl_messdata_handat_uix ON mdl_messageinbound_datakeys (handler, datavalue)
	;
	CREATE INDEX mdl_messdata_han_ix ON mdl_messageinbound_datakeys (handler)
	;
	CREATE TABLE mdl_messageinbound_messagelist (
	    id BIGSERIAL,
	    messageid TEXT NOT NULL,
	    userid BIGINT NOT NULL,
	    address TEXT NOT NULL,
	    timecreated BIGINT NOT NULL,
	CONSTRAINT mdl_messmess_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_messageinbound_messagelist IS 'A list of message IDs for existing replies'
	;
	CREATE INDEX mdl_messmess_use_ix ON mdl_messageinbound_messagelist (userid)
	;
	CREATE TABLE mdl_competency (
	    id BIGSERIAL,
	    shortname VARCHAR(100),
	    description TEXT,
	    descriptionformat SMALLINT NOT NULL DEFAULT 0,
	    idnumber VARCHAR(100),
	    competencyframeworkid BIGINT NOT NULL,
	    parentid BIGINT NOT NULL DEFAULT 0,
	    path VARCHAR(255) NOT NULL DEFAULT '',
	    sortorder BIGINT NOT NULL,
	    ruletype VARCHAR(100),
	    ruleoutcome SMALLINT NOT NULL DEFAULT 0,
	    ruleconfig TEXT,
	    scaleid BIGINT,
	    scaleconfiguration TEXT,
	    timecreated BIGINT NOT NULL,
	    timemodified BIGINT NOT NULL,
	    usermodified BIGINT,
	CONSTRAINT mdl_comp_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_competency IS 'This table contains the master record of each competency in a framework'
	;
	CREATE UNIQUE INDEX mdl_comp_comidn_uix ON mdl_competency (competencyframeworkid, idnumber)
	;
	CREATE INDEX mdl_comp_rul_ix ON mdl_competency (ruleoutcome)
	;
	CREATE TABLE mdl_competency_coursecompsetting (
	    id BIGSERIAL,
	    courseid BIGINT NOT NULL,
	    pushratingstouserplans SMALLINT,
	    timecreated BIGINT NOT NULL,
	    timemodified BIGINT NOT NULL,
	    usermodified BIGINT,
	CONSTRAINT mdl_compcour_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_competency_coursecompsetting IS 'This table contains the course specific settings for competencies.'
	;
	CREATE UNIQUE INDEX mdl_compcour_cou_uix ON mdl_competency_coursecompsetting (courseid)
	;
	CREATE TABLE mdl_competency_framework (
	    id BIGSERIAL,
	    shortname VARCHAR(100),
	    contextid BIGINT NOT NULL,
	    idnumber VARCHAR(100),
	    description TEXT,
	    descriptionformat SMALLINT NOT NULL DEFAULT 0,
	    scaleid BIGINT,
	    scaleconfiguration TEXT NOT NULL,
	    visible SMALLINT NOT NULL DEFAULT 1,
	    taxonomies VARCHAR(255) NOT NULL DEFAULT '',
	    timecreated BIGINT NOT NULL,
	    timemodified BIGINT NOT NULL,
	    usermodified BIGINT,
	CONSTRAINT mdl_compfram_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_competency_framework IS 'List of competency frameworks.'
	;
	CREATE UNIQUE INDEX mdl_compfram_idn_uix ON mdl_competency_framework (idnumber)
	;
	CREATE TABLE mdl_competency_coursecomp (
	    id BIGSERIAL,
	    courseid BIGINT NOT NULL,
	    competencyid BIGINT NOT NULL,
	    ruleoutcome SMALLINT NOT NULL,
	    timecreated BIGINT NOT NULL,
	    timemodified BIGINT NOT NULL,
	    usermodified BIGINT NOT NULL,
	    sortorder BIGINT NOT NULL,
	CONSTRAINT mdl_compcour_id3_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_competency_coursecomp IS 'Link a competency to a course.'
	;
	CREATE INDEX mdl_compcour_courul_ix ON mdl_competency_coursecomp (courseid, ruleoutcome)
	;
	CREATE UNIQUE INDEX mdl_compcour_coucom_uix ON mdl_competency_coursecomp (courseid, competencyid)
	;
	CREATE INDEX mdl_compcour_cou2_ix ON mdl_competency_coursecomp (courseid)
	;
	CREATE INDEX mdl_compcour_com_ix ON mdl_competency_coursecomp (competencyid)
	;
	CREATE TABLE mdl_competency_plan (
	    id BIGSERIAL,
	    name VARCHAR(100) NOT NULL DEFAULT '',
	    description TEXT,
	    descriptionformat SMALLINT NOT NULL DEFAULT 0,
	    userid BIGINT NOT NULL,
	    templateid BIGINT,
	    origtemplateid BIGINT,
	    status SMALLINT NOT NULL,
	    duedate BIGINT DEFAULT 0,
	    reviewerid BIGINT,
	    timecreated BIGINT NOT NULL,
	    timemodified BIGINT NOT NULL DEFAULT 0,
	    usermodified BIGINT NOT NULL,
	CONSTRAINT mdl_compplan_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_competency_plan IS 'Learning plans'
	;
	CREATE INDEX mdl_compplan_usesta_ix ON mdl_competency_plan (userid, status)
	;
	CREATE INDEX mdl_compplan_tem_ix ON mdl_competency_plan (templateid)
	;
	CREATE INDEX mdl_compplan_stadue_ix ON mdl_competency_plan (status, duedate)
	;
	CREATE TABLE mdl_competency_template (
	    id BIGSERIAL,
	    shortname VARCHAR(100),
	    contextid BIGINT NOT NULL,
	    description TEXT,
	    descriptionformat SMALLINT NOT NULL DEFAULT 0,
	    visible SMALLINT NOT NULL DEFAULT 1,
	    duedate BIGINT,
	    timecreated BIGINT NOT NULL,
	    timemodified BIGINT NOT NULL,
	    usermodified BIGINT,
	CONSTRAINT mdl_comptemp_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_competency_template IS 'Learning plan templates.'
	;
	CREATE TABLE mdl_competency_templatecomp (
	    id BIGSERIAL,
	    templateid BIGINT NOT NULL,
	    competencyid BIGINT NOT NULL,
	    timecreated BIGINT NOT NULL,
	    timemodified BIGINT NOT NULL,
	    usermodified BIGINT NOT NULL,
	    sortorder BIGINT,
	CONSTRAINT mdl_comptemp_id3_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_competency_templatecomp IS 'Link a competency to a learning plan template.'
	;
	CREATE INDEX mdl_comptemp_tem_ix ON mdl_competency_templatecomp (templateid)
	;
	CREATE INDEX mdl_comptemp_com_ix ON mdl_competency_templatecomp (competencyid)
	;
	CREATE TABLE mdl_competency_templatecohort (
	    id BIGSERIAL,
	    templateid BIGINT NOT NULL,
	    cohortid BIGINT NOT NULL,
	    timecreated BIGINT NOT NULL,
	    timemodified BIGINT NOT NULL,
	    usermodified BIGINT NOT NULL,
	CONSTRAINT mdl_comptemp_id5_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_competency_templatecohort IS 'Default comment for the table, please edit me'
	;
	CREATE INDEX mdl_comptemp_tem2_ix ON mdl_competency_templatecohort (templateid)
	;
	CREATE UNIQUE INDEX mdl_comptemp_temcoh_uix ON mdl_competency_templatecohort (templateid, cohortid)
	;
	CREATE TABLE mdl_competency_relatedcomp (
	    id BIGSERIAL,
	    competencyid BIGINT NOT NULL,
	    relatedcompetencyid BIGINT NOT NULL,
	    timecreated BIGINT NOT NULL,
	    timemodified BIGINT,
	    usermodified BIGINT NOT NULL,
	CONSTRAINT mdl_comprela_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_competency_relatedcomp IS 'Related competencies'
	;
	CREATE TABLE mdl_competency_usercomp (
	    id BIGSERIAL,
	    userid BIGINT NOT NULL,
	    competencyid BIGINT NOT NULL,
	    status SMALLINT NOT NULL DEFAULT 0,
	    reviewerid BIGINT,
	    proficiency SMALLINT,
	    grade BIGINT,
	    timecreated BIGINT NOT NULL,
	    timemodified BIGINT,
	    usermodified BIGINT NOT NULL,
	CONSTRAINT mdl_compuser_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_competency_usercomp IS 'User competencies'
	;
	CREATE UNIQUE INDEX mdl_compuser_usecom_uix ON mdl_competency_usercomp (userid, competencyid)
	;
	CREATE TABLE mdl_competency_usercompcourse (
	    id BIGSERIAL,
	    userid BIGINT NOT NULL,
	    courseid BIGINT NOT NULL,
	    competencyid BIGINT NOT NULL,
	    proficiency SMALLINT,
	    grade BIGINT,
	    timecreated BIGINT NOT NULL,
	    timemodified BIGINT,
	    usermodified BIGINT NOT NULL,
	CONSTRAINT mdl_compuser_id3_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_competency_usercompcourse IS 'User competencies in a course'
	;
	CREATE UNIQUE INDEX mdl_compuser_usecoucom_uix ON mdl_competency_usercompcourse (userid, courseid, competencyid)
	;
	CREATE TABLE mdl_competency_usercompplan (
	    id BIGSERIAL,
	    userid BIGINT NOT NULL,
	    competencyid BIGINT NOT NULL,
	    planid BIGINT NOT NULL,
	    proficiency SMALLINT,
	    grade BIGINT,
	    sortorder BIGINT,
	    timecreated BIGINT NOT NULL,
	    timemodified BIGINT,
	    usermodified BIGINT NOT NULL,
	CONSTRAINT mdl_compuser_id5_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_competency_usercompplan IS 'User competencies plans'
	;
	CREATE UNIQUE INDEX mdl_compuser_usecompla_uix ON mdl_competency_usercompplan (userid, competencyid, planid)
	;
	CREATE TABLE mdl_competency_plancomp (
	    id BIGSERIAL,
	    planid BIGINT NOT NULL,
	    competencyid BIGINT NOT NULL,
	    sortorder BIGINT,
	    timecreated BIGINT NOT NULL,
	    timemodified BIGINT,
	    usermodified BIGINT NOT NULL,
	CONSTRAINT mdl_compplan_id3_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_competency_plancomp IS 'Plan competencies'
	;
	CREATE UNIQUE INDEX mdl_compplan_placom_uix ON mdl_competency_plancomp (planid, competencyid)
	;
	CREATE TABLE mdl_competency_evidence (
	    id BIGSERIAL,
	    usercompetencyid BIGINT NOT NULL,
	    contextid BIGINT NOT NULL,
	    action SMALLINT NOT NULL,
	    actionuserid BIGINT,
	    descidentifier VARCHAR(255) NOT NULL DEFAULT '',
	    desccomponent VARCHAR(255) NOT NULL DEFAULT '',
	    desca TEXT,
	    url VARCHAR(255),
	    grade BIGINT,
	    note TEXT,
	    timecreated BIGINT NOT NULL,
	    timemodified BIGINT NOT NULL,
	    usermodified BIGINT NOT NULL,
	CONSTRAINT mdl_compevid_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_competency_evidence IS 'The evidence linked to a user competency'
	;
	CREATE INDEX mdl_compevid_use_ix ON mdl_competency_evidence (usercompetencyid)
	;
	CREATE TABLE mdl_competency_userevidence (
	    id BIGSERIAL,
	    userid BIGINT NOT NULL,
	    name VARCHAR(100) NOT NULL DEFAULT '',
	    description TEXT NOT NULL,
	    descriptionformat SMALLINT NOT NULL,
	    url TEXT NOT NULL,
	    timecreated BIGINT NOT NULL,
	    timemodified BIGINT NOT NULL,
	    usermodified BIGINT NOT NULL,
	CONSTRAINT mdl_compuser_id7_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_competency_userevidence IS 'The evidence of prior learning'
	;
	CREATE INDEX mdl_compuser_use_ix ON mdl_competency_userevidence (userid)
	;
	CREATE TABLE mdl_competency_userevidencecomp (
	    id BIGSERIAL,
	    userevidenceid BIGINT NOT NULL,
	    competencyid BIGINT NOT NULL,
	    timecreated BIGINT NOT NULL,
	    timemodified BIGINT NOT NULL,
	    usermodified BIGINT NOT NULL,
	CONSTRAINT mdl_compuser_id9_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_competency_userevidencecomp IS 'Relationship between user evidence and competencies'
	;
	CREATE INDEX mdl_compuser_use2_ix ON mdl_competency_userevidencecomp (userevidenceid)
	;
	CREATE UNIQUE INDEX mdl_compuser_usecom2_uix ON mdl_competency_userevidencecomp (userevidenceid, competencyid)
	;
	CREATE TABLE mdl_competency_modulecomp (
	    id BIGSERIAL,
	    cmid BIGINT NOT NULL,
	    timecreated BIGINT NOT NULL,
	    timemodified BIGINT NOT NULL,
	    usermodified BIGINT NOT NULL,
	    sortorder BIGINT NOT NULL,
	    competencyid BIGINT NOT NULL,
	    ruleoutcome SMALLINT NOT NULL,
	CONSTRAINT mdl_compmodu_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_competency_modulecomp IS 'Link a competency to a module.'
	;
	CREATE INDEX mdl_compmodu_cmirul_ix ON mdl_competency_modulecomp (cmid, ruleoutcome)
	;
	CREATE UNIQUE INDEX mdl_compmodu_cmicom_uix ON mdl_competency_modulecomp (cmid, competencyid)
	;
	CREATE INDEX mdl_compmodu_cmi_ix ON mdl_competency_modulecomp (cmid)
	;
	CREATE INDEX mdl_compmodu_com_ix ON mdl_competency_modulecomp (competencyid)
	;
	CREATE TABLE mdl_oauth2_endpoint (
	    id BIGSERIAL,
	    timecreated BIGINT NOT NULL,
	    timemodified BIGINT NOT NULL,
	    usermodified BIGINT NOT NULL,
	    name VARCHAR(255) NOT NULL DEFAULT '',
	    url TEXT NOT NULL,
	    issuerid BIGINT NOT NULL,
	CONSTRAINT mdl_oautendp_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_oauth2_endpoint IS 'Describes the named endpoint for an oauth2 service.'
	;
	CREATE INDEX mdl_oautendp_iss_ix ON mdl_oauth2_endpoint (issuerid)
	;
	CREATE TABLE mdl_oauth2_issuer (
	    id BIGSERIAL,
	    timecreated BIGINT NOT NULL,
	    timemodified BIGINT NOT NULL,
	    usermodified BIGINT NOT NULL,
	    name VARCHAR(255) NOT NULL DEFAULT '',
	    image TEXT NOT NULL,
	    baseurl TEXT NOT NULL,
	    clientid TEXT NOT NULL,
	    clientsecret TEXT NOT NULL,
	    loginscopes TEXT NOT NULL,
	    loginscopesoffline TEXT NOT NULL,
	    loginparams TEXT NOT NULL,
	    loginparamsoffline TEXT NOT NULL,
	    alloweddomains TEXT NOT NULL,
	    scopessupported TEXT,
	    enabled SMALLINT NOT NULL DEFAULT 1,
	    showonloginpage SMALLINT NOT NULL DEFAULT 1,
	    basicauth SMALLINT NOT NULL DEFAULT 0,
	    sortorder BIGINT NOT NULL,
	    requireconfirmation SMALLINT NOT NULL DEFAULT 1,
	CONSTRAINT mdl_oautissu_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_oauth2_issuer IS 'Details for an oauth 2 connect identity issuer.'
	;
	CREATE TABLE mdl_oauth2_system_account (
	    id BIGSERIAL,
	    timecreated BIGINT NOT NULL,
	    timemodified BIGINT NOT NULL,
	    usermodified BIGINT NOT NULL,
	    issuerid BIGINT NOT NULL,
	    refreshtoken TEXT NOT NULL,
	    grantedscopes TEXT NOT NULL,
	    email TEXT,
	    username TEXT NOT NULL,
	CONSTRAINT mdl_oautsystacco_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_oauth2_system_account IS 'Stored details used to get an access token as a system user for this oauth2 service.'
	;
	CREATE UNIQUE INDEX mdl_oautsystacco_iss_uix ON mdl_oauth2_system_account (issuerid)
	;
	CREATE TABLE mdl_oauth2_user_field_mapping (
	    id BIGSERIAL,
	    timemodified BIGINT NOT NULL,
	    timecreated BIGINT NOT NULL,
	    usermodified BIGINT NOT NULL,
	    issuerid BIGINT NOT NULL,
	    externalfield VARCHAR(64) NOT NULL DEFAULT '',
	    internalfield VARCHAR(64) NOT NULL DEFAULT '',
	CONSTRAINT mdl_oautuserfielmapp_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_oauth2_user_field_mapping IS 'Mapping of oauth user fields to moodle fields.'
	;
	CREATE INDEX mdl_oautuserfielmapp_iss_ix ON mdl_oauth2_user_field_mapping (issuerid)
	;
	CREATE UNIQUE INDEX mdl_oautuserfielmapp_issin_uix ON mdl_oauth2_user_field_mapping (issuerid, internalfield)
	;
	CREATE TABLE mdl_course_completion_defaults (
	    id BIGSERIAL,
	    course BIGINT NOT NULL,
	    module BIGINT NOT NULL,
	    completion SMALLINT NOT NULL DEFAULT 0,
	    completionview SMALLINT NOT NULL DEFAULT 0,
	    completionusegrade SMALLINT NOT NULL DEFAULT 0,
	    completionexpected BIGINT NOT NULL DEFAULT 0,
	    customrules TEXT,
	CONSTRAINT mdl_courcompdefa_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_course_completion_defaults IS 'Default settings for activities completion'
	;
	CREATE UNIQUE INDEX mdl_courcompdefa_coumod_uix ON mdl_course_completion_defaults (course, module)
	;
	CREATE INDEX mdl_courcompdefa_mod_ix ON mdl_course_completion_defaults (module)
	;
	CREATE INDEX mdl_courcompdefa_cou_ix ON mdl_course_completion_defaults (course)
	;
	CREATE TABLE mdl_analytics_models (
	    id BIGSERIAL,
	    enabled SMALLINT NOT NULL DEFAULT 0,
	    trained SMALLINT NOT NULL DEFAULT 0,
	    target VARCHAR(255) NOT NULL DEFAULT '',
	    indicators TEXT NOT NULL,
	    timesplitting VARCHAR(255),
	    version BIGINT NOT NULL,
	    timecreated BIGINT,
	    timemodified BIGINT NOT NULL,
	    usermodified BIGINT NOT NULL,
	CONSTRAINT mdl_analmode_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_analytics_models IS 'Analytic models.'
	;
	CREATE INDEX mdl_analmode_enatra_ix ON mdl_analytics_models (enabled, trained)
	;
	CREATE TABLE mdl_analytics_models_log (
	    id BIGSERIAL,
	    modelid BIGINT NOT NULL,
	    version BIGINT NOT NULL,
	    target VARCHAR(255) NOT NULL DEFAULT '',
	    indicators TEXT NOT NULL,
	    timesplitting VARCHAR(255),
	    score NUMERIC(10,5) NOT NULL DEFAULT 0,
	    info TEXT,
	    dir TEXT NOT NULL,
	    timecreated BIGINT NOT NULL,
	    usermodified BIGINT NOT NULL,
	CONSTRAINT mdl_analmodelog_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_analytics_models_log IS 'Analytic models changes during evaluation.'
	;
	CREATE INDEX mdl_analmodelog_mod_ix ON mdl_analytics_models_log (modelid)
	;
	CREATE TABLE mdl_analytics_predictions (
	    id BIGSERIAL,
	    modelid BIGINT NOT NULL,
	    contextid BIGINT NOT NULL,
	    sampleid BIGINT NOT NULL,
	    rangeindex INTEGER NOT NULL,
	    prediction NUMERIC(10,2) NOT NULL,
	    predictionscore NUMERIC(10,5) NOT NULL,
	    calculations TEXT NOT NULL,
	    timecreated BIGINT NOT NULL DEFAULT 0,
	    timestart BIGINT,
	    timeend BIGINT,
	CONSTRAINT mdl_analpred_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_analytics_predictions IS 'Predictions'
	;
	CREATE INDEX mdl_analpred_modcon_ix ON mdl_analytics_predictions (modelid, contextid)
	;
	CREATE INDEX mdl_analpred_mod_ix ON mdl_analytics_predictions (modelid)
	;
	CREATE INDEX mdl_analpred_con_ix ON mdl_analytics_predictions (contextid)
	;
	CREATE TABLE mdl_analytics_train_samples (
	    id BIGSERIAL,
	    modelid BIGINT NOT NULL,
	    analysableid BIGINT NOT NULL,
	    timesplitting VARCHAR(255) NOT NULL DEFAULT '',
	    fileid BIGINT NOT NULL,
	    sampleids TEXT NOT NULL,
	    timecreated BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_analtraisamp_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_analytics_train_samples IS 'Samples used for training'
	;
	CREATE INDEX mdl_analtraisamp_modanatim_ix ON mdl_analytics_train_samples (modelid, analysableid, timesplitting)
	;
	CREATE INDEX mdl_analtraisamp_mod_ix ON mdl_analytics_train_samples (modelid)
	;
	CREATE INDEX mdl_analtraisamp_fil_ix ON mdl_analytics_train_samples (fileid)
	;
	CREATE TABLE mdl_analytics_predict_samples (
	    id BIGSERIAL,
	    modelid BIGINT NOT NULL,
	    analysableid BIGINT NOT NULL,
	    timesplitting VARCHAR(255) NOT NULL DEFAULT '',
	    rangeindex BIGINT NOT NULL,
	    sampleids TEXT NOT NULL,
	    timecreated BIGINT NOT NULL DEFAULT 0,
	    timemodified BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_analpredsamp_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_analytics_predict_samples IS 'Samples already used for predictions.'
	;
	CREATE INDEX mdl_analpredsamp_modanatimr_ix ON mdl_analytics_predict_samples (modelid, analysableid, timesplitting, rangeindex)
	;
	CREATE INDEX mdl_analpredsamp_mod_ix ON mdl_analytics_predict_samples (modelid)
	;
	CREATE TABLE mdl_analytics_used_files (
	    id BIGSERIAL,
	    modelid BIGINT NOT NULL DEFAULT 0,
	    fileid BIGINT NOT NULL DEFAULT 0,
	    action VARCHAR(50) NOT NULL DEFAULT '',
	    time BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_analusedfile_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_analytics_used_files IS 'Files that have already been used for training and prediction.'
	;
	CREATE INDEX mdl_analusedfile_modactfil_ix ON mdl_analytics_used_files (modelid, action, fileid)
	;
	CREATE INDEX mdl_analusedfile_mod_ix ON mdl_analytics_used_files (modelid)
	;
	CREATE INDEX mdl_analusedfile_fil_ix ON mdl_analytics_used_files (fileid)
	;
	CREATE TABLE mdl_analytics_indicator_calc (
	    id BIGSERIAL,
	    starttime BIGINT NOT NULL,
	    endtime BIGINT NOT NULL,
	    contextid BIGINT NOT NULL,
	    sampleorigin VARCHAR(255) NOT NULL DEFAULT '',
	    sampleid BIGINT NOT NULL,
	    indicator VARCHAR(255) NOT NULL DEFAULT '',
	    value NUMERIC(10,2),
	    timecreated BIGINT NOT NULL,
	CONSTRAINT mdl_analindicalc_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_analytics_indicator_calc IS 'Stored indicator calculations'
	;
	CREATE INDEX mdl_analindicalc_staendcon_ix ON mdl_analytics_indicator_calc (starttime, endtime, contextid)
	;
	CREATE INDEX mdl_analindicalc_con_ix ON mdl_analytics_indicator_calc (contextid)
	;
	CREATE TABLE mdl_analytics_prediction_actions (
	    id BIGSERIAL,
	    predictionid BIGINT NOT NULL,
	    userid BIGINT NOT NULL,
	    actionname VARCHAR(255) NOT NULL DEFAULT '',
	    timecreated BIGINT NOT NULL,
	CONSTRAINT mdl_analpredacti_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_analytics_prediction_actions IS 'Register of user actions over predictions.'
	;
	CREATE INDEX mdl_analpredacti_preuseact_ix ON mdl_analytics_prediction_actions (predictionid, userid, actionname)
	;
	CREATE INDEX mdl_analpredacti_pre_ix ON mdl_analytics_prediction_actions (predictionid)
	;
	CREATE INDEX mdl_analpredacti_use_ix ON mdl_analytics_prediction_actions (userid)
	;
	CREATE TABLE mdl_analytics_used_analysables (
	    id BIGSERIAL,
	    modelid BIGINT NOT NULL,
	    action VARCHAR(50) NOT NULL DEFAULT '',
	    analysableid BIGINT NOT NULL,
	    timeanalysed BIGINT NOT NULL,
	CONSTRAINT mdl_analusedanal_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_analytics_used_analysables IS 'List of analysables used by each model'
	;
	CREATE INDEX mdl_analusedanal_modact_ix ON mdl_analytics_used_analysables (modelid, action)
	;
	CREATE INDEX mdl_analusedanal_mod_ix ON mdl_analytics_used_analysables (modelid)
	;
	CREATE TABLE mdl_search_index_requests (
	    id BIGSERIAL,
	    contextid BIGINT NOT NULL,
	    searcharea VARCHAR(255) NOT NULL DEFAULT '',
	    timerequested BIGINT NOT NULL,
	    partialarea VARCHAR(255) NOT NULL DEFAULT '',
	    partialtime BIGINT NOT NULL,
	    indexpriority BIGINT NOT NULL,
	CONSTRAINT mdl_searinderequ_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_search_index_requests IS 'Records requests for (re)indexing of specific contexts. Entries will be removed from this table when indexing of that context is complete. (This table is not used for normal time-based indexing of new content.)'
	;
	CREATE INDEX mdl_searinderequ_indtim_ix ON mdl_search_index_requests (indexpriority, timerequested)
	;
	CREATE INDEX mdl_searinderequ_con_ix ON mdl_search_index_requests (contextid)
	; COMMIT
LOG:  DDL LOCK TRACE: acquiring in mode <write_lock> for (bdr (6678401888864649257,1,16384,)) [tracelevel=statement]
STATEMENT:  BEGIN ISOLATION LEVEL SERIALIZABLE;
	ALTER SEQUENCE mdl_course_id_seq RESTART WITH 2
	; COMMIT
LOG:  DDL LOCK TRACE: acquiring in mode <ddl_lock> for (bdr (6678401888864649257,1,16384,)) [tracelevel=statement]
STATEMENT:  BEGIN ISOLATION LEVEL SERIALIZABLE;
	CREATE TABLE mdl_question_calculated (
	    id BIGSERIAL,
	    question BIGINT NOT NULL DEFAULT 0,
	    answer BIGINT NOT NULL DEFAULT 0,
	    tolerance VARCHAR(20) NOT NULL DEFAULT '0.0',
	    tolerancetype BIGINT NOT NULL DEFAULT 1,
	    correctanswerlength BIGINT NOT NULL DEFAULT 2,
	    correctanswerformat BIGINT NOT NULL DEFAULT 2,
	CONSTRAINT mdl_quescalc_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_question_calculated IS 'Options for questions of type calculated'
	;
	CREATE INDEX mdl_quescalc_ans_ix ON mdl_question_calculated (answer)
	;
	CREATE INDEX mdl_quescalc_que_ix ON mdl_question_calculated (question)
	;
	CREATE TABLE mdl_question_calculated_options (
	    id BIGSERIAL,
	    question BIGINT NOT NULL DEFAULT 0,
	    synchronize SMALLINT NOT NULL DEFAULT 0,
	    single SMALLINT NOT NULL DEFAULT 0,
	    shuffleanswers SMALLINT NOT NULL DEFAULT 0,
	    correctfeedback TEXT,
	    correctfeedbackformat SMALLINT NOT NULL DEFAULT 0,
	    partiallycorrectfeedback TEXT,
	    partiallycorrectfeedbackformat SMALLINT NOT NULL DEFAULT 0,
	    incorrectfeedback TEXT,
	    incorrectfeedbackformat SMALLINT NOT NULL DEFAULT 0,
	    answernumbering VARCHAR(10) NOT NULL DEFAULT 'abc',
	    shownumcorrect SMALLINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_quescalcopti_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_question_calculated_options IS 'Options for questions of type calculated'
	;
	CREATE INDEX mdl_quescalcopti_que_ix ON mdl_question_calculated_options (question)
	;
	CREATE TABLE mdl_question_dataset_definitions (
	    id BIGSERIAL,
	    category BIGINT NOT NULL DEFAULT 0,
	    name VARCHAR(255) NOT NULL DEFAULT '',
	    type BIGINT NOT NULL DEFAULT 0,
	    options VARCHAR(255) NOT NULL DEFAULT '',
	    itemcount BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_quesdatadefi_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_question_dataset_definitions IS 'Organises and stores properties for dataset items'
	;
	CREATE INDEX mdl_quesdatadefi_cat_ix ON mdl_question_dataset_definitions (category)
	;
	CREATE TABLE mdl_question_dataset_items (
	    id BIGSERIAL,
	    definition BIGINT NOT NULL DEFAULT 0,
	    itemnumber BIGINT NOT NULL DEFAULT 0,
	    value VARCHAR(255) NOT NULL DEFAULT '',
	CONSTRAINT mdl_quesdataitem_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_question_dataset_items IS 'Individual dataset items'
	;
	CREATE INDEX mdl_quesdataitem_def_ix ON mdl_question_dataset_items (definition)
	;
	CREATE TABLE mdl_question_datasets (
	    id BIGSERIAL,
	    question BIGINT NOT NULL DEFAULT 0,
	    datasetdefinition BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_quesdata_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_question_datasets IS 'Many-many relation between questions and dataset definitions'
	;
	CREATE INDEX mdl_quesdata_quedat_ix ON mdl_question_datasets (question, datasetdefinition)
	;
	CREATE INDEX mdl_quesdata_que_ix ON mdl_question_datasets (question)
	;
	CREATE INDEX mdl_quesdata_dat_ix ON mdl_question_datasets (datasetdefinition)
	; COMMIT
LOG:  DDL LOCK TRACE: acquiring in mode <write_lock> (upgrading from <ddl_lock>) for (bdr (6678401888864649257,1,16384,)) [tracelevel=statement]
STATEMENT:  BEGIN ISOLATION LEVEL SERIALIZABLE;
	CREATE TABLE mdl_question_calculated (
	    id BIGSERIAL,
	    question BIGINT NOT NULL DEFAULT 0,
	    answer BIGINT NOT NULL DEFAULT 0,
	    tolerance VARCHAR(20) NOT NULL DEFAULT '0.0',
	    tolerancetype BIGINT NOT NULL DEFAULT 1,
	    correctanswerlength BIGINT NOT NULL DEFAULT 2,
	    correctanswerformat BIGINT NOT NULL DEFAULT 2,
	CONSTRAINT mdl_quescalc_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_question_calculated IS 'Options for questions of type calculated'
	;
	CREATE INDEX mdl_quescalc_ans_ix ON mdl_question_calculated (answer)
	;
	CREATE INDEX mdl_quescalc_que_ix ON mdl_question_calculated (question)
	;
	CREATE TABLE mdl_question_calculated_options (
	    id BIGSERIAL,
	    question BIGINT NOT NULL DEFAULT 0,
	    synchronize SMALLINT NOT NULL DEFAULT 0,
	    single SMALLINT NOT NULL DEFAULT 0,
	    shuffleanswers SMALLINT NOT NULL DEFAULT 0,
	    correctfeedback TEXT,
	    correctfeedbackformat SMALLINT NOT NULL DEFAULT 0,
	    partiallycorrectfeedback TEXT,
	    partiallycorrectfeedbackformat SMALLINT NOT NULL DEFAULT 0,
	    incorrectfeedback TEXT,
	    incorrectfeedbackformat SMALLINT NOT NULL DEFAULT 0,
	    answernumbering VARCHAR(10) NOT NULL DEFAULT 'abc',
	    shownumcorrect SMALLINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_quescalcopti_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_question_calculated_options IS 'Options for questions of type calculated'
	;
	CREATE INDEX mdl_quescalcopti_que_ix ON mdl_question_calculated_options (question)
	;
	CREATE TABLE mdl_question_dataset_definitions (
	    id BIGSERIAL,
	    category BIGINT NOT NULL DEFAULT 0,
	    name VARCHAR(255) NOT NULL DEFAULT '',
	    type BIGINT NOT NULL DEFAULT 0,
	    options VARCHAR(255) NOT NULL DEFAULT '',
	    itemcount BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_quesdatadefi_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_question_dataset_definitions IS 'Organises and stores properties for dataset items'
	;
	CREATE INDEX mdl_quesdatadefi_cat_ix ON mdl_question_dataset_definitions (category)
	;
	CREATE TABLE mdl_question_dataset_items (
	    id BIGSERIAL,
	    definition BIGINT NOT NULL DEFAULT 0,
	    itemnumber BIGINT NOT NULL DEFAULT 0,
	    value VARCHAR(255) NOT NULL DEFAULT '',
	CONSTRAINT mdl_quesdataitem_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_question_dataset_items IS 'Individual dataset items'
	;
	CREATE INDEX mdl_quesdataitem_def_ix ON mdl_question_dataset_items (definition)
	;
	CREATE TABLE mdl_question_datasets (
	    id BIGSERIAL,
	    question BIGINT NOT NULL DEFAULT 0,
	    datasetdefinition BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_quesdata_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_question_datasets IS 'Many-many relation between questions and dataset definitions'
	;
	CREATE INDEX mdl_quesdata_quedat_ix ON mdl_question_datasets (question, datasetdefinition)
	;
	CREATE INDEX mdl_quesdata_que_ix ON mdl_question_datasets (question)
	;
	CREATE INDEX mdl_quesdata_dat_ix ON mdl_question_datasets (datasetdefinition)
	; COMMIT
LOG:  DDL LOCK TRACE: acquiring in mode <ddl_lock> for (bdr (6678401888864649257,1,16384,)) [tracelevel=statement]
STATEMENT:  BEGIN ISOLATION LEVEL SERIALIZABLE;
	CREATE TABLE mdl_qtype_ddimageortext (
	    id BIGSERIAL,
	    questionid BIGINT NOT NULL DEFAULT 0,
	    shuffleanswers SMALLINT NOT NULL DEFAULT 1,
	    correctfeedback TEXT NOT NULL,
	    correctfeedbackformat SMALLINT NOT NULL DEFAULT 0,
	    partiallycorrectfeedback TEXT NOT NULL,
	    partiallycorrectfeedbackformat SMALLINT NOT NULL DEFAULT 0,
	    incorrectfeedback TEXT NOT NULL,
	    incorrectfeedbackformat SMALLINT NOT NULL DEFAULT 0,
	    shownumcorrect SMALLINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_qtypddim_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_qtype_ddimageortext IS 'Defines drag and drop (text or images onto a background image) questions'
	;
	CREATE INDEX mdl_qtypddim_que_ix ON mdl_qtype_ddimageortext (questionid)
	;
	CREATE TABLE mdl_qtype_ddimageortext_drops (
	    id BIGSERIAL,
	    questionid BIGINT NOT NULL DEFAULT 0,
	    no BIGINT NOT NULL DEFAULT 0,
	    xleft BIGINT NOT NULL DEFAULT 0,
	    ytop BIGINT NOT NULL DEFAULT 0,
	    choice BIGINT NOT NULL DEFAULT 0,
	    label TEXT NOT NULL,
	CONSTRAINT mdl_qtypddimdrop_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_qtype_ddimageortext_drops IS 'Drop boxes'
	;
	CREATE INDEX mdl_qtypddimdrop_que_ix ON mdl_qtype_ddimageortext_drops (questionid)
	;
	CREATE TABLE mdl_qtype_ddimageortext_drags (
	    id BIGSERIAL,
	    questionid BIGINT NOT NULL DEFAULT 0,
	    no BIGINT NOT NULL DEFAULT 0,
	    draggroup BIGINT NOT NULL DEFAULT 0,
	    infinite SMALLINT NOT NULL DEFAULT 0,
	    label TEXT NOT NULL,
	CONSTRAINT mdl_qtypddimdrag_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_qtype_ddimageortext_drags IS 'Images to drag. Actual file names are not stored here we use the file names as found in the file storage area.'
	;
	CREATE INDEX mdl_qtypddimdrag_que_ix ON mdl_qtype_ddimageortext_drags (questionid)
	; COMMIT
LOG:  DDL LOCK TRACE: acquiring in mode <write_lock> (upgrading from <ddl_lock>) for (bdr (6678401888864649257,1,16384,)) [tracelevel=statement]
STATEMENT:  BEGIN ISOLATION LEVEL SERIALIZABLE;
	CREATE TABLE mdl_qtype_ddimageortext (
	    id BIGSERIAL,
	    questionid BIGINT NOT NULL DEFAULT 0,
	    shuffleanswers SMALLINT NOT NULL DEFAULT 1,
	    correctfeedback TEXT NOT NULL,
	    correctfeedbackformat SMALLINT NOT NULL DEFAULT 0,
	    partiallycorrectfeedback TEXT NOT NULL,
	    partiallycorrectfeedbackformat SMALLINT NOT NULL DEFAULT 0,
	    incorrectfeedback TEXT NOT NULL,
	    incorrectfeedbackformat SMALLINT NOT NULL DEFAULT 0,
	    shownumcorrect SMALLINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_qtypddim_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_qtype_ddimageortext IS 'Defines drag and drop (text or images onto a background image) questions'
	;
	CREATE INDEX mdl_qtypddim_que_ix ON mdl_qtype_ddimageortext (questionid)
	;
	CREATE TABLE mdl_qtype_ddimageortext_drops (
	    id BIGSERIAL,
	    questionid BIGINT NOT NULL DEFAULT 0,
	    no BIGINT NOT NULL DEFAULT 0,
	    xleft BIGINT NOT NULL DEFAULT 0,
	    ytop BIGINT NOT NULL DEFAULT 0,
	    choice BIGINT NOT NULL DEFAULT 0,
	    label TEXT NOT NULL,
	CONSTRAINT mdl_qtypddimdrop_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_qtype_ddimageortext_drops IS 'Drop boxes'
	;
	CREATE INDEX mdl_qtypddimdrop_que_ix ON mdl_qtype_ddimageortext_drops (questionid)
	;
	CREATE TABLE mdl_qtype_ddimageortext_drags (
	    id BIGSERIAL,
	    questionid BIGINT NOT NULL DEFAULT 0,
	    no BIGINT NOT NULL DEFAULT 0,
	    draggroup BIGINT NOT NULL DEFAULT 0,
	    infinite SMALLINT NOT NULL DEFAULT 0,
	    label TEXT NOT NULL,
	CONSTRAINT mdl_qtypddimdrag_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_qtype_ddimageortext_drags IS 'Images to drag. Actual file names are not stored here we use the file names as found in the file storage area.'
	;
	CREATE INDEX mdl_qtypddimdrag_que_ix ON mdl_qtype_ddimageortext_drags (questionid)
	; COMMIT
LOG:  DDL LOCK TRACE: acquiring in mode <ddl_lock> for (bdr (6678401888864649257,1,16384,)) [tracelevel=statement]
STATEMENT:  BEGIN ISOLATION LEVEL SERIALIZABLE;
	CREATE TABLE mdl_qtype_ddmarker (
	    id BIGSERIAL,
	    questionid BIGINT NOT NULL DEFAULT 0,
	    shuffleanswers SMALLINT NOT NULL DEFAULT 1,
	    correctfeedback TEXT NOT NULL,
	    correctfeedbackformat SMALLINT NOT NULL DEFAULT 0,
	    partiallycorrectfeedback TEXT NOT NULL,
	    partiallycorrectfeedbackformat SMALLINT NOT NULL DEFAULT 0,
	    incorrectfeedback TEXT NOT NULL,
	    incorrectfeedbackformat SMALLINT NOT NULL DEFAULT 0,
	    shownumcorrect SMALLINT NOT NULL DEFAULT 0,
	    showmisplaced SMALLINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_qtypddma_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_qtype_ddmarker IS 'Defines drag and drop (text or images onto a background image) questions'
	;
	CREATE INDEX mdl_qtypddma_que_ix ON mdl_qtype_ddmarker (questionid)
	;
	CREATE TABLE mdl_qtype_ddmarker_drops (
	    id BIGSERIAL,
	    questionid BIGINT NOT NULL DEFAULT 0,
	    no BIGINT NOT NULL DEFAULT 0,
	    shape VARCHAR(255),
	    coords TEXT NOT NULL,
	    choice BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_qtypddmadrop_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_qtype_ddmarker_drops IS 'drop regions'
	;
	CREATE INDEX mdl_qtypddmadrop_que_ix ON mdl_qtype_ddmarker_drops (questionid)
	;
	CREATE TABLE mdl_qtype_ddmarker_drags (
	    id BIGSERIAL,
	    questionid BIGINT NOT NULL DEFAULT 0,
	    no BIGINT NOT NULL DEFAULT 0,
	    label TEXT NOT NULL,
	    infinite SMALLINT NOT NULL DEFAULT 0,
	    noofdrags BIGINT NOT NULL DEFAULT 1,
	CONSTRAINT mdl_qtypddmadrag_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_qtype_ddmarker_drags IS 'Labels for markers to drag.'
	;
	CREATE INDEX mdl_qtypddmadrag_que_ix ON mdl_qtype_ddmarker_drags (questionid)
	; COMMIT
LOG:  DDL LOCK TRACE: acquiring in mode <write_lock> (upgrading from <ddl_lock>) for (bdr (6678401888864649257,1,16384,)) [tracelevel=statement]
STATEMENT:  BEGIN ISOLATION LEVEL SERIALIZABLE;
	CREATE TABLE mdl_qtype_ddmarker (
	    id BIGSERIAL,
	    questionid BIGINT NOT NULL DEFAULT 0,
	    shuffleanswers SMALLINT NOT NULL DEFAULT 1,
	    correctfeedback TEXT NOT NULL,
	    correctfeedbackformat SMALLINT NOT NULL DEFAULT 0,
	    partiallycorrectfeedback TEXT NOT NULL,
	    partiallycorrectfeedbackformat SMALLINT NOT NULL DEFAULT 0,
	    incorrectfeedback TEXT NOT NULL,
	    incorrectfeedbackformat SMALLINT NOT NULL DEFAULT 0,
	    shownumcorrect SMALLINT NOT NULL DEFAULT 0,
	    showmisplaced SMALLINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_qtypddma_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_qtype_ddmarker IS 'Defines drag and drop (text or images onto a background image) questions'
	;
	CREATE INDEX mdl_qtypddma_que_ix ON mdl_qtype_ddmarker (questionid)
	;
	CREATE TABLE mdl_qtype_ddmarker_drops (
	    id BIGSERIAL,
	    questionid BIGINT NOT NULL DEFAULT 0,
	    no BIGINT NOT NULL DEFAULT 0,
	    shape VARCHAR(255),
	    coords TEXT NOT NULL,
	    choice BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_qtypddmadrop_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_qtype_ddmarker_drops IS 'drop regions'
	;
	CREATE INDEX mdl_qtypddmadrop_que_ix ON mdl_qtype_ddmarker_drops (questionid)
	;
	CREATE TABLE mdl_qtype_ddmarker_drags (
	    id BIGSERIAL,
	    questionid BIGINT NOT NULL DEFAULT 0,
	    no BIGINT NOT NULL DEFAULT 0,
	    label TEXT NOT NULL,
	    infinite SMALLINT NOT NULL DEFAULT 0,
	    noofdrags BIGINT NOT NULL DEFAULT 1,
	CONSTRAINT mdl_qtypddmadrag_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_qtype_ddmarker_drags IS 'Labels for markers to drag.'
	;
	CREATE INDEX mdl_qtypddmadrag_que_ix ON mdl_qtype_ddmarker_drags (questionid)
	; COMMIT
LOG:  DDL LOCK TRACE: acquiring in mode <ddl_lock> for (bdr (6678401888864649257,1,16384,)) [tracelevel=statement]
STATEMENT:  BEGIN ISOLATION LEVEL SERIALIZABLE;
	CREATE TABLE mdl_question_ddwtos (
	    id BIGSERIAL,
	    questionid BIGINT NOT NULL DEFAULT 0,
	    shuffleanswers SMALLINT NOT NULL DEFAULT 1,
	    correctfeedback TEXT NOT NULL,
	    correctfeedbackformat SMALLINT NOT NULL DEFAULT 0,
	    partiallycorrectfeedback TEXT NOT NULL,
	    partiallycorrectfeedbackformat SMALLINT NOT NULL DEFAULT 0,
	    incorrectfeedback TEXT NOT NULL,
	    incorrectfeedbackformat SMALLINT NOT NULL DEFAULT 0,
	    shownumcorrect SMALLINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_quesddwt_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_question_ddwtos IS 'Defines drag and drop (words into sentences) questions'
	;
	CREATE INDEX mdl_quesddwt_que_ix ON mdl_question_ddwtos (questionid)
	; COMMIT
LOG:  DDL LOCK TRACE: acquiring in mode <write_lock> (upgrading from <ddl_lock>) for (bdr (6678401888864649257,1,16384,)) [tracelevel=statement]
STATEMENT:  BEGIN ISOLATION LEVEL SERIALIZABLE;
	CREATE TABLE mdl_question_ddwtos (
	    id BIGSERIAL,
	    questionid BIGINT NOT NULL DEFAULT 0,
	    shuffleanswers SMALLINT NOT NULL DEFAULT 1,
	    correctfeedback TEXT NOT NULL,
	    correctfeedbackformat SMALLINT NOT NULL DEFAULT 0,
	    partiallycorrectfeedback TEXT NOT NULL,
	    partiallycorrectfeedbackformat SMALLINT NOT NULL DEFAULT 0,
	    incorrectfeedback TEXT NOT NULL,
	    incorrectfeedbackformat SMALLINT NOT NULL DEFAULT 0,
	    shownumcorrect SMALLINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_quesddwt_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_question_ddwtos IS 'Defines drag and drop (words into sentences) questions'
	;
	CREATE INDEX mdl_quesddwt_que_ix ON mdl_question_ddwtos (questionid)
	; COMMIT
LOG:  DDL LOCK TRACE: acquiring in mode <ddl_lock> for (bdr (6678401888864649257,1,16384,)) [tracelevel=statement]
STATEMENT:  BEGIN ISOLATION LEVEL SERIALIZABLE;
	CREATE TABLE mdl_qtype_essay_options (
	    id BIGSERIAL,
	    questionid BIGINT NOT NULL,
	    responseformat VARCHAR(16) NOT NULL DEFAULT 'editor',
	    responserequired SMALLINT NOT NULL DEFAULT 1,
	    responsefieldlines SMALLINT NOT NULL DEFAULT 15,
	    attachments SMALLINT NOT NULL DEFAULT 0,
	    attachmentsrequired SMALLINT NOT NULL DEFAULT 0,
	    graderinfo TEXT,
	    graderinfoformat SMALLINT NOT NULL DEFAULT 0,
	    responsetemplate TEXT,
	    responsetemplateformat SMALLINT NOT NULL DEFAULT 0,
	    filetypeslist TEXT,
	CONSTRAINT mdl_qtypessaopti_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_qtype_essay_options IS 'Extra options for essay questions.'
	;
	CREATE UNIQUE INDEX mdl_qtypessaopti_que_uix ON mdl_qtype_essay_options (questionid)
	; COMMIT
LOG:  DDL LOCK TRACE: acquiring in mode <write_lock> (upgrading from <ddl_lock>) for (bdr (6678401888864649257,1,16384,)) [tracelevel=statement]
STATEMENT:  BEGIN ISOLATION LEVEL SERIALIZABLE;
	CREATE TABLE mdl_qtype_essay_options (
	    id BIGSERIAL,
	    questionid BIGINT NOT NULL,
	    responseformat VARCHAR(16) NOT NULL DEFAULT 'editor',
	    responserequired SMALLINT NOT NULL DEFAULT 1,
	    responsefieldlines SMALLINT NOT NULL DEFAULT 15,
	    attachments SMALLINT NOT NULL DEFAULT 0,
	    attachmentsrequired SMALLINT NOT NULL DEFAULT 0,
	    graderinfo TEXT,
	    graderinfoformat SMALLINT NOT NULL DEFAULT 0,
	    responsetemplate TEXT,
	    responsetemplateformat SMALLINT NOT NULL DEFAULT 0,
	    filetypeslist TEXT,
	CONSTRAINT mdl_qtypessaopti_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_qtype_essay_options IS 'Extra options for essay questions.'
	;
	CREATE UNIQUE INDEX mdl_qtypessaopti_que_uix ON mdl_qtype_essay_options (questionid)
	; COMMIT
LOG:  DDL LOCK TRACE: acquiring in mode <ddl_lock> for (bdr (6678401888864649257,1,16384,)) [tracelevel=statement]
STATEMENT:  BEGIN ISOLATION LEVEL SERIALIZABLE;
	CREATE TABLE mdl_question_gapselect (
	    id BIGSERIAL,
	    questionid BIGINT NOT NULL DEFAULT 0,
	    shuffleanswers SMALLINT NOT NULL DEFAULT 1,
	    correctfeedback TEXT NOT NULL,
	    correctfeedbackformat SMALLINT NOT NULL DEFAULT 0,
	    partiallycorrectfeedback TEXT NOT NULL,
	    partiallycorrectfeedbackformat SMALLINT NOT NULL DEFAULT 0,
	    incorrectfeedback TEXT NOT NULL,
	    incorrectfeedbackformat SMALLINT NOT NULL DEFAULT 0,
	    shownumcorrect SMALLINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_quesgaps_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_question_gapselect IS 'Defines select missing words questions'
	;
	CREATE INDEX mdl_quesgaps_que_ix ON mdl_question_gapselect (questionid)
	; COMMIT
LOG:  DDL LOCK TRACE: acquiring in mode <write_lock> (upgrading from <ddl_lock>) for (bdr (6678401888864649257,1,16384,)) [tracelevel=statement]
STATEMENT:  BEGIN ISOLATION LEVEL SERIALIZABLE;
	CREATE TABLE mdl_question_gapselect (
	    id BIGSERIAL,
	    questionid BIGINT NOT NULL DEFAULT 0,
	    shuffleanswers SMALLINT NOT NULL DEFAULT 1,
	    correctfeedback TEXT NOT NULL,
	    correctfeedbackformat SMALLINT NOT NULL DEFAULT 0,
	    partiallycorrectfeedback TEXT NOT NULL,
	    partiallycorrectfeedbackformat SMALLINT NOT NULL DEFAULT 0,
	    incorrectfeedback TEXT NOT NULL,
	    incorrectfeedbackformat SMALLINT NOT NULL DEFAULT 0,
	    shownumcorrect SMALLINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_quesgaps_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_question_gapselect IS 'Defines select missing words questions'
	;
	CREATE INDEX mdl_quesgaps_que_ix ON mdl_question_gapselect (questionid)
	; COMMIT
LOG:  DDL LOCK TRACE: acquiring in mode <ddl_lock> for (bdr (6678401888864649257,1,16384,)) [tracelevel=statement]
STATEMENT:  BEGIN ISOLATION LEVEL SERIALIZABLE;
	CREATE TABLE mdl_qtype_match_options (
	    id BIGSERIAL,
	    questionid BIGINT NOT NULL DEFAULT 0,
	    shuffleanswers SMALLINT NOT NULL DEFAULT 1,
	    correctfeedback TEXT NOT NULL,
	    correctfeedbackformat SMALLINT NOT NULL DEFAULT 0,
	    partiallycorrectfeedback TEXT NOT NULL,
	    partiallycorrectfeedbackformat SMALLINT NOT NULL DEFAULT 0,
	    incorrectfeedback TEXT NOT NULL,
	    incorrectfeedbackformat SMALLINT NOT NULL DEFAULT 0,
	    shownumcorrect SMALLINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_qtypmatcopti_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_qtype_match_options IS 'Defines the question-type specific options for matching questions'
	;
	CREATE UNIQUE INDEX mdl_qtypmatcopti_que_uix ON mdl_qtype_match_options (questionid)
	;
	CREATE TABLE mdl_qtype_match_subquestions (
	    id BIGSERIAL,
	    questionid BIGINT NOT NULL DEFAULT 0,
	    questiontext TEXT NOT NULL,
	    questiontextformat SMALLINT NOT NULL DEFAULT 0,
	    answertext VARCHAR(255) NOT NULL DEFAULT '',
	CONSTRAINT mdl_qtypmatcsubq_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_qtype_match_subquestions IS 'The subquestions that make up a matching question'
	;
	CREATE INDEX mdl_qtypmatcsubq_que_ix ON mdl_qtype_match_subquestions (questionid)
	; COMMIT
LOG:  DDL LOCK TRACE: acquiring in mode <write_lock> (upgrading from <ddl_lock>) for (bdr (6678401888864649257,1,16384,)) [tracelevel=statement]
STATEMENT:  BEGIN ISOLATION LEVEL SERIALIZABLE;
	CREATE TABLE mdl_qtype_match_options (
	    id BIGSERIAL,
	    questionid BIGINT NOT NULL DEFAULT 0,
	    shuffleanswers SMALLINT NOT NULL DEFAULT 1,
	    correctfeedback TEXT NOT NULL,
	    correctfeedbackformat SMALLINT NOT NULL DEFAULT 0,
	    partiallycorrectfeedback TEXT NOT NULL,
	    partiallycorrectfeedbackformat SMALLINT NOT NULL DEFAULT 0,
	    incorrectfeedback TEXT NOT NULL,
	    incorrectfeedbackformat SMALLINT NOT NULL DEFAULT 0,
	    shownumcorrect SMALLINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_qtypmatcopti_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_qtype_match_options IS 'Defines the question-type specific options for matching questions'
	;
	CREATE UNIQUE INDEX mdl_qtypmatcopti_que_uix ON mdl_qtype_match_options (questionid)
	;
	CREATE TABLE mdl_qtype_match_subquestions (
	    id BIGSERIAL,
	    questionid BIGINT NOT NULL DEFAULT 0,
	    questiontext TEXT NOT NULL,
	    questiontextformat SMALLINT NOT NULL DEFAULT 0,
	    answertext VARCHAR(255) NOT NULL DEFAULT '',
	CONSTRAINT mdl_qtypmatcsubq_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_qtype_match_subquestions IS 'The subquestions that make up a matching question'
	;
	CREATE INDEX mdl_qtypmatcsubq_que_ix ON mdl_qtype_match_subquestions (questionid)
	; COMMIT
LOG:  DDL LOCK TRACE: acquiring in mode <ddl_lock> for (bdr (6678401888864649257,1,16384,)) [tracelevel=statement]
STATEMENT:  BEGIN ISOLATION LEVEL SERIALIZABLE;
	CREATE TABLE mdl_question_multianswer (
	    id BIGSERIAL,
	    question BIGINT NOT NULL DEFAULT 0,
	    sequence TEXT NOT NULL,
	CONSTRAINT mdl_quesmult_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_question_multianswer IS 'Options for multianswer questions'
	;
	CREATE INDEX mdl_quesmult_que_ix ON mdl_question_multianswer (question)
	; COMMIT
LOG:  DDL LOCK TRACE: acquiring in mode <write_lock> (upgrading from <ddl_lock>) for (bdr (6678401888864649257,1,16384,)) [tracelevel=statement]
STATEMENT:  BEGIN ISOLATION LEVEL SERIALIZABLE;
	CREATE TABLE mdl_question_multianswer (
	    id BIGSERIAL,
	    question BIGINT NOT NULL DEFAULT 0,
	    sequence TEXT NOT NULL,
	CONSTRAINT mdl_quesmult_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_question_multianswer IS 'Options for multianswer questions'
	;
	CREATE INDEX mdl_quesmult_que_ix ON mdl_question_multianswer (question)
	; COMMIT
LOG:  DDL LOCK TRACE: acquiring in mode <ddl_lock> for (bdr (6678401888864649257,1,16384,)) [tracelevel=statement]
STATEMENT:  BEGIN ISOLATION LEVEL SERIALIZABLE;
	CREATE TABLE mdl_qtype_multichoice_options (
	    id BIGSERIAL,
	    questionid BIGINT NOT NULL DEFAULT 0,
	    layout SMALLINT NOT NULL DEFAULT 0,
	    single SMALLINT NOT NULL DEFAULT 0,
	    shuffleanswers SMALLINT NOT NULL DEFAULT 1,
	    correctfeedback TEXT NOT NULL,
	    correctfeedbackformat SMALLINT NOT NULL DEFAULT 0,
	    partiallycorrectfeedback TEXT NOT NULL,
	    partiallycorrectfeedbackformat SMALLINT NOT NULL DEFAULT 0,
	    incorrectfeedback TEXT NOT NULL,
	    incorrectfeedbackformat SMALLINT NOT NULL DEFAULT 0,
	    answernumbering VARCHAR(10) NOT NULL DEFAULT 'abc',
	    shownumcorrect SMALLINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_qtypmultopti_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_qtype_multichoice_options IS 'Options for multiple choice questions'
	;
	CREATE UNIQUE INDEX mdl_qtypmultopti_que_uix ON mdl_qtype_multichoice_options (questionid)
	; COMMIT
LOG:  DDL LOCK TRACE: acquiring in mode <write_lock> (upgrading from <ddl_lock>) for (bdr (6678401888864649257,1,16384,)) [tracelevel=statement]
STATEMENT:  BEGIN ISOLATION LEVEL SERIALIZABLE;
	CREATE TABLE mdl_qtype_multichoice_options (
	    id BIGSERIAL,
	    questionid BIGINT NOT NULL DEFAULT 0,
	    layout SMALLINT NOT NULL DEFAULT 0,
	    single SMALLINT NOT NULL DEFAULT 0,
	    shuffleanswers SMALLINT NOT NULL DEFAULT 1,
	    correctfeedback TEXT NOT NULL,
	    correctfeedbackformat SMALLINT NOT NULL DEFAULT 0,
	    partiallycorrectfeedback TEXT NOT NULL,
	    partiallycorrectfeedbackformat SMALLINT NOT NULL DEFAULT 0,
	    incorrectfeedback TEXT NOT NULL,
	    incorrectfeedbackformat SMALLINT NOT NULL DEFAULT 0,
	    answernumbering VARCHAR(10) NOT NULL DEFAULT 'abc',
	    shownumcorrect SMALLINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_qtypmultopti_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_qtype_multichoice_options IS 'Options for multiple choice questions'
	;
	CREATE UNIQUE INDEX mdl_qtypmultopti_que_uix ON mdl_qtype_multichoice_options (questionid)
	; COMMIT
LOG:  DDL LOCK TRACE: acquiring in mode <ddl_lock> for (bdr (6678401888864649257,1,16384,)) [tracelevel=statement]
STATEMENT:  BEGIN ISOLATION LEVEL SERIALIZABLE;
	CREATE TABLE mdl_question_numerical (
	    id BIGSERIAL,
	    question BIGINT NOT NULL DEFAULT 0,
	    answer BIGINT NOT NULL DEFAULT 0,
	    tolerance VARCHAR(255) NOT NULL DEFAULT '0.0',
	CONSTRAINT mdl_quesnume_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_question_numerical IS 'Options for numerical questions.'
	;
	CREATE INDEX mdl_quesnume_ans_ix ON mdl_question_numerical (answer)
	;
	CREATE INDEX mdl_quesnume_que_ix ON mdl_question_numerical (question)
	;
	CREATE TABLE mdl_question_numerical_options (
	    id BIGSERIAL,
	    question BIGINT NOT NULL DEFAULT 0,
	    showunits SMALLINT NOT NULL DEFAULT 0,
	    unitsleft SMALLINT NOT NULL DEFAULT 0,
	    unitgradingtype SMALLINT NOT NULL DEFAULT 0,
	    unitpenalty NUMERIC(12,7) NOT NULL DEFAULT 0.1,
	CONSTRAINT mdl_quesnumeopti_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_question_numerical_options IS 'Options for questions of type numerical This table is also used by the calculated question type'
	;
	CREATE INDEX mdl_quesnumeopti_que_ix ON mdl_question_numerical_options (question)
	;
	CREATE TABLE mdl_question_numerical_units (
	    id BIGSERIAL,
	    question BIGINT NOT NULL DEFAULT 0,
	    multiplier NUMERIC(38,19) NOT NULL DEFAULT 1.00000000000000000000,
	    unit VARCHAR(50) NOT NULL DEFAULT '',
	CONSTRAINT mdl_quesnumeunit_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_question_numerical_units IS 'Optional unit options for numerical questions. This table is also used by the calculated question type.'
	;
	CREATE UNIQUE INDEX mdl_quesnumeunit_queuni_uix ON mdl_question_numerical_units (question, unit)
	;
	CREATE INDEX mdl_quesnumeunit_que_ix ON mdl_question_numerical_units (question)
	; COMMIT
LOG:  DDL LOCK TRACE: acquiring in mode <write_lock> (upgrading from <ddl_lock>) for (bdr (6678401888864649257,1,16384,)) [tracelevel=statement]
STATEMENT:  BEGIN ISOLATION LEVEL SERIALIZABLE;
	CREATE TABLE mdl_question_numerical (
	    id BIGSERIAL,
	    question BIGINT NOT NULL DEFAULT 0,
	    answer BIGINT NOT NULL DEFAULT 0,
	    tolerance VARCHAR(255) NOT NULL DEFAULT '0.0',
	CONSTRAINT mdl_quesnume_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_question_numerical IS 'Options for numerical questions.'
	;
	CREATE INDEX mdl_quesnume_ans_ix ON mdl_question_numerical (answer)
	;
	CREATE INDEX mdl_quesnume_que_ix ON mdl_question_numerical (question)
	;
	CREATE TABLE mdl_question_numerical_options (
	    id BIGSERIAL,
	    question BIGINT NOT NULL DEFAULT 0,
	    showunits SMALLINT NOT NULL DEFAULT 0,
	    unitsleft SMALLINT NOT NULL DEFAULT 0,
	    unitgradingtype SMALLINT NOT NULL DEFAULT 0,
	    unitpenalty NUMERIC(12,7) NOT NULL DEFAULT 0.1,
	CONSTRAINT mdl_quesnumeopti_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_question_numerical_options IS 'Options for questions of type numerical This table is also used by the calculated question type'
	;
	CREATE INDEX mdl_quesnumeopti_que_ix ON mdl_question_numerical_options (question)
	;
	CREATE TABLE mdl_question_numerical_units (
	    id BIGSERIAL,
	    question BIGINT NOT NULL DEFAULT 0,
	    multiplier NUMERIC(38,19) NOT NULL DEFAULT 1.00000000000000000000,
	    unit VARCHAR(50) NOT NULL DEFAULT '',
	CONSTRAINT mdl_quesnumeunit_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_question_numerical_units IS 'Optional unit options for numerical questions. This table is also used by the calculated question type.'
	;
	CREATE UNIQUE INDEX mdl_quesnumeunit_queuni_uix ON mdl_question_numerical_units (question, unit)
	;
	CREATE INDEX mdl_quesnumeunit_que_ix ON mdl_question_numerical_units (question)
	; COMMIT
LOG:  DDL LOCK TRACE: acquiring in mode <ddl_lock> for (bdr (6678401888864649257,1,16384,)) [tracelevel=statement]
STATEMENT:  BEGIN ISOLATION LEVEL SERIALIZABLE;
	CREATE TABLE mdl_qtype_randomsamatch_options (
	    id BIGSERIAL,
	    questionid BIGINT NOT NULL DEFAULT 0,
	    choose BIGINT NOT NULL DEFAULT 4,
	    subcats SMALLINT NOT NULL DEFAULT 1,
	    correctfeedback TEXT NOT NULL,
	    correctfeedbackformat SMALLINT NOT NULL DEFAULT 0,
	    partiallycorrectfeedback TEXT NOT NULL,
	    partiallycorrectfeedbackformat SMALLINT NOT NULL DEFAULT 0,
	    incorrectfeedback TEXT NOT NULL,
	    incorrectfeedbackformat SMALLINT NOT NULL DEFAULT 0,
	    shownumcorrect SMALLINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_qtyprandopti_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_qtype_randomsamatch_options IS 'Info about a random short-answer matching question'
	;
	CREATE UNIQUE INDEX mdl_qtyprandopti_que_uix ON mdl_qtype_randomsamatch_options (questionid)
	; COMMIT
LOG:  DDL LOCK TRACE: acquiring in mode <write_lock> (upgrading from <ddl_lock>) for (bdr (6678401888864649257,1,16384,)) [tracelevel=statement]
STATEMENT:  BEGIN ISOLATION LEVEL SERIALIZABLE;
	CREATE TABLE mdl_qtype_randomsamatch_options (
	    id BIGSERIAL,
	    questionid BIGINT NOT NULL DEFAULT 0,
	    choose BIGINT NOT NULL DEFAULT 4,
	    subcats SMALLINT NOT NULL DEFAULT 1,
	    correctfeedback TEXT NOT NULL,
	    correctfeedbackformat SMALLINT NOT NULL DEFAULT 0,
	    partiallycorrectfeedback TEXT NOT NULL,
	    partiallycorrectfeedbackformat SMALLINT NOT NULL DEFAULT 0,
	    incorrectfeedback TEXT NOT NULL,
	    incorrectfeedbackformat SMALLINT NOT NULL DEFAULT 0,
	    shownumcorrect SMALLINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_qtyprandopti_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_qtype_randomsamatch_options IS 'Info about a random short-answer matching question'
	;
	CREATE UNIQUE INDEX mdl_qtyprandopti_que_uix ON mdl_qtype_randomsamatch_options (questionid)
	; COMMIT
LOG:  DDL LOCK TRACE: acquiring in mode <ddl_lock> for (bdr (6678401888864649257,1,16384,)) [tracelevel=statement]
STATEMENT:  BEGIN ISOLATION LEVEL SERIALIZABLE;
	CREATE TABLE mdl_qtype_shortanswer_options (
	    id BIGSERIAL,
	    questionid BIGINT NOT NULL DEFAULT 0,
	    usecase SMALLINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_qtypshoropti_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_qtype_shortanswer_options IS 'Options for short answer questions'
	;
	CREATE UNIQUE INDEX mdl_qtypshoropti_que_uix ON mdl_qtype_shortanswer_options (questionid)
	; COMMIT
LOG:  DDL LOCK TRACE: acquiring in mode <write_lock> (upgrading from <ddl_lock>) for (bdr (6678401888864649257,1,16384,)) [tracelevel=statement]
STATEMENT:  BEGIN ISOLATION LEVEL SERIALIZABLE;
	CREATE TABLE mdl_qtype_shortanswer_options (
	    id BIGSERIAL,
	    questionid BIGINT NOT NULL DEFAULT 0,
	    usecase SMALLINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_qtypshoropti_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_qtype_shortanswer_options IS 'Options for short answer questions'
	;
	CREATE UNIQUE INDEX mdl_qtypshoropti_que_uix ON mdl_qtype_shortanswer_options (questionid)
	; COMMIT
LOG:  DDL LOCK TRACE: acquiring in mode <ddl_lock> for (bdr (6678401888864649257,1,16384,)) [tracelevel=statement]
STATEMENT:  BEGIN ISOLATION LEVEL SERIALIZABLE;
	CREATE TABLE mdl_question_truefalse (
	    id BIGSERIAL,
	    question BIGINT NOT NULL DEFAULT 0,
	    trueanswer BIGINT NOT NULL DEFAULT 0,
	    falseanswer BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_questrue_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_question_truefalse IS 'Options for True-False questions'
	;
	CREATE INDEX mdl_questrue_que_ix ON mdl_question_truefalse (question)
	; COMMIT
LOG:  DDL LOCK TRACE: acquiring in mode <write_lock> (upgrading from <ddl_lock>) for (bdr (6678401888864649257,1,16384,)) [tracelevel=statement]
STATEMENT:  BEGIN ISOLATION LEVEL SERIALIZABLE;
	CREATE TABLE mdl_question_truefalse (
	    id BIGSERIAL,
	    question BIGINT NOT NULL DEFAULT 0,
	    trueanswer BIGINT NOT NULL DEFAULT 0,
	    falseanswer BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_questrue_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_question_truefalse IS 'Options for True-False questions'
	;
	CREATE INDEX mdl_questrue_que_ix ON mdl_question_truefalse (question)
	; COMMIT
LOG:  DDL LOCK TRACE: acquiring in mode <ddl_lock> for (bdr (6678401888864649257,1,16384,)) [tracelevel=statement]
STATEMENT:  BEGIN ISOLATION LEVEL SERIALIZABLE;
	CREATE TABLE mdl_assign (
	    id BIGSERIAL,
	    course BIGINT NOT NULL DEFAULT 0,
	    name VARCHAR(255) NOT NULL DEFAULT '',
	    intro TEXT NOT NULL,
	    introformat SMALLINT NOT NULL DEFAULT 0,
	    alwaysshowdescription SMALLINT NOT NULL DEFAULT 0,
	    nosubmissions SMALLINT NOT NULL DEFAULT 0,
	    submissiondrafts SMALLINT NOT NULL DEFAULT 0,
	    sendnotifications SMALLINT NOT NULL DEFAULT 0,
	    sendlatenotifications SMALLINT NOT NULL DEFAULT 0,
	    duedate BIGINT NOT NULL DEFAULT 0,
	    allowsubmissionsfromdate BIGINT NOT NULL DEFAULT 0,
	    grade BIGINT NOT NULL DEFAULT 0,
	    timemodified BIGINT NOT NULL DEFAULT 0,
	    requiresubmissionstatement SMALLINT NOT NULL DEFAULT 0,
	    completionsubmit SMALLINT NOT NULL DEFAULT 0,
	    cutoffdate BIGINT NOT NULL DEFAULT 0,
	    gradingduedate BIGINT NOT NULL DEFAULT 0,
	    teamsubmission SMALLINT NOT NULL DEFAULT 0,
	    requireallteammemberssubmit SMALLINT NOT NULL DEFAULT 0,
	    teamsubmissiongroupingid BIGINT NOT NULL DEFAULT 0,
	    blindmarking SMALLINT NOT NULL DEFAULT 0,
	    revealidentities SMALLINT NOT NULL DEFAULT 0,
	    attemptreopenmethod VARCHAR(10) NOT NULL DEFAULT 'none',
	    maxattempts INTEGER NOT NULL DEFAULT -1,
	    markingworkflow SMALLINT NOT NULL DEFAULT 0,
	    markingallocation SMALLINT NOT NULL DEFAULT 0,
	    sendstudentnotifications SMALLINT NOT NULL DEFAULT 1,
	    preventsubmissionnotingroup SMALLINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_assi_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_assign IS 'This table saves information about an instance of mod_assign in a course.'
	;
	CREATE INDEX mdl_assi_cou_ix ON mdl_assign (course)
	;
	CREATE INDEX mdl_assi_tea_ix ON mdl_assign (teamsubmissiongroupingid)
	;
	CREATE TABLE mdl_assign_submission (
	    id BIGSERIAL,
	    assignment BIGINT NOT NULL DEFAULT 0,
	    userid BIGINT NOT NULL DEFAULT 0,
	    timecreated BIGINT NOT NULL DEFAULT 0,
	    timemodified BIGINT NOT NULL DEFAULT 0,
	    status VARCHAR(10),
	    groupid BIGINT NOT NULL DEFAULT 0,
	    attemptnumber BIGINT NOT NULL DEFAULT 0,
	    latest SMALLINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_assisubm_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_assign_submission IS 'This table keeps information about student interactions with the mod/assign. This is limited to metadata about a student submission but does not include the submission itself which is stored by plugins.'
	;
	CREATE INDEX mdl_assisubm_use_ix ON mdl_assign_submission (userid)
	;
	CREATE INDEX mdl_assisubm_att_ix ON mdl_assign_submission (attemptnumber)
	;
	CREATE UNIQUE INDEX mdl_assisubm_assusegroatt_uix ON mdl_assign_submission (assignment, userid, groupid, attemptnumber)
	;
	CREATE INDEX mdl_assisubm_assusegrolat_ix ON mdl_assign_submission (assignment, userid, groupid, latest)
	;
	CREATE INDEX mdl_assisubm_ass_ix ON mdl_assign_submission (assignment)
	;
	CREATE TABLE mdl_assign_grades (
	    id BIGSERIAL,
	    assignment BIGINT NOT NULL DEFAULT 0,
	    userid BIGINT NOT NULL DEFAULT 0,
	    timecreated BIGINT NOT NULL DEFAULT 0,
	    timemodified BIGINT NOT NULL DEFAULT 0,
	    grader BIGINT NOT NULL DEFAULT 0,
	    grade NUMERIC(10,5) DEFAULT 0,
	    attemptnumber BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_assigrad_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_assign_grades IS 'Grading information about a single assignment submission.'
	;
	CREATE INDEX mdl_assigrad_use_ix ON mdl_assign_grades (userid)
	;
	CREATE INDEX mdl_assigrad_att_ix ON mdl_assign_grades (attemptnumber)
	;
	CREATE UNIQUE INDEX mdl_assigrad_assuseatt_uix ON mdl_assign_grades (assignment, userid, attemptnumber)
	;
	CREATE INDEX mdl_assigrad_ass_ix ON mdl_assign_grades (assignment)
	;
	CREATE TABLE mdl_assign_plugin_config (
	    id BIGSERIAL,
	    assignment BIGINT NOT NULL DEFAULT 0,
	    plugin VARCHAR(28) NOT NULL DEFAULT '',
	    subtype VARCHAR(28) NOT NULL DEFAULT '',
	    name VARCHAR(28) NOT NULL DEFAULT '',
	    value TEXT,
	CONSTRAINT mdl_assiplugconf_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_assign_plugin_config IS 'Config data for an instance of a plugin in an assignment.'
	;
	CREATE INDEX mdl_assiplugconf_plu_ix ON mdl_assign_plugin_config (plugin)
	;
	CREATE INDEX mdl_assiplugconf_sub_ix ON mdl_assign_plugin_config (subtype)
	;
	CREATE INDEX mdl_assiplugconf_nam_ix ON mdl_assign_plugin_config (name)
	;
	CREATE INDEX mdl_assiplugconf_ass_ix ON mdl_assign_plugin_config (assignment)
	;
	CREATE TABLE mdl_assign_user_mapping (
	    id BIGSERIAL,
	    assignment BIGINT NOT NULL DEFAULT 0,
	    userid BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_assiusermapp_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_assign_user_mapping IS 'Map an assignment specific id number to a user'
	;
	CREATE INDEX mdl_assiusermapp_ass_ix ON mdl_assign_user_mapping (assignment)
	;
	CREATE INDEX mdl_assiusermapp_use_ix ON mdl_assign_user_mapping (userid)
	;
	CREATE TABLE mdl_assign_user_flags (
	    id BIGSERIAL,
	    userid BIGINT NOT NULL DEFAULT 0,
	    assignment BIGINT NOT NULL DEFAULT 0,
	    locked BIGINT NOT NULL DEFAULT 0,
	    mailed SMALLINT NOT NULL DEFAULT 0,
	    extensionduedate BIGINT NOT NULL DEFAULT 0,
	    workflowstate VARCHAR(20),
	    allocatedmarker BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_assiuserflag_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_assign_user_flags IS 'List of flags that can be set for a single user in a single assignment.'
	;
	CREATE INDEX mdl_assiuserflag_mai_ix ON mdl_assign_user_flags (mailed)
	;
	CREATE INDEX mdl_assiuserflag_use_ix ON mdl_assign_user_flags (userid)
	;
	CREATE INDEX mdl_assiuserflag_ass_ix ON mdl_assign_user_flags (assignment)
	;
	CREATE TABLE mdl_assign_overrides (
	    id BIGSERIAL,
	    assignid BIGINT NOT NULL DEFAULT 0,
	    groupid BIGINT,
	    userid BIGINT,
	    sortorder BIGINT,
	    allowsubmissionsfromdate BIGINT,
	    duedate BIGINT,
	    cutoffdate BIGINT,
	CONSTRAINT mdl_assiover_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_assign_overrides IS 'The overrides to assign settings.'
	;
	CREATE INDEX mdl_assiover_ass_ix ON mdl_assign_overrides (assignid)
	;
	CREATE INDEX mdl_assiover_gro_ix ON mdl_assign_overrides (groupid)
	;
	CREATE INDEX mdl_assiover_use_ix ON mdl_assign_overrides (userid)
	; COMMIT
LOG:  DDL LOCK TRACE: acquiring in mode <write_lock> (upgrading from <ddl_lock>) for (bdr (6678401888864649257,1,16384,)) [tracelevel=statement]
STATEMENT:  BEGIN ISOLATION LEVEL SERIALIZABLE;
	CREATE TABLE mdl_assign (
	    id BIGSERIAL,
	    course BIGINT NOT NULL DEFAULT 0,
	    name VARCHAR(255) NOT NULL DEFAULT '',
	    intro TEXT NOT NULL,
	    introformat SMALLINT NOT NULL DEFAULT 0,
	    alwaysshowdescription SMALLINT NOT NULL DEFAULT 0,
	    nosubmissions SMALLINT NOT NULL DEFAULT 0,
	    submissiondrafts SMALLINT NOT NULL DEFAULT 0,
	    sendnotifications SMALLINT NOT NULL DEFAULT 0,
	    sendlatenotifications SMALLINT NOT NULL DEFAULT 0,
	    duedate BIGINT NOT NULL DEFAULT 0,
	    allowsubmissionsfromdate BIGINT NOT NULL DEFAULT 0,
	    grade BIGINT NOT NULL DEFAULT 0,
	    timemodified BIGINT NOT NULL DEFAULT 0,
	    requiresubmissionstatement SMALLINT NOT NULL DEFAULT 0,
	    completionsubmit SMALLINT NOT NULL DEFAULT 0,
	    cutoffdate BIGINT NOT NULL DEFAULT 0,
	    gradingduedate BIGINT NOT NULL DEFAULT 0,
	    teamsubmission SMALLINT NOT NULL DEFAULT 0,
	    requireallteammemberssubmit SMALLINT NOT NULL DEFAULT 0,
	    teamsubmissiongroupingid BIGINT NOT NULL DEFAULT 0,
	    blindmarking SMALLINT NOT NULL DEFAULT 0,
	    revealidentities SMALLINT NOT NULL DEFAULT 0,
	    attemptreopenmethod VARCHAR(10) NOT NULL DEFAULT 'none',
	    maxattempts INTEGER NOT NULL DEFAULT -1,
	    markingworkflow SMALLINT NOT NULL DEFAULT 0,
	    markingallocation SMALLINT NOT NULL DEFAULT 0,
	    sendstudentnotifications SMALLINT NOT NULL DEFAULT 1,
	    preventsubmissionnotingroup SMALLINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_assi_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_assign IS 'This table saves information about an instance of mod_assign in a course.'
	;
	CREATE INDEX mdl_assi_cou_ix ON mdl_assign (course)
	;
	CREATE INDEX mdl_assi_tea_ix ON mdl_assign (teamsubmissiongroupingid)
	;
	CREATE TABLE mdl_assign_submission (
	    id BIGSERIAL,
	    assignment BIGINT NOT NULL DEFAULT 0,
	    userid BIGINT NOT NULL DEFAULT 0,
	    timecreated BIGINT NOT NULL DEFAULT 0,
	    timemodified BIGINT NOT NULL DEFAULT 0,
	    status VARCHAR(10),
	    groupid BIGINT NOT NULL DEFAULT 0,
	    attemptnumber BIGINT NOT NULL DEFAULT 0,
	    latest SMALLINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_assisubm_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_assign_submission IS 'This table keeps information about student interactions with the mod/assign. This is limited to metadata about a student submission but does not include the submission itself which is stored by plugins.'
	;
	CREATE INDEX mdl_assisubm_use_ix ON mdl_assign_submission (userid)
	;
	CREATE INDEX mdl_assisubm_att_ix ON mdl_assign_submission (attemptnumber)
	;
	CREATE UNIQUE INDEX mdl_assisubm_assusegroatt_uix ON mdl_assign_submission (assignment, userid, groupid, attemptnumber)
	;
	CREATE INDEX mdl_assisubm_assusegrolat_ix ON mdl_assign_submission (assignment, userid, groupid, latest)
	;
	CREATE INDEX mdl_assisubm_ass_ix ON mdl_assign_submission (assignment)
	;
	CREATE TABLE mdl_assign_grades (
	    id BIGSERIAL,
	    assignment BIGINT NOT NULL DEFAULT 0,
	    userid BIGINT NOT NULL DEFAULT 0,
	    timecreated BIGINT NOT NULL DEFAULT 0,
	    timemodified BIGINT NOT NULL DEFAULT 0,
	    grader BIGINT NOT NULL DEFAULT 0,
	    grade NUMERIC(10,5) DEFAULT 0,
	    attemptnumber BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_assigrad_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_assign_grades IS 'Grading information about a single assignment submission.'
	;
	CREATE INDEX mdl_assigrad_use_ix ON mdl_assign_grades (userid)
	;
	CREATE INDEX mdl_assigrad_att_ix ON mdl_assign_grades (attemptnumber)
	;
	CREATE UNIQUE INDEX mdl_assigrad_assuseatt_uix ON mdl_assign_grades (assignment, userid, attemptnumber)
	;
	CREATE INDEX mdl_assigrad_ass_ix ON mdl_assign_grades (assignment)
	;
	CREATE TABLE mdl_assign_plugin_config (
	    id BIGSERIAL,
	    assignment BIGINT NOT NULL DEFAULT 0,
	    plugin VARCHAR(28) NOT NULL DEFAULT '',
	    subtype VARCHAR(28) NOT NULL DEFAULT '',
	    name VARCHAR(28) NOT NULL DEFAULT '',
	    value TEXT,
	CONSTRAINT mdl_assiplugconf_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_assign_plugin_config IS 'Config data for an instance of a plugin in an assignment.'
	;
	CREATE INDEX mdl_assiplugconf_plu_ix ON mdl_assign_plugin_config (plugin)
	;
	CREATE INDEX mdl_assiplugconf_sub_ix ON mdl_assign_plugin_config (subtype)
	;
	CREATE INDEX mdl_assiplugconf_nam_ix ON mdl_assign_plugin_config (name)
	;
	CREATE INDEX mdl_assiplugconf_ass_ix ON mdl_assign_plugin_config (assignment)
	;
	CREATE TABLE mdl_assign_user_mapping (
	    id BIGSERIAL,
	    assignment BIGINT NOT NULL DEFAULT 0,
	    userid BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_assiusermapp_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_assign_user_mapping IS 'Map an assignment specific id number to a user'
	;
	CREATE INDEX mdl_assiusermapp_ass_ix ON mdl_assign_user_mapping (assignment)
	;
	CREATE INDEX mdl_assiusermapp_use_ix ON mdl_assign_user_mapping (userid)
	;
	CREATE TABLE mdl_assign_user_flags (
	    id BIGSERIAL,
	    userid BIGINT NOT NULL DEFAULT 0,
	    assignment BIGINT NOT NULL DEFAULT 0,
	    locked BIGINT NOT NULL DEFAULT 0,
	    mailed SMALLINT NOT NULL DEFAULT 0,
	    extensionduedate BIGINT NOT NULL DEFAULT 0,
	    workflowstate VARCHAR(20),
	    allocatedmarker BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_assiuserflag_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_assign_user_flags IS 'List of flags that can be set for a single user in a single assignment.'
	;
	CREATE INDEX mdl_assiuserflag_mai_ix ON mdl_assign_user_flags (mailed)
	;
	CREATE INDEX mdl_assiuserflag_use_ix ON mdl_assign_user_flags (userid)
	;
	CREATE INDEX mdl_assiuserflag_ass_ix ON mdl_assign_user_flags (assignment)
	;
	CREATE TABLE mdl_assign_overrides (
	    id BIGSERIAL,
	    assignid BIGINT NOT NULL DEFAULT 0,
	    groupid BIGINT,
	    userid BIGINT,
	    sortorder BIGINT,
	    allowsubmissionsfromdate BIGINT,
	    duedate BIGINT,
	    cutoffdate BIGINT,
	CONSTRAINT mdl_assiover_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_assign_overrides IS 'The overrides to assign settings.'
	;
	CREATE INDEX mdl_assiover_ass_ix ON mdl_assign_overrides (assignid)
	;
	CREATE INDEX mdl_assiover_gro_ix ON mdl_assign_overrides (groupid)
	;
	CREATE INDEX mdl_assiover_use_ix ON mdl_assign_overrides (userid)
	; COMMIT
LOG:  DDL LOCK TRACE: acquiring in mode <ddl_lock> for (bdr (6678401888864649257,1,16384,)) [tracelevel=statement]
STATEMENT:  BEGIN ISOLATION LEVEL SERIALIZABLE;
	CREATE TABLE mdl_assignment (
	    id BIGSERIAL,
	    course BIGINT NOT NULL DEFAULT 0,
	    name VARCHAR(255) NOT NULL DEFAULT '',
	    intro TEXT NOT NULL,
	    introformat SMALLINT NOT NULL DEFAULT 0,
	    assignmenttype VARCHAR(50) NOT NULL DEFAULT '',
	    resubmit SMALLINT NOT NULL DEFAULT 0,
	    preventlate SMALLINT NOT NULL DEFAULT 0,
	    emailteachers SMALLINT NOT NULL DEFAULT 0,
	    var1 BIGINT DEFAULT 0,
	    var2 BIGINT DEFAULT 0,
	    var3 BIGINT DEFAULT 0,
	    var4 BIGINT DEFAULT 0,
	    var5 BIGINT DEFAULT 0,
	    maxbytes BIGINT NOT NULL DEFAULT 100000,
	    timedue BIGINT NOT NULL DEFAULT 0,
	    timeavailable BIGINT NOT NULL DEFAULT 0,
	    grade BIGINT NOT NULL DEFAULT 0,
	    timemodified BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_assi_id3_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_assignment IS 'Defines assignments'
	;
	CREATE INDEX mdl_assi_cou2_ix ON mdl_assignment (course)
	;
	CREATE TABLE mdl_assignment_submissions (
	    id BIGSERIAL,
	    assignment BIGINT NOT NULL DEFAULT 0,
	    userid BIGINT NOT NULL DEFAULT 0,
	    timecreated BIGINT NOT NULL DEFAULT 0,
	    timemodified BIGINT NOT NULL DEFAULT 0,
	    numfiles BIGINT NOT NULL DEFAULT 0,
	    data1 TEXT,
	    data2 TEXT,
	    grade BIGINT NOT NULL DEFAULT 0,
	    submissioncomment TEXT NOT NULL,
	    format SMALLINT NOT NULL DEFAULT 0,
	    teacher BIGINT NOT NULL DEFAULT 0,
	    timemarked BIGINT NOT NULL DEFAULT 0,
	    mailed SMALLINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_assisubm_id3_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_assignment_submissions IS 'Info about submitted assignments'
	;
	CREATE INDEX mdl_assisubm_use2_ix ON mdl_assignment_submissions (userid)
	;
	CREATE INDEX mdl_assisubm_mai_ix ON mdl_assignment_submissions (mailed)
	;
	CREATE INDEX mdl_assisubm_tim_ix ON mdl_assignment_submissions (timemarked)
	;
	CREATE INDEX mdl_assisubm_ass2_ix ON mdl_assignment_submissions (assignment)
	;
	CREATE TABLE mdl_assignment_upgrade (
	    id BIGSERIAL,
	    oldcmid BIGINT NOT NULL DEFAULT 0,
	    oldinstance BIGINT NOT NULL DEFAULT 0,
	    newcmid BIGINT NOT NULL DEFAULT 0,
	    newinstance BIGINT NOT NULL DEFAULT 0,
	    timecreated BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_assiupgr_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_assignment_upgrade IS 'Info about upgraded assignments'
	;
	CREATE INDEX mdl_assiupgr_old_ix ON mdl_assignment_upgrade (oldcmid)
	;
	CREATE INDEX mdl_assiupgr_old2_ix ON mdl_assignment_upgrade (oldinstance)
	; COMMIT
LOG:  DDL LOCK TRACE: acquiring in mode <write_lock> (upgrading from <ddl_lock>) for (bdr (6678401888864649257,1,16384,)) [tracelevel=statement]
STATEMENT:  BEGIN ISOLATION LEVEL SERIALIZABLE;
	CREATE TABLE mdl_assignment (
	    id BIGSERIAL,
	    course BIGINT NOT NULL DEFAULT 0,
	    name VARCHAR(255) NOT NULL DEFAULT '',
	    intro TEXT NOT NULL,
	    introformat SMALLINT NOT NULL DEFAULT 0,
	    assignmenttype VARCHAR(50) NOT NULL DEFAULT '',
	    resubmit SMALLINT NOT NULL DEFAULT 0,
	    preventlate SMALLINT NOT NULL DEFAULT 0,
	    emailteachers SMALLINT NOT NULL DEFAULT 0,
	    var1 BIGINT DEFAULT 0,
	    var2 BIGINT DEFAULT 0,
	    var3 BIGINT DEFAULT 0,
	    var4 BIGINT DEFAULT 0,
	    var5 BIGINT DEFAULT 0,
	    maxbytes BIGINT NOT NULL DEFAULT 100000,
	    timedue BIGINT NOT NULL DEFAULT 0,
	    timeavailable BIGINT NOT NULL DEFAULT 0,
	    grade BIGINT NOT NULL DEFAULT 0,
	    timemodified BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_assi_id3_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_assignment IS 'Defines assignments'
	;
	CREATE INDEX mdl_assi_cou2_ix ON mdl_assignment (course)
	;
	CREATE TABLE mdl_assignment_submissions (
	    id BIGSERIAL,
	    assignment BIGINT NOT NULL DEFAULT 0,
	    userid BIGINT NOT NULL DEFAULT 0,
	    timecreated BIGINT NOT NULL DEFAULT 0,
	    timemodified BIGINT NOT NULL DEFAULT 0,
	    numfiles BIGINT NOT NULL DEFAULT 0,
	    data1 TEXT,
	    data2 TEXT,
	    grade BIGINT NOT NULL DEFAULT 0,
	    submissioncomment TEXT NOT NULL,
	    format SMALLINT NOT NULL DEFAULT 0,
	    teacher BIGINT NOT NULL DEFAULT 0,
	    timemarked BIGINT NOT NULL DEFAULT 0,
	    mailed SMALLINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_assisubm_id3_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_assignment_submissions IS 'Info about submitted assignments'
	;
	CREATE INDEX mdl_assisubm_use2_ix ON mdl_assignment_submissions (userid)
	;
	CREATE INDEX mdl_assisubm_mai_ix ON mdl_assignment_submissions (mailed)
	;
	CREATE INDEX mdl_assisubm_tim_ix ON mdl_assignment_submissions (timemarked)
	;
	CREATE INDEX mdl_assisubm_ass2_ix ON mdl_assignment_submissions (assignment)
	;
	CREATE TABLE mdl_assignment_upgrade (
	    id BIGSERIAL,
	    oldcmid BIGINT NOT NULL DEFAULT 0,
	    oldinstance BIGINT NOT NULL DEFAULT 0,
	    newcmid BIGINT NOT NULL DEFAULT 0,
	    newinstance BIGINT NOT NULL DEFAULT 0,
	    timecreated BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_assiupgr_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_assignment_upgrade IS 'Info about upgraded assignments'
	;
	CREATE INDEX mdl_assiupgr_old_ix ON mdl_assignment_upgrade (oldcmid)
	;
	CREATE INDEX mdl_assiupgr_old2_ix ON mdl_assignment_upgrade (oldinstance)
	; COMMIT
LOG:  DDL LOCK TRACE: acquiring in mode <ddl_lock> for (bdr (6678401888864649257,1,16384,)) [tracelevel=statement]
STATEMENT:  BEGIN ISOLATION LEVEL SERIALIZABLE;
	CREATE TABLE mdl_book (
	    id BIGSERIAL,
	    course BIGINT NOT NULL DEFAULT 0,
	    name VARCHAR(255) NOT NULL DEFAULT '',
	    intro TEXT,
	    introformat SMALLINT NOT NULL DEFAULT 0,
	    numbering SMALLINT NOT NULL DEFAULT 0,
	    navstyle SMALLINT NOT NULL DEFAULT 1,
	    customtitles SMALLINT NOT NULL DEFAULT 0,
	    revision BIGINT NOT NULL DEFAULT 0,
	    timecreated BIGINT NOT NULL DEFAULT 0,
	    timemodified BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_book_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_book IS 'Defines book'
	;
	CREATE TABLE mdl_book_chapters (
	    id BIGSERIAL,
	    bookid BIGINT NOT NULL DEFAULT 0,
	    pagenum BIGINT NOT NULL DEFAULT 0,
	    subchapter BIGINT NOT NULL DEFAULT 0,
	    title VARCHAR(255) NOT NULL DEFAULT '',
	    content TEXT NOT NULL,
	    contentformat SMALLINT NOT NULL DEFAULT 0,
	    hidden SMALLINT NOT NULL DEFAULT 0,
	    timecreated BIGINT NOT NULL DEFAULT 0,
	    timemodified BIGINT NOT NULL DEFAULT 0,
	    importsrc VARCHAR(255) NOT NULL DEFAULT '',
	CONSTRAINT mdl_bookchap_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_book_chapters IS 'Defines book_chapters'
	; COMMIT
LOG:  DDL LOCK TRACE: acquiring in mode <write_lock> (upgrading from <ddl_lock>) for (bdr (6678401888864649257,1,16384,)) [tracelevel=statement]
STATEMENT:  BEGIN ISOLATION LEVEL SERIALIZABLE;
	CREATE TABLE mdl_book (
	    id BIGSERIAL,
	    course BIGINT NOT NULL DEFAULT 0,
	    name VARCHAR(255) NOT NULL DEFAULT '',
	    intro TEXT,
	    introformat SMALLINT NOT NULL DEFAULT 0,
	    numbering SMALLINT NOT NULL DEFAULT 0,
	    navstyle SMALLINT NOT NULL DEFAULT 1,
	    customtitles SMALLINT NOT NULL DEFAULT 0,
	    revision BIGINT NOT NULL DEFAULT 0,
	    timecreated BIGINT NOT NULL DEFAULT 0,
	    timemodified BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_book_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_book IS 'Defines book'
	;
	CREATE TABLE mdl_book_chapters (
	    id BIGSERIAL,
	    bookid BIGINT NOT NULL DEFAULT 0,
	    pagenum BIGINT NOT NULL DEFAULT 0,
	    subchapter BIGINT NOT NULL DEFAULT 0,
	    title VARCHAR(255) NOT NULL DEFAULT '',
	    content TEXT NOT NULL,
	    contentformat SMALLINT NOT NULL DEFAULT 0,
	    hidden SMALLINT NOT NULL DEFAULT 0,
	    timecreated BIGINT NOT NULL DEFAULT 0,
	    timemodified BIGINT NOT NULL DEFAULT 0,
	    importsrc VARCHAR(255) NOT NULL DEFAULT '',
	CONSTRAINT mdl_bookchap_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_book_chapters IS 'Defines book_chapters'
	; COMMIT
LOG:  DDL LOCK TRACE: acquiring in mode <ddl_lock> for (bdr (6678401888864649257,1,16384,)) [tracelevel=statement]
STATEMENT:  BEGIN ISOLATION LEVEL SERIALIZABLE;
	CREATE TABLE mdl_chat (
	    id BIGSERIAL,
	    course BIGINT NOT NULL DEFAULT 0,
	    name VARCHAR(255) NOT NULL DEFAULT '',
	    intro TEXT NOT NULL,
	    introformat SMALLINT NOT NULL DEFAULT 0,
	    keepdays BIGINT NOT NULL DEFAULT 0,
	    studentlogs SMALLINT NOT NULL DEFAULT 0,
	    chattime BIGINT NOT NULL DEFAULT 0,
	    schedule SMALLINT NOT NULL DEFAULT 0,
	    timemodified BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_chat_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_chat IS 'Each of these is a chat room'
	;
	CREATE INDEX mdl_chat_cou_ix ON mdl_chat (course)
	;
	CREATE TABLE mdl_chat_messages (
	    id BIGSERIAL,
	    chatid BIGINT NOT NULL DEFAULT 0,
	    userid BIGINT NOT NULL DEFAULT 0,
	    groupid BIGINT NOT NULL DEFAULT 0,
	    issystem SMALLINT NOT NULL DEFAULT 0,
	    message TEXT NOT NULL,
	    timestamp BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_chatmess_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_chat_messages IS 'Stores all the actual chat messages'
	;
	CREATE INDEX mdl_chatmess_use_ix ON mdl_chat_messages (userid)
	;
	CREATE INDEX mdl_chatmess_gro_ix ON mdl_chat_messages (groupid)
	;
	CREATE INDEX mdl_chatmess_timcha_ix ON mdl_chat_messages (timestamp, chatid)
	;
	CREATE INDEX mdl_chatmess_cha_ix ON mdl_chat_messages (chatid)
	;
	CREATE TABLE mdl_chat_messages_current (
	    id BIGSERIAL,
	    chatid BIGINT NOT NULL DEFAULT 0,
	    userid BIGINT NOT NULL DEFAULT 0,
	    groupid BIGINT NOT NULL DEFAULT 0,
	    issystem SMALLINT NOT NULL DEFAULT 0,
	    message TEXT NOT NULL,
	    timestamp BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_chatmesscurr_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_chat_messages_current IS 'Stores current session'
	;
	CREATE INDEX mdl_chatmesscurr_use_ix ON mdl_chat_messages_current (userid)
	;
	CREATE INDEX mdl_chatmesscurr_gro_ix ON mdl_chat_messages_current (groupid)
	;
	CREATE INDEX mdl_chatmesscurr_timcha_ix ON mdl_chat_messages_current (timestamp, chatid)
	;
	CREATE INDEX mdl_chatmesscurr_cha_ix ON mdl_chat_messages_current (chatid)
	;
	CREATE TABLE mdl_chat_users (
	    id BIGSERIAL,
	    chatid BIGINT NOT NULL DEFAULT 0,
	    userid BIGINT NOT NULL DEFAULT 0,
	    groupid BIGINT NOT NULL DEFAULT 0,
	    version VARCHAR(16) NOT NULL DEFAULT '',
	    ip VARCHAR(45) NOT NULL DEFAULT '',
	    firstping BIGINT NOT NULL DEFAULT 0,
	    lastping BIGINT NOT NULL DEFAULT 0,
	    lastmessageping BIGINT NOT NULL DEFAULT 0,
	    sid VARCHAR(32) NOT NULL DEFAULT '',
	    course BIGINT NOT NULL DEFAULT 0,
	    lang VARCHAR(30) NOT NULL DEFAULT '',
	CONSTRAINT mdl_chatuser_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_chat_users IS 'Keeps track of which users are in which chat rooms'
	;
	CREATE INDEX mdl_chatuser_use_ix ON mdl_chat_users (userid)
	;
	CREATE INDEX mdl_chatuser_las_ix ON mdl_chat_users (lastping)
	;
	CREATE INDEX mdl_chatuser_gro_ix ON mdl_chat_users (groupid)
	;
	CREATE INDEX mdl_chatuser_cha_ix ON mdl_chat_users (chatid)
	; COMMIT
LOG:  DDL LOCK TRACE: acquiring in mode <write_lock> (upgrading from <ddl_lock>) for (bdr (6678401888864649257,1,16384,)) [tracelevel=statement]
STATEMENT:  BEGIN ISOLATION LEVEL SERIALIZABLE;
	CREATE TABLE mdl_chat (
	    id BIGSERIAL,
	    course BIGINT NOT NULL DEFAULT 0,
	    name VARCHAR(255) NOT NULL DEFAULT '',
	    intro TEXT NOT NULL,
	    introformat SMALLINT NOT NULL DEFAULT 0,
	    keepdays BIGINT NOT NULL DEFAULT 0,
	    studentlogs SMALLINT NOT NULL DEFAULT 0,
	    chattime BIGINT NOT NULL DEFAULT 0,
	    schedule SMALLINT NOT NULL DEFAULT 0,
	    timemodified BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_chat_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_chat IS 'Each of these is a chat room'
	;
	CREATE INDEX mdl_chat_cou_ix ON mdl_chat (course)
	;
	CREATE TABLE mdl_chat_messages (
	    id BIGSERIAL,
	    chatid BIGINT NOT NULL DEFAULT 0,
	    userid BIGINT NOT NULL DEFAULT 0,
	    groupid BIGINT NOT NULL DEFAULT 0,
	    issystem SMALLINT NOT NULL DEFAULT 0,
	    message TEXT NOT NULL,
	    timestamp BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_chatmess_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_chat_messages IS 'Stores all the actual chat messages'
	;
	CREATE INDEX mdl_chatmess_use_ix ON mdl_chat_messages (userid)
	;
	CREATE INDEX mdl_chatmess_gro_ix ON mdl_chat_messages (groupid)
	;
	CREATE INDEX mdl_chatmess_timcha_ix ON mdl_chat_messages (timestamp, chatid)
	;
	CREATE INDEX mdl_chatmess_cha_ix ON mdl_chat_messages (chatid)
	;
	CREATE TABLE mdl_chat_messages_current (
	    id BIGSERIAL,
	    chatid BIGINT NOT NULL DEFAULT 0,
	    userid BIGINT NOT NULL DEFAULT 0,
	    groupid BIGINT NOT NULL DEFAULT 0,
	    issystem SMALLINT NOT NULL DEFAULT 0,
	    message TEXT NOT NULL,
	    timestamp BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_chatmesscurr_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_chat_messages_current IS 'Stores current session'
	;
	CREATE INDEX mdl_chatmesscurr_use_ix ON mdl_chat_messages_current (userid)
	;
	CREATE INDEX mdl_chatmesscurr_gro_ix ON mdl_chat_messages_current (groupid)
	;
	CREATE INDEX mdl_chatmesscurr_timcha_ix ON mdl_chat_messages_current (timestamp, chatid)
	;
	CREATE INDEX mdl_chatmesscurr_cha_ix ON mdl_chat_messages_current (chatid)
	;
	CREATE TABLE mdl_chat_users (
	    id BIGSERIAL,
	    chatid BIGINT NOT NULL DEFAULT 0,
	    userid BIGINT NOT NULL DEFAULT 0,
	    groupid BIGINT NOT NULL DEFAULT 0,
	    version VARCHAR(16) NOT NULL DEFAULT '',
	    ip VARCHAR(45) NOT NULL DEFAULT '',
	    firstping BIGINT NOT NULL DEFAULT 0,
	    lastping BIGINT NOT NULL DEFAULT 0,
	    lastmessageping BIGINT NOT NULL DEFAULT 0,
	    sid VARCHAR(32) NOT NULL DEFAULT '',
	    course BIGINT NOT NULL DEFAULT 0,
	    lang VARCHAR(30) NOT NULL DEFAULT '',
	CONSTRAINT mdl_chatuser_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_chat_users IS 'Keeps track of which users are in which chat rooms'
	;
	CREATE INDEX mdl_chatuser_use_ix ON mdl_chat_users (userid)
	;
	CREATE INDEX mdl_chatuser_las_ix ON mdl_chat_users (lastping)
	;
	CREATE INDEX mdl_chatuser_gro_ix ON mdl_chat_users (groupid)
	;
	CREATE INDEX mdl_chatuser_cha_ix ON mdl_chat_users (chatid)
	; COMMIT
LOG:  DDL LOCK TRACE: acquiring in mode <ddl_lock> for (bdr (6678401888864649257,1,16384,)) [tracelevel=statement]
STATEMENT:  BEGIN ISOLATION LEVEL SERIALIZABLE;
	CREATE TABLE mdl_choice (
	    id BIGSERIAL,
	    course BIGINT NOT NULL DEFAULT 0,
	    name VARCHAR(255) NOT NULL DEFAULT '',
	    intro TEXT NOT NULL,
	    introformat SMALLINT NOT NULL DEFAULT 0,
	    publish SMALLINT NOT NULL DEFAULT 0,
	    showresults SMALLINT NOT NULL DEFAULT 0,
	    display SMALLINT NOT NULL DEFAULT 0,
	    allowupdate SMALLINT NOT NULL DEFAULT 0,
	    allowmultiple SMALLINT NOT NULL DEFAULT 0,
	    showunanswered SMALLINT NOT NULL DEFAULT 0,
	    includeinactive SMALLINT NOT NULL DEFAULT 1,
	    limitanswers SMALLINT NOT NULL DEFAULT 0,
	    timeopen BIGINT NOT NULL DEFAULT 0,
	    timeclose BIGINT NOT NULL DEFAULT 0,
	    showpreview SMALLINT NOT NULL DEFAULT 0,
	    timemodified BIGINT NOT NULL DEFAULT 0,
	    completionsubmit SMALLINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_choi_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_choice IS 'Available choices are stored here'
	;
	CREATE INDEX mdl_choi_cou_ix ON mdl_choice (course)
	;
	CREATE TABLE mdl_choice_options (
	    id BIGSERIAL,
	    choiceid BIGINT NOT NULL DEFAULT 0,
	    text TEXT,
	    maxanswers BIGINT DEFAULT 0,
	    timemodified BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_choiopti_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_choice_options IS 'available options to choice'
	;
	CREATE INDEX mdl_choiopti_cho_ix ON mdl_choice_options (choiceid)
	;
	CREATE TABLE mdl_choice_answers (
	    id BIGSERIAL,
	    choiceid BIGINT NOT NULL DEFAULT 0,
	    userid BIGINT NOT NULL DEFAULT 0,
	    optionid BIGINT NOT NULL DEFAULT 0,
	    timemodified BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_choiansw_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_choice_answers IS 'choices performed by users'
	;
	CREATE INDEX mdl_choiansw_use_ix ON mdl_choice_answers (userid)
	;
	CREATE INDEX mdl_choiansw_cho_ix ON mdl_choice_answers (choiceid)
	;
	CREATE INDEX mdl_choiansw_opt_ix ON mdl_choice_answers (optionid)
	; COMMIT
LOG:  DDL LOCK TRACE: acquiring in mode <write_lock> (upgrading from <ddl_lock>) for (bdr (6678401888864649257,1,16384,)) [tracelevel=statement]
STATEMENT:  BEGIN ISOLATION LEVEL SERIALIZABLE;
	CREATE TABLE mdl_choice (
	    id BIGSERIAL,
	    course BIGINT NOT NULL DEFAULT 0,
	    name VARCHAR(255) NOT NULL DEFAULT '',
	    intro TEXT NOT NULL,
	    introformat SMALLINT NOT NULL DEFAULT 0,
	    publish SMALLINT NOT NULL DEFAULT 0,
	    showresults SMALLINT NOT NULL DEFAULT 0,
	    display SMALLINT NOT NULL DEFAULT 0,
	    allowupdate SMALLINT NOT NULL DEFAULT 0,
	    allowmultiple SMALLINT NOT NULL DEFAULT 0,
	    showunanswered SMALLINT NOT NULL DEFAULT 0,
	    includeinactive SMALLINT NOT NULL DEFAULT 1,
	    limitanswers SMALLINT NOT NULL DEFAULT 0,
	    timeopen BIGINT NOT NULL DEFAULT 0,
	    timeclose BIGINT NOT NULL DEFAULT 0,
	    showpreview SMALLINT NOT NULL DEFAULT 0,
	    timemodified BIGINT NOT NULL DEFAULT 0,
	    completionsubmit SMALLINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_choi_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_choice IS 'Available choices are stored here'
	;
	CREATE INDEX mdl_choi_cou_ix ON mdl_choice (course)
	;
	CREATE TABLE mdl_choice_options (
	    id BIGSERIAL,
	    choiceid BIGINT NOT NULL DEFAULT 0,
	    text TEXT,
	    maxanswers BIGINT DEFAULT 0,
	    timemodified BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_choiopti_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_choice_options IS 'available options to choice'
	;
	CREATE INDEX mdl_choiopti_cho_ix ON mdl_choice_options (choiceid)
	;
	CREATE TABLE mdl_choice_answers (
	    id BIGSERIAL,
	    choiceid BIGINT NOT NULL DEFAULT 0,
	    userid BIGINT NOT NULL DEFAULT 0,
	    optionid BIGINT NOT NULL DEFAULT 0,
	    timemodified BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_choiansw_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_choice_answers IS 'choices performed by users'
	;
	CREATE INDEX mdl_choiansw_use_ix ON mdl_choice_answers (userid)
	;
	CREATE INDEX mdl_choiansw_cho_ix ON mdl_choice_answers (choiceid)
	;
	CREATE INDEX mdl_choiansw_opt_ix ON mdl_choice_answers (optionid)
	; COMMIT
LOG:  DDL LOCK TRACE: acquiring in mode <ddl_lock> for (bdr (6678401888864649257,1,16384,)) [tracelevel=statement]
STATEMENT:  BEGIN ISOLATION LEVEL SERIALIZABLE;
	CREATE TABLE mdl_data (
	    id BIGSERIAL,
	    course BIGINT NOT NULL DEFAULT 0,
	    name VARCHAR(255) NOT NULL DEFAULT '',
	    intro TEXT NOT NULL,
	    introformat SMALLINT NOT NULL DEFAULT 0,
	    comments SMALLINT NOT NULL DEFAULT 0,
	    timeavailablefrom BIGINT NOT NULL DEFAULT 0,
	    timeavailableto BIGINT NOT NULL DEFAULT 0,
	    timeviewfrom BIGINT NOT NULL DEFAULT 0,
	    timeviewto BIGINT NOT NULL DEFAULT 0,
	    requiredentries INTEGER NOT NULL DEFAULT 0,
	    requiredentriestoview INTEGER NOT NULL DEFAULT 0,
	    maxentries INTEGER NOT NULL DEFAULT 0,
	    rssarticles SMALLINT NOT NULL DEFAULT 0,
	    singletemplate TEXT,
	    listtemplate TEXT,
	    listtemplateheader TEXT,
	    listtemplatefooter TEXT,
	    addtemplate TEXT,
	    rsstemplate TEXT,
	    rsstitletemplate TEXT,
	    csstemplate TEXT,
	    jstemplate TEXT,
	    asearchtemplate TEXT,
	    approval SMALLINT NOT NULL DEFAULT 0,
	    manageapproved SMALLINT NOT NULL DEFAULT 1,
	    scale BIGINT NOT NULL DEFAULT 0,
	    assessed BIGINT NOT NULL DEFAULT 0,
	    assesstimestart BIGINT NOT NULL DEFAULT 0,
	    assesstimefinish BIGINT NOT NULL DEFAULT 0,
	    defaultsort BIGINT NOT NULL DEFAULT 0,
	    defaultsortdir SMALLINT NOT NULL DEFAULT 0,
	    editany SMALLINT NOT NULL DEFAULT 0,
	    notification BIGINT NOT NULL DEFAULT 0,
	    timemodified BIGINT NOT NULL DEFAULT 0,
	    config TEXT,
	    completionentries BIGINT DEFAULT 0,
	CONSTRAINT mdl_data_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_data IS 'all database activities'
	;
	CREATE INDEX mdl_data_cou_ix ON mdl_data (course)
	;
	CREATE TABLE mdl_data_fields (
	    id BIGSERIAL,
	    dataid BIGINT NOT NULL DEFAULT 0,
	    type VARCHAR(255) NOT NULL DEFAULT '',
	    name VARCHAR(255) NOT NULL DEFAULT '',
	    description TEXT NOT NULL,
	    required SMALLINT NOT NULL DEFAULT 0,
	    param1 TEXT,
	    param2 TEXT,
	    param3 TEXT,
	    param4 TEXT,
	    param5 TEXT,
	    param6 TEXT,
	    param7 TEXT,
	    param8 TEXT,
	    param9 TEXT,
	    param10 TEXT,
	CONSTRAINT mdl_datafiel_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_data_fields IS 'every field available'
	;
	CREATE INDEX mdl_datafiel_typdat_ix ON mdl_data_fields (type, dataid)
	;
	CREATE INDEX mdl_datafiel_dat_ix ON mdl_data_fields (dataid)
	;
	CREATE TABLE mdl_data_records (
	    id BIGSERIAL,
	    userid BIGINT NOT NULL DEFAULT 0,
	    groupid BIGINT NOT NULL DEFAULT 0,
	    dataid BIGINT NOT NULL DEFAULT 0,
	    timecreated BIGINT NOT NULL DEFAULT 0,
	    timemodified BIGINT NOT NULL DEFAULT 0,
	    approved SMALLINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_datareco_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_data_records IS 'every record introduced'
	;
	CREATE INDEX mdl_datareco_dat_ix ON mdl_data_records (dataid)
	;
	CREATE TABLE mdl_data_content (
	    id BIGSERIAL,
	    fieldid BIGINT NOT NULL DEFAULT 0,
	    recordid BIGINT NOT NULL DEFAULT 0,
	    content TEXT,
	    content1 TEXT,
	    content2 TEXT,
	    content3 TEXT,
	    content4 TEXT,
	CONSTRAINT mdl_datacont_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_data_content IS 'the content introduced in each record/fields'
	;
	CREATE INDEX mdl_datacont_rec_ix ON mdl_data_content (recordid)
	;
	CREATE INDEX mdl_datacont_fie_ix ON mdl_data_content (fieldid)
	; COMMIT
LOG:  DDL LOCK TRACE: acquiring in mode <write_lock> (upgrading from <ddl_lock>) for (bdr (6678401888864649257,1,16384,)) [tracelevel=statement]
STATEMENT:  BEGIN ISOLATION LEVEL SERIALIZABLE;
	CREATE TABLE mdl_data (
	    id BIGSERIAL,
	    course BIGINT NOT NULL DEFAULT 0,
	    name VARCHAR(255) NOT NULL DEFAULT '',
	    intro TEXT NOT NULL,
	    introformat SMALLINT NOT NULL DEFAULT 0,
	    comments SMALLINT NOT NULL DEFAULT 0,
	    timeavailablefrom BIGINT NOT NULL DEFAULT 0,
	    timeavailableto BIGINT NOT NULL DEFAULT 0,
	    timeviewfrom BIGINT NOT NULL DEFAULT 0,
	    timeviewto BIGINT NOT NULL DEFAULT 0,
	    requiredentries INTEGER NOT NULL DEFAULT 0,
	    requiredentriestoview INTEGER NOT NULL DEFAULT 0,
	    maxentries INTEGER NOT NULL DEFAULT 0,
	    rssarticles SMALLINT NOT NULL DEFAULT 0,
	    singletemplate TEXT,
	    listtemplate TEXT,
	    listtemplateheader TEXT,
	    listtemplatefooter TEXT,
	    addtemplate TEXT,
	    rsstemplate TEXT,
	    rsstitletemplate TEXT,
	    csstemplate TEXT,
	    jstemplate TEXT,
	    asearchtemplate TEXT,
	    approval SMALLINT NOT NULL DEFAULT 0,
	    manageapproved SMALLINT NOT NULL DEFAULT 1,
	    scale BIGINT NOT NULL DEFAULT 0,
	    assessed BIGINT NOT NULL DEFAULT 0,
	    assesstimestart BIGINT NOT NULL DEFAULT 0,
	    assesstimefinish BIGINT NOT NULL DEFAULT 0,
	    defaultsort BIGINT NOT NULL DEFAULT 0,
	    defaultsortdir SMALLINT NOT NULL DEFAULT 0,
	    editany SMALLINT NOT NULL DEFAULT 0,
	    notification BIGINT NOT NULL DEFAULT 0,
	    timemodified BIGINT NOT NULL DEFAULT 0,
	    config TEXT,
	    completionentries BIGINT DEFAULT 0,
	CONSTRAINT mdl_data_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_data IS 'all database activities'
	;
	CREATE INDEX mdl_data_cou_ix ON mdl_data (course)
	;
	CREATE TABLE mdl_data_fields (
	    id BIGSERIAL,
	    dataid BIGINT NOT NULL DEFAULT 0,
	    type VARCHAR(255) NOT NULL DEFAULT '',
	    name VARCHAR(255) NOT NULL DEFAULT '',
	    description TEXT NOT NULL,
	    required SMALLINT NOT NULL DEFAULT 0,
	    param1 TEXT,
	    param2 TEXT,
	    param3 TEXT,
	    param4 TEXT,
	    param5 TEXT,
	    param6 TEXT,
	    param7 TEXT,
	    param8 TEXT,
	    param9 TEXT,
	    param10 TEXT,
	CONSTRAINT mdl_datafiel_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_data_fields IS 'every field available'
	;
	CREATE INDEX mdl_datafiel_typdat_ix ON mdl_data_fields (type, dataid)
	;
	CREATE INDEX mdl_datafiel_dat_ix ON mdl_data_fields (dataid)
	;
	CREATE TABLE mdl_data_records (
	    id BIGSERIAL,
	    userid BIGINT NOT NULL DEFAULT 0,
	    groupid BIGINT NOT NULL DEFAULT 0,
	    dataid BIGINT NOT NULL DEFAULT 0,
	    timecreated BIGINT NOT NULL DEFAULT 0,
	    timemodified BIGINT NOT NULL DEFAULT 0,
	    approved SMALLINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_datareco_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_data_records IS 'every record introduced'
	;
	CREATE INDEX mdl_datareco_dat_ix ON mdl_data_records (dataid)
	;
	CREATE TABLE mdl_data_content (
	    id BIGSERIAL,
	    fieldid BIGINT NOT NULL DEFAULT 0,
	    recordid BIGINT NOT NULL DEFAULT 0,
	    content TEXT,
	    content1 TEXT,
	    content2 TEXT,
	    content3 TEXT,
	    content4 TEXT,
	CONSTRAINT mdl_datacont_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_data_content IS 'the content introduced in each record/fields'
	;
	CREATE INDEX mdl_datacont_rec_ix ON mdl_data_content (recordid)
	;
	CREATE INDEX mdl_datacont_fie_ix ON mdl_data_content (fieldid)
	; COMMIT
LOG:  DDL LOCK TRACE: acquiring in mode <ddl_lock> for (bdr (6678401888864649257,1,16384,)) [tracelevel=statement]
STATEMENT:  BEGIN ISOLATION LEVEL SERIALIZABLE;
	CREATE TABLE mdl_feedback (
	    id BIGSERIAL,
	    course BIGINT NOT NULL DEFAULT 0,
	    name VARCHAR(255) NOT NULL DEFAULT '',
	    intro TEXT NOT NULL,
	    introformat SMALLINT NOT NULL DEFAULT 0,
	    anonymous SMALLINT NOT NULL DEFAULT 1,
	    email_notification SMALLINT NOT NULL DEFAULT 1,
	    multiple_submit SMALLINT NOT NULL DEFAULT 1,
	    autonumbering SMALLINT NOT NULL DEFAULT 1,
	    site_after_submit VARCHAR(255) NOT NULL DEFAULT '',
	    page_after_submit TEXT NOT NULL,
	    page_after_submitformat SMALLINT NOT NULL DEFAULT 0,
	    publish_stats SMALLINT NOT NULL DEFAULT 0,
	    timeopen BIGINT NOT NULL DEFAULT 0,
	    timeclose BIGINT NOT NULL DEFAULT 0,
	    timemodified BIGINT NOT NULL DEFAULT 0,
	    completionsubmit SMALLINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_feed_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_feedback IS 'all feedbacks'
	;
	CREATE INDEX mdl_feed_cou_ix ON mdl_feedback (course)
	;
	CREATE TABLE mdl_feedback_template (
	    id BIGSERIAL,
	    course BIGINT NOT NULL DEFAULT 0,
	    ispublic SMALLINT NOT NULL DEFAULT 0,
	    name VARCHAR(255) NOT NULL DEFAULT '',
	CONSTRAINT mdl_feedtemp_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_feedback_template IS 'templates of feedbackstructures'
	;
	CREATE INDEX mdl_feedtemp_cou_ix ON mdl_feedback_template (course)
	;
	CREATE TABLE mdl_feedback_item (
	    id BIGSERIAL,
	    feedback BIGINT NOT NULL DEFAULT 0,
	    template BIGINT NOT NULL DEFAULT 0,
	    name VARCHAR(255) NOT NULL DEFAULT '',
	    label VARCHAR(255) NOT NULL DEFAULT '',
	    presentation TEXT NOT NULL,
	    typ VARCHAR(255) NOT NULL DEFAULT '',
	    hasvalue SMALLINT NOT NULL DEFAULT 0,
	    position SMALLINT NOT NULL DEFAULT 0,
	    required SMALLINT NOT NULL DEFAULT 0,
	    dependitem BIGINT NOT NULL DEFAULT 0,
	    dependvalue VARCHAR(255) NOT NULL DEFAULT '',
	    options VARCHAR(255) NOT NULL DEFAULT '',
	CONSTRAINT mdl_feeditem_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_feedback_item IS 'feedback_items'
	;
	CREATE INDEX mdl_feeditem_fee_ix ON mdl_feedback_item (feedback)
	;
	CREATE INDEX mdl_feeditem_tem_ix ON mdl_feedback_item (template)
	;
	CREATE TABLE mdl_feedback_completed (
	    id BIGSERIAL,
	    feedback BIGINT NOT NULL DEFAULT 0,
	    userid BIGINT NOT NULL DEFAULT 0,
	    timemodified BIGINT NOT NULL DEFAULT 0,
	    random_response BIGINT NOT NULL DEFAULT 0,
	    anonymous_response SMALLINT NOT NULL DEFAULT 0,
	    courseid BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_feedcomp_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_feedback_completed IS 'filled out feedback'
	;
	CREATE INDEX mdl_feedcomp_use_ix ON mdl_feedback_completed (userid)
	;
	CREATE INDEX mdl_feedcomp_fee_ix ON mdl_feedback_completed (feedback)
	;
	CREATE TABLE mdl_feedback_completedtmp (
	    id BIGSERIAL,
	    feedback BIGINT NOT NULL DEFAULT 0,
	    userid BIGINT NOT NULL DEFAULT 0,
	    guestid VARCHAR(255) NOT NULL DEFAULT '',
	    timemodified BIGINT NOT NULL DEFAULT 0,
	    random_response BIGINT NOT NULL DEFAULT 0,
	    anonymous_response SMALLINT NOT NULL DEFAULT 0,
	    courseid BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_feedcomp_id3_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_feedback_completedtmp IS 'filled out feedback'
	;
	CREATE INDEX mdl_feedcomp_use2_ix ON mdl_feedback_completedtmp (userid)
	;
	CREATE INDEX mdl_feedcomp_fee2_ix ON mdl_feedback_completedtmp (feedback)
	;
	CREATE TABLE mdl_feedback_value (
	    id BIGSERIAL,
	    course_id BIGINT NOT NULL DEFAULT 0,
	    item BIGINT NOT NULL DEFAULT 0,
	    completed BIGINT NOT NULL DEFAULT 0,
	    tmp_completed BIGINT NOT NULL DEFAULT 0,
	    value TEXT NOT NULL,
	CONSTRAINT mdl_feedvalu_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_feedback_value IS 'values of the completeds'
	;
	CREATE INDEX mdl_feedvalu_cou_ix ON mdl_feedback_value (course_id)
	;
	CREATE UNIQUE INDEX mdl_feedvalu_comitecou_uix ON mdl_feedback_value (completed, item, course_id)
	;
	CREATE INDEX mdl_feedvalu_ite_ix ON mdl_feedback_value (item)
	;
	CREATE TABLE mdl_feedback_valuetmp (
	    id BIGSERIAL,
	    course_id BIGINT NOT NULL DEFAULT 0,
	    item BIGINT NOT NULL DEFAULT 0,
	    completed BIGINT NOT NULL DEFAULT 0,
	    tmp_completed BIGINT NOT NULL DEFAULT 0,
	    value TEXT NOT NULL,
	CONSTRAINT mdl_feedvalu_id3_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_feedback_valuetmp IS 'values of the completedstmp'
	;
	CREATE INDEX mdl_feedvalu_cou2_ix ON mdl_feedback_valuetmp (course_id)
	;
	CREATE UNIQUE INDEX mdl_feedvalu_comitecou2_uix ON mdl_feedback_valuetmp (completed, item, course_id)
	;
	CREATE INDEX mdl_feedvalu_ite2_ix ON mdl_feedback_valuetmp (item)
	;
	CREATE TABLE mdl_feedback_sitecourse_map (
	    id BIGSERIAL,
	    feedbackid BIGINT NOT NULL DEFAULT 0,
	    courseid BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_feedsitemap_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_feedback_sitecourse_map IS 'feedback sitecourse map'
	;
	CREATE INDEX mdl_feedsitemap_cou_ix ON mdl_feedback_sitecourse_map (courseid)
	;
	CREATE INDEX mdl_feedsitemap_fee_ix ON mdl_feedback_sitecourse_map (feedbackid)
	; COMMIT
LOG:  DDL LOCK TRACE: acquiring in mode <write_lock> (upgrading from <ddl_lock>) for (bdr (6678401888864649257,1,16384,)) [tracelevel=statement]
STATEMENT:  BEGIN ISOLATION LEVEL SERIALIZABLE;
	CREATE TABLE mdl_feedback (
	    id BIGSERIAL,
	    course BIGINT NOT NULL DEFAULT 0,
	    name VARCHAR(255) NOT NULL DEFAULT '',
	    intro TEXT NOT NULL,
	    introformat SMALLINT NOT NULL DEFAULT 0,
	    anonymous SMALLINT NOT NULL DEFAULT 1,
	    email_notification SMALLINT NOT NULL DEFAULT 1,
	    multiple_submit SMALLINT NOT NULL DEFAULT 1,
	    autonumbering SMALLINT NOT NULL DEFAULT 1,
	    site_after_submit VARCHAR(255) NOT NULL DEFAULT '',
	    page_after_submit TEXT NOT NULL,
	    page_after_submitformat SMALLINT NOT NULL DEFAULT 0,
	    publish_stats SMALLINT NOT NULL DEFAULT 0,
	    timeopen BIGINT NOT NULL DEFAULT 0,
	    timeclose BIGINT NOT NULL DEFAULT 0,
	    timemodified BIGINT NOT NULL DEFAULT 0,
	    completionsubmit SMALLINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_feed_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_feedback IS 'all feedbacks'
	;
	CREATE INDEX mdl_feed_cou_ix ON mdl_feedback (course)
	;
	CREATE TABLE mdl_feedback_template (
	    id BIGSERIAL,
	    course BIGINT NOT NULL DEFAULT 0,
	    ispublic SMALLINT NOT NULL DEFAULT 0,
	    name VARCHAR(255) NOT NULL DEFAULT '',
	CONSTRAINT mdl_feedtemp_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_feedback_template IS 'templates of feedbackstructures'
	;
	CREATE INDEX mdl_feedtemp_cou_ix ON mdl_feedback_template (course)
	;
	CREATE TABLE mdl_feedback_item (
	    id BIGSERIAL,
	    feedback BIGINT NOT NULL DEFAULT 0,
	    template BIGINT NOT NULL DEFAULT 0,
	    name VARCHAR(255) NOT NULL DEFAULT '',
	    label VARCHAR(255) NOT NULL DEFAULT '',
	    presentation TEXT NOT NULL,
	    typ VARCHAR(255) NOT NULL DEFAULT '',
	    hasvalue SMALLINT NOT NULL DEFAULT 0,
	    position SMALLINT NOT NULL DEFAULT 0,
	    required SMALLINT NOT NULL DEFAULT 0,
	    dependitem BIGINT NOT NULL DEFAULT 0,
	    dependvalue VARCHAR(255) NOT NULL DEFAULT '',
	    options VARCHAR(255) NOT NULL DEFAULT '',
	CONSTRAINT mdl_feeditem_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_feedback_item IS 'feedback_items'
	;
	CREATE INDEX mdl_feeditem_fee_ix ON mdl_feedback_item (feedback)
	;
	CREATE INDEX mdl_feeditem_tem_ix ON mdl_feedback_item (template)
	;
	CREATE TABLE mdl_feedback_completed (
	    id BIGSERIAL,
	    feedback BIGINT NOT NULL DEFAULT 0,
	    userid BIGINT NOT NULL DEFAULT 0,
	    timemodified BIGINT NOT NULL DEFAULT 0,
	    random_response BIGINT NOT NULL DEFAULT 0,
	    anonymous_response SMALLINT NOT NULL DEFAULT 0,
	    courseid BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_feedcomp_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_feedback_completed IS 'filled out feedback'
	;
	CREATE INDEX mdl_feedcomp_use_ix ON mdl_feedback_completed (userid)
	;
	CREATE INDEX mdl_feedcomp_fee_ix ON mdl_feedback_completed (feedback)
	;
	CREATE TABLE mdl_feedback_completedtmp (
	    id BIGSERIAL,
	    feedback BIGINT NOT NULL DEFAULT 0,
	    userid BIGINT NOT NULL DEFAULT 0,
	    guestid VARCHAR(255) NOT NULL DEFAULT '',
	    timemodified BIGINT NOT NULL DEFAULT 0,
	    random_response BIGINT NOT NULL DEFAULT 0,
	    anonymous_response SMALLINT NOT NULL DEFAULT 0,
	    courseid BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_feedcomp_id3_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_feedback_completedtmp IS 'filled out feedback'
	;
	CREATE INDEX mdl_feedcomp_use2_ix ON mdl_feedback_completedtmp (userid)
	;
	CREATE INDEX mdl_feedcomp_fee2_ix ON mdl_feedback_completedtmp (feedback)
	;
	CREATE TABLE mdl_feedback_value (
	    id BIGSERIAL,
	    course_id BIGINT NOT NULL DEFAULT 0,
	    item BIGINT NOT NULL DEFAULT 0,
	    completed BIGINT NOT NULL DEFAULT 0,
	    tmp_completed BIGINT NOT NULL DEFAULT 0,
	    value TEXT NOT NULL,
	CONSTRAINT mdl_feedvalu_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_feedback_value IS 'values of the completeds'
	;
	CREATE INDEX mdl_feedvalu_cou_ix ON mdl_feedback_value (course_id)
	;
	CREATE UNIQUE INDEX mdl_feedvalu_comitecou_uix ON mdl_feedback_value (completed, item, course_id)
	;
	CREATE INDEX mdl_feedvalu_ite_ix ON mdl_feedback_value (item)
	;
	CREATE TABLE mdl_feedback_valuetmp (
	    id BIGSERIAL,
	    course_id BIGINT NOT NULL DEFAULT 0,
	    item BIGINT NOT NULL DEFAULT 0,
	    completed BIGINT NOT NULL DEFAULT 0,
	    tmp_completed BIGINT NOT NULL DEFAULT 0,
	    value TEXT NOT NULL,
	CONSTRAINT mdl_feedvalu_id3_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_feedback_valuetmp IS 'values of the completedstmp'
	;
	CREATE INDEX mdl_feedvalu_cou2_ix ON mdl_feedback_valuetmp (course_id)
	;
	CREATE UNIQUE INDEX mdl_feedvalu_comitecou2_uix ON mdl_feedback_valuetmp (completed, item, course_id)
	;
	CREATE INDEX mdl_feedvalu_ite2_ix ON mdl_feedback_valuetmp (item)
	;
	CREATE TABLE mdl_feedback_sitecourse_map (
	    id BIGSERIAL,
	    feedbackid BIGINT NOT NULL DEFAULT 0,
	    courseid BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_feedsitemap_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_feedback_sitecourse_map IS 'feedback sitecourse map'
	;
	CREATE INDEX mdl_feedsitemap_cou_ix ON mdl_feedback_sitecourse_map (courseid)
	;
	CREATE INDEX mdl_feedsitemap_fee_ix ON mdl_feedback_sitecourse_map (feedbackid)
	; COMMIT
LOG:  DDL LOCK TRACE: acquiring in mode <ddl_lock> for (bdr (6678401888864649257,1,16384,)) [tracelevel=statement]
STATEMENT:  BEGIN ISOLATION LEVEL SERIALIZABLE;
	CREATE TABLE mdl_folder (
	    id BIGSERIAL,
	    course BIGINT NOT NULL DEFAULT 0,
	    name VARCHAR(255) NOT NULL DEFAULT '',
	    intro TEXT,
	    introformat SMALLINT NOT NULL DEFAULT 0,
	    revision BIGINT NOT NULL DEFAULT 0,
	    timemodified BIGINT NOT NULL DEFAULT 0,
	    display SMALLINT NOT NULL DEFAULT 0,
	    showexpanded SMALLINT NOT NULL DEFAULT 1,
	    showdownloadfolder SMALLINT NOT NULL DEFAULT 1,
	CONSTRAINT mdl_fold_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_folder IS 'each record is one folder resource'
	;
	CREATE INDEX mdl_fold_cou_ix ON mdl_folder (course)
	; COMMIT
LOG:  DDL LOCK TRACE: acquiring in mode <write_lock> (upgrading from <ddl_lock>) for (bdr (6678401888864649257,1,16384,)) [tracelevel=statement]
STATEMENT:  BEGIN ISOLATION LEVEL SERIALIZABLE;
	CREATE TABLE mdl_folder (
	    id BIGSERIAL,
	    course BIGINT NOT NULL DEFAULT 0,
	    name VARCHAR(255) NOT NULL DEFAULT '',
	    intro TEXT,
	    introformat SMALLINT NOT NULL DEFAULT 0,
	    revision BIGINT NOT NULL DEFAULT 0,
	    timemodified BIGINT NOT NULL DEFAULT 0,
	    display SMALLINT NOT NULL DEFAULT 0,
	    showexpanded SMALLINT NOT NULL DEFAULT 1,
	    showdownloadfolder SMALLINT NOT NULL DEFAULT 1,
	CONSTRAINT mdl_fold_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_folder IS 'each record is one folder resource'
	;
	CREATE INDEX mdl_fold_cou_ix ON mdl_folder (course)
	; COMMIT
LOG:  DDL LOCK TRACE: acquiring in mode <ddl_lock> for (bdr (6678401888864649257,1,16384,)) [tracelevel=statement]
STATEMENT:  BEGIN ISOLATION LEVEL SERIALIZABLE;
	CREATE TABLE mdl_forum (
	    id BIGSERIAL,
	    course BIGINT NOT NULL DEFAULT 0,
	    type VARCHAR(20) NOT NULL DEFAULT 'general',
	    name VARCHAR(255) NOT NULL DEFAULT '',
	    intro TEXT NOT NULL,
	    introformat SMALLINT NOT NULL DEFAULT 0,
	    assessed BIGINT NOT NULL DEFAULT 0,
	    assesstimestart BIGINT NOT NULL DEFAULT 0,
	    assesstimefinish BIGINT NOT NULL DEFAULT 0,
	    scale BIGINT NOT NULL DEFAULT 0,
	    maxbytes BIGINT NOT NULL DEFAULT 0,
	    maxattachments BIGINT NOT NULL DEFAULT 1,
	    forcesubscribe SMALLINT NOT NULL DEFAULT 0,
	    trackingtype SMALLINT NOT NULL DEFAULT 1,
	    rsstype SMALLINT NOT NULL DEFAULT 0,
	    rssarticles SMALLINT NOT NULL DEFAULT 0,
	    timemodified BIGINT NOT NULL DEFAULT 0,
	    warnafter BIGINT NOT NULL DEFAULT 0,
	    blockafter BIGINT NOT NULL DEFAULT 0,
	    blockperiod BIGINT NOT NULL DEFAULT 0,
	    completiondiscussions INTEGER NOT NULL DEFAULT 0,
	    completionreplies INTEGER NOT NULL DEFAULT 0,
	    completionposts INTEGER NOT NULL DEFAULT 0,
	    displaywordcount SMALLINT NOT NULL DEFAULT 0,
	    lockdiscussionafter BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_foru_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_forum IS 'Forums contain and structure discussion'
	;
	CREATE INDEX mdl_foru_cou_ix ON mdl_forum (course)
	;
	CREATE TABLE mdl_forum_discussions (
	    id BIGSERIAL,
	    course BIGINT NOT NULL DEFAULT 0,
	    forum BIGINT NOT NULL DEFAULT 0,
	    name VARCHAR(255) NOT NULL DEFAULT '',
	    firstpost BIGINT NOT NULL DEFAULT 0,
	    userid BIGINT NOT NULL DEFAULT 0,
	    groupid BIGINT NOT NULL DEFAULT -1,
	    assessed SMALLINT NOT NULL DEFAULT 1,
	    timemodified BIGINT NOT NULL DEFAULT 0,
	    usermodified BIGINT NOT NULL DEFAULT 0,
	    timestart BIGINT NOT NULL DEFAULT 0,
	    timeend BIGINT NOT NULL DEFAULT 0,
	    pinned SMALLINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_forudisc_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_forum_discussions IS 'Forums are composed of discussions'
	;
	CREATE INDEX mdl_forudisc_use_ix ON mdl_forum_discussions (userid)
	;
	CREATE INDEX mdl_forudisc_cou_ix ON mdl_forum_discussions (course)
	;
	CREATE INDEX mdl_forudisc_for_ix ON mdl_forum_discussions (forum)
	;
	CREATE TABLE mdl_forum_posts (
	    id BIGSERIAL,
	    discussion BIGINT NOT NULL DEFAULT 0,
	    parent BIGINT NOT NULL DEFAULT 0,
	    userid BIGINT NOT NULL DEFAULT 0,
	    created BIGINT NOT NULL DEFAULT 0,
	    modified BIGINT NOT NULL DEFAULT 0,
	    mailed SMALLINT NOT NULL DEFAULT 0,
	    subject VARCHAR(255) NOT NULL DEFAULT '',
	    message TEXT NOT NULL,
	    messageformat SMALLINT NOT NULL DEFAULT 0,
	    messagetrust SMALLINT NOT NULL DEFAULT 0,
	    attachment VARCHAR(100) NOT NULL DEFAULT '',
	    totalscore SMALLINT NOT NULL DEFAULT 0,
	    mailnow BIGINT NOT NULL DEFAULT 0,
	    deleted SMALLINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_forupost_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_forum_posts IS 'All posts are stored in this table'
	;
	CREATE INDEX mdl_forupost_use_ix ON mdl_forum_posts (userid)
	;
	CREATE INDEX mdl_forupost_cre_ix ON mdl_forum_posts (created)
	;
	CREATE INDEX mdl_forupost_mai_ix ON mdl_forum_posts (mailed)
	;
	CREATE INDEX mdl_forupost_dis_ix ON mdl_forum_posts (discussion)
	;
	CREATE INDEX mdl_forupost_par_ix ON mdl_forum_posts (parent)
	;
	CREATE TABLE mdl_forum_queue (
	    id BIGSERIAL,
	    userid BIGINT NOT NULL DEFAULT 0,
	    discussionid BIGINT NOT NULL DEFAULT 0,
	    postid BIGINT NOT NULL DEFAULT 0,
	    timemodified BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_foruqueu_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_forum_queue IS 'For keeping track of posts that will be mailed in digest form'
	;
	CREATE INDEX mdl_foruqueu_use_ix ON mdl_forum_queue (userid)
	;
	CREATE INDEX mdl_foruqueu_dis_ix ON mdl_forum_queue (discussionid)
	;
	CREATE INDEX mdl_foruqueu_pos_ix ON mdl_forum_queue (postid)
	;
	CREATE TABLE mdl_forum_subscriptions (
	    id BIGSERIAL,
	    userid BIGINT NOT NULL DEFAULT 0,
	    forum BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_forusubs_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_forum_subscriptions IS 'Keeps track of who is subscribed to what forum'
	;
	CREATE INDEX mdl_forusubs_use_ix ON mdl_forum_subscriptions (userid)
	;
	CREATE INDEX mdl_forusubs_for_ix ON mdl_forum_subscriptions (forum)
	;
	CREATE UNIQUE INDEX mdl_forusubs_usefor_uix ON mdl_forum_subscriptions (userid, forum)
	;
	CREATE TABLE mdl_forum_digests (
	    id BIGSERIAL,
	    userid BIGINT NOT NULL,
	    forum BIGINT NOT NULL,
	    maildigest SMALLINT NOT NULL DEFAULT -1,
	CONSTRAINT mdl_forudige_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_forum_digests IS 'Keeps track of user mail delivery preferences for each forum'
	;
	CREATE INDEX mdl_forudige_use_ix ON mdl_forum_digests (userid)
	;
	CREATE INDEX mdl_forudige_for_ix ON mdl_forum_digests (forum)
	;
	CREATE UNIQUE INDEX mdl_forudige_forusemai_uix ON mdl_forum_digests (forum, userid, maildigest)
	;
	CREATE TABLE mdl_forum_read (
	    id BIGSERIAL,
	    userid BIGINT NOT NULL DEFAULT 0,
	    forumid BIGINT NOT NULL DEFAULT 0,
	    discussionid BIGINT NOT NULL DEFAULT 0,
	    postid BIGINT NOT NULL DEFAULT 0,
	    firstread BIGINT NOT NULL DEFAULT 0,
	    lastread BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_foruread_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_forum_read IS 'Tracks each users read posts'
	;
	CREATE INDEX mdl_foruread_usefor_ix ON mdl_forum_read (userid, forumid)
	;
	CREATE INDEX mdl_foruread_usedis_ix ON mdl_forum_read (userid, discussionid)
	;
	CREATE INDEX mdl_foruread_posuse_ix ON mdl_forum_read (postid, userid)
	;
	CREATE TABLE mdl_forum_track_prefs (
	    id BIGSERIAL,
	    userid BIGINT NOT NULL DEFAULT 0,
	    forumid BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_forutracpref_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_forum_track_prefs IS 'Tracks each users untracked forums'
	;
	CREATE INDEX mdl_forutracpref_usefor_ix ON mdl_forum_track_prefs (userid, forumid)
	;
	CREATE TABLE mdl_forum_discussion_subs (
	    id BIGSERIAL,
	    forum BIGINT NOT NULL,
	    userid BIGINT NOT NULL,
	    discussion BIGINT NOT NULL,
	    preference BIGINT NOT NULL DEFAULT 1,
	CONSTRAINT mdl_forudiscsubs_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_forum_discussion_subs IS 'Users may choose to subscribe and unsubscribe from specific discussions.'
	;
	CREATE INDEX mdl_forudiscsubs_for_ix ON mdl_forum_discussion_subs (forum)
	;
	CREATE INDEX mdl_forudiscsubs_use_ix ON mdl_forum_discussion_subs (userid)
	;
	CREATE INDEX mdl_forudiscsubs_dis_ix ON mdl_forum_discussion_subs (discussion)
	;
	CREATE UNIQUE INDEX mdl_forudiscsubs_usedis_uix ON mdl_forum_discussion_subs (userid, discussion)
	; COMMIT
LOG:  DDL LOCK TRACE: acquiring in mode <write_lock> (upgrading from <ddl_lock>) for (bdr (6678401888864649257,1,16384,)) [tracelevel=statement]
STATEMENT:  BEGIN ISOLATION LEVEL SERIALIZABLE;
	CREATE TABLE mdl_forum (
	    id BIGSERIAL,
	    course BIGINT NOT NULL DEFAULT 0,
	    type VARCHAR(20) NOT NULL DEFAULT 'general',
	    name VARCHAR(255) NOT NULL DEFAULT '',
	    intro TEXT NOT NULL,
	    introformat SMALLINT NOT NULL DEFAULT 0,
	    assessed BIGINT NOT NULL DEFAULT 0,
	    assesstimestart BIGINT NOT NULL DEFAULT 0,
	    assesstimefinish BIGINT NOT NULL DEFAULT 0,
	    scale BIGINT NOT NULL DEFAULT 0,
	    maxbytes BIGINT NOT NULL DEFAULT 0,
	    maxattachments BIGINT NOT NULL DEFAULT 1,
	    forcesubscribe SMALLINT NOT NULL DEFAULT 0,
	    trackingtype SMALLINT NOT NULL DEFAULT 1,
	    rsstype SMALLINT NOT NULL DEFAULT 0,
	    rssarticles SMALLINT NOT NULL DEFAULT 0,
	    timemodified BIGINT NOT NULL DEFAULT 0,
	    warnafter BIGINT NOT NULL DEFAULT 0,
	    blockafter BIGINT NOT NULL DEFAULT 0,
	    blockperiod BIGINT NOT NULL DEFAULT 0,
	    completiondiscussions INTEGER NOT NULL DEFAULT 0,
	    completionreplies INTEGER NOT NULL DEFAULT 0,
	    completionposts INTEGER NOT NULL DEFAULT 0,
	    displaywordcount SMALLINT NOT NULL DEFAULT 0,
	    lockdiscussionafter BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_foru_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_forum IS 'Forums contain and structure discussion'
	;
	CREATE INDEX mdl_foru_cou_ix ON mdl_forum (course)
	;
	CREATE TABLE mdl_forum_discussions (
	    id BIGSERIAL,
	    course BIGINT NOT NULL DEFAULT 0,
	    forum BIGINT NOT NULL DEFAULT 0,
	    name VARCHAR(255) NOT NULL DEFAULT '',
	    firstpost BIGINT NOT NULL DEFAULT 0,
	    userid BIGINT NOT NULL DEFAULT 0,
	    groupid BIGINT NOT NULL DEFAULT -1,
	    assessed SMALLINT NOT NULL DEFAULT 1,
	    timemodified BIGINT NOT NULL DEFAULT 0,
	    usermodified BIGINT NOT NULL DEFAULT 0,
	    timestart BIGINT NOT NULL DEFAULT 0,
	    timeend BIGINT NOT NULL DEFAULT 0,
	    pinned SMALLINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_forudisc_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_forum_discussions IS 'Forums are composed of discussions'
	;
	CREATE INDEX mdl_forudisc_use_ix ON mdl_forum_discussions (userid)
	;
	CREATE INDEX mdl_forudisc_cou_ix ON mdl_forum_discussions (course)
	;
	CREATE INDEX mdl_forudisc_for_ix ON mdl_forum_discussions (forum)
	;
	CREATE TABLE mdl_forum_posts (
	    id BIGSERIAL,
	    discussion BIGINT NOT NULL DEFAULT 0,
	    parent BIGINT NOT NULL DEFAULT 0,
	    userid BIGINT NOT NULL DEFAULT 0,
	    created BIGINT NOT NULL DEFAULT 0,
	    modified BIGINT NOT NULL DEFAULT 0,
	    mailed SMALLINT NOT NULL DEFAULT 0,
	    subject VARCHAR(255) NOT NULL DEFAULT '',
	    message TEXT NOT NULL,
	    messageformat SMALLINT NOT NULL DEFAULT 0,
	    messagetrust SMALLINT NOT NULL DEFAULT 0,
	    attachment VARCHAR(100) NOT NULL DEFAULT '',
	    totalscore SMALLINT NOT NULL DEFAULT 0,
	    mailnow BIGINT NOT NULL DEFAULT 0,
	    deleted SMALLINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_forupost_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_forum_posts IS 'All posts are stored in this table'
	;
	CREATE INDEX mdl_forupost_use_ix ON mdl_forum_posts (userid)
	;
	CREATE INDEX mdl_forupost_cre_ix ON mdl_forum_posts (created)
	;
	CREATE INDEX mdl_forupost_mai_ix ON mdl_forum_posts (mailed)
	;
	CREATE INDEX mdl_forupost_dis_ix ON mdl_forum_posts (discussion)
	;
	CREATE INDEX mdl_forupost_par_ix ON mdl_forum_posts (parent)
	;
	CREATE TABLE mdl_forum_queue (
	    id BIGSERIAL,
	    userid BIGINT NOT NULL DEFAULT 0,
	    discussionid BIGINT NOT NULL DEFAULT 0,
	    postid BIGINT NOT NULL DEFAULT 0,
	    timemodified BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_foruqueu_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_forum_queue IS 'For keeping track of posts that will be mailed in digest form'
	;
	CREATE INDEX mdl_foruqueu_use_ix ON mdl_forum_queue (userid)
	;
	CREATE INDEX mdl_foruqueu_dis_ix ON mdl_forum_queue (discussionid)
	;
	CREATE INDEX mdl_foruqueu_pos_ix ON mdl_forum_queue (postid)
	;
	CREATE TABLE mdl_forum_subscriptions (
	    id BIGSERIAL,
	    userid BIGINT NOT NULL DEFAULT 0,
	    forum BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_forusubs_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_forum_subscriptions IS 'Keeps track of who is subscribed to what forum'
	;
	CREATE INDEX mdl_forusubs_use_ix ON mdl_forum_subscriptions (userid)
	;
	CREATE INDEX mdl_forusubs_for_ix ON mdl_forum_subscriptions (forum)
	;
	CREATE UNIQUE INDEX mdl_forusubs_usefor_uix ON mdl_forum_subscriptions (userid, forum)
	;
	CREATE TABLE mdl_forum_digests (
	    id BIGSERIAL,
	    userid BIGINT NOT NULL,
	    forum BIGINT NOT NULL,
	    maildigest SMALLINT NOT NULL DEFAULT -1,
	CONSTRAINT mdl_forudige_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_forum_digests IS 'Keeps track of user mail delivery preferences for each forum'
	;
	CREATE INDEX mdl_forudige_use_ix ON mdl_forum_digests (userid)
	;
	CREATE INDEX mdl_forudige_for_ix ON mdl_forum_digests (forum)
	;
	CREATE UNIQUE INDEX mdl_forudige_forusemai_uix ON mdl_forum_digests (forum, userid, maildigest)
	;
	CREATE TABLE mdl_forum_read (
	    id BIGSERIAL,
	    userid BIGINT NOT NULL DEFAULT 0,
	    forumid BIGINT NOT NULL DEFAULT 0,
	    discussionid BIGINT NOT NULL DEFAULT 0,
	    postid BIGINT NOT NULL DEFAULT 0,
	    firstread BIGINT NOT NULL DEFAULT 0,
	    lastread BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_foruread_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_forum_read IS 'Tracks each users read posts'
	;
	CREATE INDEX mdl_foruread_usefor_ix ON mdl_forum_read (userid, forumid)
	;
	CREATE INDEX mdl_foruread_usedis_ix ON mdl_forum_read (userid, discussionid)
	;
	CREATE INDEX mdl_foruread_posuse_ix ON mdl_forum_read (postid, userid)
	;
	CREATE TABLE mdl_forum_track_prefs (
	    id BIGSERIAL,
	    userid BIGINT NOT NULL DEFAULT 0,
	    forumid BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_forutracpref_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_forum_track_prefs IS 'Tracks each users untracked forums'
	;
	CREATE INDEX mdl_forutracpref_usefor_ix ON mdl_forum_track_prefs (userid, forumid)
	;
	CREATE TABLE mdl_forum_discussion_subs (
	    id BIGSERIAL,
	    forum BIGINT NOT NULL,
	    userid BIGINT NOT NULL,
	    discussion BIGINT NOT NULL,
	    preference BIGINT NOT NULL DEFAULT 1,
	CONSTRAINT mdl_forudiscsubs_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_forum_discussion_subs IS 'Users may choose to subscribe and unsubscribe from specific discussions.'
	;
	CREATE INDEX mdl_forudiscsubs_for_ix ON mdl_forum_discussion_subs (forum)
	;
	CREATE INDEX mdl_forudiscsubs_use_ix ON mdl_forum_discussion_subs (userid)
	;
	CREATE INDEX mdl_forudiscsubs_dis_ix ON mdl_forum_discussion_subs (discussion)
	;
	CREATE UNIQUE INDEX mdl_forudiscsubs_usedis_uix ON mdl_forum_discussion_subs (userid, discussion)
	; COMMIT
LOG:  DDL LOCK TRACE: acquiring in mode <ddl_lock> for (bdr (6678401888864649257,1,16384,)) [tracelevel=statement]
STATEMENT:  BEGIN ISOLATION LEVEL SERIALIZABLE;
	CREATE TABLE mdl_glossary (
	    id BIGSERIAL,
	    course BIGINT NOT NULL DEFAULT 0,
	    name VARCHAR(255) NOT NULL DEFAULT '',
	    intro TEXT NOT NULL,
	    introformat SMALLINT NOT NULL DEFAULT 0,
	    allowduplicatedentries SMALLINT NOT NULL DEFAULT 0,
	    displayformat VARCHAR(50) NOT NULL DEFAULT 'dictionary',
	    mainglossary SMALLINT NOT NULL DEFAULT 0,
	    showspecial SMALLINT NOT NULL DEFAULT 1,
	    showalphabet SMALLINT NOT NULL DEFAULT 1,
	    showall SMALLINT NOT NULL DEFAULT 1,
	    allowcomments SMALLINT NOT NULL DEFAULT 0,
	    allowprintview SMALLINT NOT NULL DEFAULT 1,
	    usedynalink SMALLINT NOT NULL DEFAULT 1,
	    defaultapproval SMALLINT NOT NULL DEFAULT 1,
	    approvaldisplayformat VARCHAR(50) NOT NULL DEFAULT 'default',
	    globalglossary SMALLINT NOT NULL DEFAULT 0,
	    entbypage SMALLINT NOT NULL DEFAULT 10,
	    editalways SMALLINT NOT NULL DEFAULT 0,
	    rsstype SMALLINT NOT NULL DEFAULT 0,
	    rssarticles SMALLINT NOT NULL DEFAULT 0,
	    assessed BIGINT NOT NULL DEFAULT 0,
	    assesstimestart BIGINT NOT NULL DEFAULT 0,
	    assesstimefinish BIGINT NOT NULL DEFAULT 0,
	    scale BIGINT NOT NULL DEFAULT 0,
	    timecreated BIGINT NOT NULL DEFAULT 0,
	    timemodified BIGINT NOT NULL DEFAULT 0,
	    completionentries INTEGER NOT NULL DEFAULT 0,
	CONSTRAINT mdl_glos_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_glossary IS 'all glossaries'
	;
	CREATE INDEX mdl_glos_cou_ix ON mdl_glossary (course)
	;
	CREATE TABLE mdl_glossary_entries (
	    id BIGSERIAL,
	    glossaryid BIGINT NOT NULL DEFAULT 0,
	    userid BIGINT NOT NULL DEFAULT 0,
	    concept VARCHAR(255) NOT NULL DEFAULT '',
	    definition TEXT NOT NULL,
	    definitionformat SMALLINT NOT NULL DEFAULT 0,
	    definitiontrust SMALLINT NOT NULL DEFAULT 0,
	    attachment VARCHAR(100) NOT NULL DEFAULT '',
	    timecreated BIGINT NOT NULL DEFAULT 0,
	    timemodified BIGINT NOT NULL DEFAULT 0,
	    teacherentry SMALLINT NOT NULL DEFAULT 0,
	    sourceglossaryid BIGINT NOT NULL DEFAULT 0,
	    usedynalink SMALLINT NOT NULL DEFAULT 1,
	    casesensitive SMALLINT NOT NULL DEFAULT 0,
	    fullmatch SMALLINT NOT NULL DEFAULT 1,
	    approved SMALLINT NOT NULL DEFAULT 1,
	CONSTRAINT mdl_glosentr_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_glossary_entries IS 'all glossary entries'
	;
	CREATE INDEX mdl_glosentr_use_ix ON mdl_glossary_entries (userid)
	;
	CREATE INDEX mdl_glosentr_con_ix ON mdl_glossary_entries (concept)
	;
	CREATE INDEX mdl_glosentr_glo_ix ON mdl_glossary_entries (glossaryid)
	;
	CREATE TABLE mdl_glossary_alias (
	    id BIGSERIAL,
	    entryid BIGINT NOT NULL DEFAULT 0,
	    alias VARCHAR(255) NOT NULL DEFAULT '',
	CONSTRAINT mdl_glosalia_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_glossary_alias IS 'entries alias'
	;
	CREATE INDEX mdl_glosalia_ent_ix ON mdl_glossary_alias (entryid)
	;
	CREATE TABLE mdl_glossary_categories (
	    id BIGSERIAL,
	    glossaryid BIGINT NOT NULL DEFAULT 0,
	    name VARCHAR(255) NOT NULL DEFAULT '',
	    usedynalink SMALLINT NOT NULL DEFAULT 1,
	CONSTRAINT mdl_gloscate_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_glossary_categories IS 'all categories for glossary entries'
	;
	CREATE INDEX mdl_gloscate_glo_ix ON mdl_glossary_categories (glossaryid)
	;
	CREATE TABLE mdl_glossary_entries_categories (
	    id BIGSERIAL,
	    categoryid BIGINT NOT NULL DEFAULT 0,
	    entryid BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_glosentrcate_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_glossary_entries_categories IS 'categories of each glossary entry'
	;
	CREATE INDEX mdl_glosentrcate_cat_ix ON mdl_glossary_entries_categories (categoryid)
	;
	CREATE INDEX mdl_glosentrcate_ent_ix ON mdl_glossary_entries_categories (entryid)
	;
	CREATE TABLE mdl_glossary_formats (
	    id BIGSERIAL,
	    name VARCHAR(50) NOT NULL DEFAULT '',
	    popupformatname VARCHAR(50) NOT NULL DEFAULT '',
	    visible SMALLINT NOT NULL DEFAULT 1,
	    showgroup SMALLINT NOT NULL DEFAULT 1,
	    showtabs VARCHAR(100),
	    defaultmode VARCHAR(50) NOT NULL DEFAULT '',
	    defaulthook VARCHAR(50) NOT NULL DEFAULT '',
	    sortkey VARCHAR(50) NOT NULL DEFAULT '',
	    sortorder VARCHAR(50) NOT NULL DEFAULT '',
	CONSTRAINT mdl_glosform_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_glossary_formats IS 'Setting of the display formats'
	; COMMIT
LOG:  DDL LOCK TRACE: acquiring in mode <write_lock> (upgrading from <ddl_lock>) for (bdr (6678401888864649257,1,16384,)) [tracelevel=statement]
STATEMENT:  BEGIN ISOLATION LEVEL SERIALIZABLE;
	CREATE TABLE mdl_glossary (
	    id BIGSERIAL,
	    course BIGINT NOT NULL DEFAULT 0,
	    name VARCHAR(255) NOT NULL DEFAULT '',
	    intro TEXT NOT NULL,
	    introformat SMALLINT NOT NULL DEFAULT 0,
	    allowduplicatedentries SMALLINT NOT NULL DEFAULT 0,
	    displayformat VARCHAR(50) NOT NULL DEFAULT 'dictionary',
	    mainglossary SMALLINT NOT NULL DEFAULT 0,
	    showspecial SMALLINT NOT NULL DEFAULT 1,
	    showalphabet SMALLINT NOT NULL DEFAULT 1,
	    showall SMALLINT NOT NULL DEFAULT 1,
	    allowcomments SMALLINT NOT NULL DEFAULT 0,
	    allowprintview SMALLINT NOT NULL DEFAULT 1,
	    usedynalink SMALLINT NOT NULL DEFAULT 1,
	    defaultapproval SMALLINT NOT NULL DEFAULT 1,
	    approvaldisplayformat VARCHAR(50) NOT NULL DEFAULT 'default',
	    globalglossary SMALLINT NOT NULL DEFAULT 0,
	    entbypage SMALLINT NOT NULL DEFAULT 10,
	    editalways SMALLINT NOT NULL DEFAULT 0,
	    rsstype SMALLINT NOT NULL DEFAULT 0,
	    rssarticles SMALLINT NOT NULL DEFAULT 0,
	    assessed BIGINT NOT NULL DEFAULT 0,
	    assesstimestart BIGINT NOT NULL DEFAULT 0,
	    assesstimefinish BIGINT NOT NULL DEFAULT 0,
	    scale BIGINT NOT NULL DEFAULT 0,
	    timecreated BIGINT NOT NULL DEFAULT 0,
	    timemodified BIGINT NOT NULL DEFAULT 0,
	    completionentries INTEGER NOT NULL DEFAULT 0,
	CONSTRAINT mdl_glos_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_glossary IS 'all glossaries'
	;
	CREATE INDEX mdl_glos_cou_ix ON mdl_glossary (course)
	;
	CREATE TABLE mdl_glossary_entries (
	    id BIGSERIAL,
	    glossaryid BIGINT NOT NULL DEFAULT 0,
	    userid BIGINT NOT NULL DEFAULT 0,
	    concept VARCHAR(255) NOT NULL DEFAULT '',
	    definition TEXT NOT NULL,
	    definitionformat SMALLINT NOT NULL DEFAULT 0,
	    definitiontrust SMALLINT NOT NULL DEFAULT 0,
	    attachment VARCHAR(100) NOT NULL DEFAULT '',
	    timecreated BIGINT NOT NULL DEFAULT 0,
	    timemodified BIGINT NOT NULL DEFAULT 0,
	    teacherentry SMALLINT NOT NULL DEFAULT 0,
	    sourceglossaryid BIGINT NOT NULL DEFAULT 0,
	    usedynalink SMALLINT NOT NULL DEFAULT 1,
	    casesensitive SMALLINT NOT NULL DEFAULT 0,
	    fullmatch SMALLINT NOT NULL DEFAULT 1,
	    approved SMALLINT NOT NULL DEFAULT 1,
	CONSTRAINT mdl_glosentr_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_glossary_entries IS 'all glossary entries'
	;
	CREATE INDEX mdl_glosentr_use_ix ON mdl_glossary_entries (userid)
	;
	CREATE INDEX mdl_glosentr_con_ix ON mdl_glossary_entries (concept)
	;
	CREATE INDEX mdl_glosentr_glo_ix ON mdl_glossary_entries (glossaryid)
	;
	CREATE TABLE mdl_glossary_alias (
	    id BIGSERIAL,
	    entryid BIGINT NOT NULL DEFAULT 0,
	    alias VARCHAR(255) NOT NULL DEFAULT '',
	CONSTRAINT mdl_glosalia_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_glossary_alias IS 'entries alias'
	;
	CREATE INDEX mdl_glosalia_ent_ix ON mdl_glossary_alias (entryid)
	;
	CREATE TABLE mdl_glossary_categories (
	    id BIGSERIAL,
	    glossaryid BIGINT NOT NULL DEFAULT 0,
	    name VARCHAR(255) NOT NULL DEFAULT '',
	    usedynalink SMALLINT NOT NULL DEFAULT 1,
	CONSTRAINT mdl_gloscate_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_glossary_categories IS 'all categories for glossary entries'
	;
	CREATE INDEX mdl_gloscate_glo_ix ON mdl_glossary_categories (glossaryid)
	;
	CREATE TABLE mdl_glossary_entries_categories (
	    id BIGSERIAL,
	    categoryid BIGINT NOT NULL DEFAULT 0,
	    entryid BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_glosentrcate_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_glossary_entries_categories IS 'categories of each glossary entry'
	;
	CREATE INDEX mdl_glosentrcate_cat_ix ON mdl_glossary_entries_categories (categoryid)
	;
	CREATE INDEX mdl_glosentrcate_ent_ix ON mdl_glossary_entries_categories (entryid)
	;
	CREATE TABLE mdl_glossary_formats (
	    id BIGSERIAL,
	    name VARCHAR(50) NOT NULL DEFAULT '',
	    popupformatname VARCHAR(50) NOT NULL DEFAULT '',
	    visible SMALLINT NOT NULL DEFAULT 1,
	    showgroup SMALLINT NOT NULL DEFAULT 1,
	    showtabs VARCHAR(100),
	    defaultmode VARCHAR(50) NOT NULL DEFAULT '',
	    defaulthook VARCHAR(50) NOT NULL DEFAULT '',
	    sortkey VARCHAR(50) NOT NULL DEFAULT '',
	    sortorder VARCHAR(50) NOT NULL DEFAULT '',
	CONSTRAINT mdl_glosform_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_glossary_formats IS 'Setting of the display formats'
	; COMMIT
LOG:  DDL LOCK TRACE: acquiring in mode <ddl_lock> for (bdr (6678401888864649257,1,16384,)) [tracelevel=statement]
STATEMENT:  BEGIN ISOLATION LEVEL SERIALIZABLE;
	CREATE TABLE mdl_imscp (
	    id BIGSERIAL,
	    course BIGINT NOT NULL DEFAULT 0,
	    name VARCHAR(255) NOT NULL DEFAULT '',
	    intro TEXT,
	    introformat SMALLINT NOT NULL DEFAULT 0,
	    revision BIGINT NOT NULL DEFAULT 0,
	    keepold BIGINT NOT NULL DEFAULT -1,
	    structure TEXT,
	    timemodified BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_imsc_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_imscp IS 'each record is one imscp resource'
	;
	CREATE INDEX mdl_imsc_cou_ix ON mdl_imscp (course)
	; COMMIT
LOG:  DDL LOCK TRACE: acquiring in mode <write_lock> (upgrading from <ddl_lock>) for (bdr (6678401888864649257,1,16384,)) [tracelevel=statement]
STATEMENT:  BEGIN ISOLATION LEVEL SERIALIZABLE;
	CREATE TABLE mdl_imscp (
	    id BIGSERIAL,
	    course BIGINT NOT NULL DEFAULT 0,
	    name VARCHAR(255) NOT NULL DEFAULT '',
	    intro TEXT,
	    introformat SMALLINT NOT NULL DEFAULT 0,
	    revision BIGINT NOT NULL DEFAULT 0,
	    keepold BIGINT NOT NULL DEFAULT -1,
	    structure TEXT,
	    timemodified BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_imsc_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_imscp IS 'each record is one imscp resource'
	;
	CREATE INDEX mdl_imsc_cou_ix ON mdl_imscp (course)
	; COMMIT
LOG:  DDL LOCK TRACE: acquiring in mode <ddl_lock> for (bdr (6678401888864649257,1,16384,)) [tracelevel=statement]
STATEMENT:  BEGIN ISOLATION LEVEL SERIALIZABLE;
	CREATE TABLE mdl_label (
	    id BIGSERIAL,
	    course BIGINT NOT NULL DEFAULT 0,
	    name VARCHAR(255) NOT NULL DEFAULT '',
	    intro TEXT NOT NULL,
	    introformat SMALLINT DEFAULT 0,
	    timemodified BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_labe_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_label IS 'Defines labels'
	;
	CREATE INDEX mdl_labe_cou_ix ON mdl_label (course)
	; COMMIT
LOG:  DDL LOCK TRACE: acquiring in mode <write_lock> (upgrading from <ddl_lock>) for (bdr (6678401888864649257,1,16384,)) [tracelevel=statement]
STATEMENT:  BEGIN ISOLATION LEVEL SERIALIZABLE;
	CREATE TABLE mdl_label (
	    id BIGSERIAL,
	    course BIGINT NOT NULL DEFAULT 0,
	    name VARCHAR(255) NOT NULL DEFAULT '',
	    intro TEXT NOT NULL,
	    introformat SMALLINT DEFAULT 0,
	    timemodified BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_labe_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_label IS 'Defines labels'
	;
	CREATE INDEX mdl_labe_cou_ix ON mdl_label (course)
	; COMMIT
LOG:  DDL LOCK TRACE: acquiring in mode <ddl_lock> for (bdr (6678401888864649257,1,16384,)) [tracelevel=statement]
STATEMENT:  BEGIN ISOLATION LEVEL SERIALIZABLE;
	CREATE TABLE mdl_lesson (
	    id BIGSERIAL,
	    course BIGINT NOT NULL DEFAULT 0,
	    name VARCHAR(255) NOT NULL DEFAULT '',
	    intro TEXT,
	    introformat SMALLINT NOT NULL DEFAULT 0,
	    practice SMALLINT NOT NULL DEFAULT 0,
	    modattempts SMALLINT NOT NULL DEFAULT 0,
	    usepassword SMALLINT NOT NULL DEFAULT 0,
	    password VARCHAR(32) NOT NULL DEFAULT '',
	    dependency BIGINT NOT NULL DEFAULT 0,
	    conditions TEXT NOT NULL,
	    grade BIGINT NOT NULL DEFAULT 0,
	    custom SMALLINT NOT NULL DEFAULT 0,
	    ongoing SMALLINT NOT NULL DEFAULT 0,
	    usemaxgrade SMALLINT NOT NULL DEFAULT 0,
	    maxanswers SMALLINT NOT NULL DEFAULT 4,
	    maxattempts SMALLINT NOT NULL DEFAULT 5,
	    review SMALLINT NOT NULL DEFAULT 0,
	    nextpagedefault SMALLINT NOT NULL DEFAULT 0,
	    feedback SMALLINT NOT NULL DEFAULT 1,
	    minquestions SMALLINT NOT NULL DEFAULT 0,
	    maxpages SMALLINT NOT NULL DEFAULT 0,
	    timelimit BIGINT NOT NULL DEFAULT 0,
	    retake SMALLINT NOT NULL DEFAULT 1,
	    activitylink BIGINT NOT NULL DEFAULT 0,
	    mediafile VARCHAR(255) NOT NULL DEFAULT '',
	    mediaheight BIGINT NOT NULL DEFAULT 100,
	    mediawidth BIGINT NOT NULL DEFAULT 650,
	    mediaclose SMALLINT NOT NULL DEFAULT 0,
	    slideshow SMALLINT NOT NULL DEFAULT 0,
	    width BIGINT NOT NULL DEFAULT 640,
	    height BIGINT NOT NULL DEFAULT 480,
	    bgcolor VARCHAR(7) NOT NULL DEFAULT '#FFFFFF',
	    displayleft SMALLINT NOT NULL DEFAULT 0,
	    displayleftif SMALLINT NOT NULL DEFAULT 0,
	    progressbar SMALLINT NOT NULL DEFAULT 0,
	    available BIGINT NOT NULL DEFAULT 0,
	    deadline BIGINT NOT NULL DEFAULT 0,
	    timemodified BIGINT NOT NULL DEFAULT 0,
	    completionendreached SMALLINT DEFAULT 0,
	    completiontimespent BIGINT DEFAULT 0,
	    allowofflineattempts SMALLINT DEFAULT 0,
	CONSTRAINT mdl_less_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_lesson IS 'Defines lesson'
	;
	CREATE INDEX mdl_less_cou_ix ON mdl_lesson (course)
	;
	CREATE TABLE mdl_lesson_pages (
	    id BIGSERIAL,
	    lessonid BIGINT NOT NULL DEFAULT 0,
	    prevpageid BIGINT NOT NULL DEFAULT 0,
	    nextpageid BIGINT NOT NULL DEFAULT 0,
	    qtype SMALLINT NOT NULL DEFAULT 0,
	    qoption SMALLINT NOT NULL DEFAULT 0,
	    layout SMALLINT NOT NULL DEFAULT 1,
	    display SMALLINT NOT NULL DEFAULT 1,
	    timecreated BIGINT NOT NULL DEFAULT 0,
	    timemodified BIGINT NOT NULL DEFAULT 0,
	    title VARCHAR(255) NOT NULL DEFAULT '',
	    contents TEXT NOT NULL,
	    contentsformat SMALLINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_lesspage_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_lesson_pages IS 'Defines lesson_pages'
	;
	CREATE INDEX mdl_lesspage_les_ix ON mdl_lesson_pages (lessonid)
	;
	CREATE TABLE mdl_lesson_answers (
	    id BIGSERIAL,
	    lessonid BIGINT NOT NULL DEFAULT 0,
	    pageid BIGINT NOT NULL DEFAULT 0,
	    jumpto BIGINT NOT NULL DEFAULT 0,
	    grade SMALLINT NOT NULL DEFAULT 0,
	    score BIGINT NOT NULL DEFAULT 0,
	    flags SMALLINT NOT NULL DEFAULT 0,
	    timecreated BIGINT NOT NULL DEFAULT 0,
	    timemodified BIGINT NOT NULL DEFAULT 0,
	    answer TEXT,
	    answerformat SMALLINT NOT NULL DEFAULT 0,
	    response TEXT,
	    responseformat SMALLINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_lessansw_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_lesson_answers IS 'Defines lesson_answers'
	;
	CREATE INDEX mdl_lessansw_les_ix ON mdl_lesson_answers (lessonid)
	;
	CREATE INDEX mdl_lessansw_pag_ix ON mdl_lesson_answers (pageid)
	;
	CREATE TABLE mdl_lesson_attempts (
	    id BIGSERIAL,
	    lessonid BIGINT NOT NULL DEFAULT 0,
	    pageid BIGINT NOT NULL DEFAULT 0,
	    userid BIGINT NOT NULL DEFAULT 0,
	    answerid BIGINT NOT NULL DEFAULT 0,
	    retry SMALLINT NOT NULL DEFAULT 0,
	    correct BIGINT NOT NULL DEFAULT 0,
	    useranswer TEXT,
	    timeseen BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_lessatte_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_lesson_attempts IS 'Defines lesson_attempts'
	;
	CREATE INDEX mdl_lessatte_use_ix ON mdl_lesson_attempts (userid)
	;
	CREATE INDEX mdl_lessatte_les_ix ON mdl_lesson_attempts (lessonid)
	;
	CREATE INDEX mdl_lessatte_pag_ix ON mdl_lesson_attempts (pageid)
	;
	CREATE INDEX mdl_lessatte_ans_ix ON mdl_lesson_attempts (answerid)
	;
	CREATE TABLE mdl_lesson_grades (
	    id BIGSERIAL,
	    lessonid BIGINT NOT NULL DEFAULT 0,
	    userid BIGINT NOT NULL DEFAULT 0,
	    grade DOUBLE PRECISION NOT NULL DEFAULT 0,
	    late SMALLINT NOT NULL DEFAULT 0,
	    completed BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_lessgrad_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_lesson_grades IS 'Defines lesson_grades'
	;
	CREATE INDEX mdl_lessgrad_use_ix ON mdl_lesson_grades (userid)
	;
	CREATE INDEX mdl_lessgrad_les_ix ON mdl_lesson_grades (lessonid)
	;
	CREATE TABLE mdl_lesson_timer (
	    id BIGSERIAL,
	    lessonid BIGINT NOT NULL DEFAULT 0,
	    userid BIGINT NOT NULL DEFAULT 0,
	    starttime BIGINT NOT NULL DEFAULT 0,
	    lessontime BIGINT NOT NULL DEFAULT 0,
	    completed SMALLINT DEFAULT 0,
	    timemodifiedoffline BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_lesstime_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_lesson_timer IS 'lesson timer for each lesson'
	;
	CREATE INDEX mdl_lesstime_use_ix ON mdl_lesson_timer (userid)
	;
	CREATE INDEX mdl_lesstime_les_ix ON mdl_lesson_timer (lessonid)
	;
	CREATE TABLE mdl_lesson_branch (
	    id BIGSERIAL,
	    lessonid BIGINT NOT NULL DEFAULT 0,
	    userid BIGINT NOT NULL DEFAULT 0,
	    pageid BIGINT NOT NULL DEFAULT 0,
	    retry BIGINT NOT NULL DEFAULT 0,
	    flag SMALLINT NOT NULL DEFAULT 0,
	    timeseen BIGINT NOT NULL DEFAULT 0,
	    nextpageid BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_lessbran_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_lesson_branch IS 'branches for each lesson/user'
	;
	CREATE INDEX mdl_lessbran_use_ix ON mdl_lesson_branch (userid)
	;
	CREATE INDEX mdl_lessbran_les_ix ON mdl_lesson_branch (lessonid)
	;
	CREATE INDEX mdl_lessbran_pag_ix ON mdl_lesson_branch (pageid)
	;
	CREATE TABLE mdl_lesson_overrides (
	    id BIGSERIAL,
	    lessonid BIGINT NOT NULL DEFAULT 0,
	    groupid BIGINT,
	    userid BIGINT,
	    available BIGINT,
	    deadline BIGINT,
	    timelimit BIGINT,
	    review SMALLINT,
	    maxattempts SMALLINT,
	    retake SMALLINT,
	    password VARCHAR(32),
	CONSTRAINT mdl_lessover_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_lesson_overrides IS 'The overrides to lesson settings.'
	;
	CREATE INDEX mdl_lessover_les_ix ON mdl_lesson_overrides (lessonid)
	;
	CREATE INDEX mdl_lessover_gro_ix ON mdl_lesson_overrides (groupid)
	;
	CREATE INDEX mdl_lessover_use_ix ON mdl_lesson_overrides (userid)
	; COMMIT
LOG:  DDL LOCK TRACE: acquiring in mode <write_lock> (upgrading from <ddl_lock>) for (bdr (6678401888864649257,1,16384,)) [tracelevel=statement]
STATEMENT:  BEGIN ISOLATION LEVEL SERIALIZABLE;
	CREATE TABLE mdl_lesson (
	    id BIGSERIAL,
	    course BIGINT NOT NULL DEFAULT 0,
	    name VARCHAR(255) NOT NULL DEFAULT '',
	    intro TEXT,
	    introformat SMALLINT NOT NULL DEFAULT 0,
	    practice SMALLINT NOT NULL DEFAULT 0,
	    modattempts SMALLINT NOT NULL DEFAULT 0,
	    usepassword SMALLINT NOT NULL DEFAULT 0,
	    password VARCHAR(32) NOT NULL DEFAULT '',
	    dependency BIGINT NOT NULL DEFAULT 0,
	    conditions TEXT NOT NULL,
	    grade BIGINT NOT NULL DEFAULT 0,
	    custom SMALLINT NOT NULL DEFAULT 0,
	    ongoing SMALLINT NOT NULL DEFAULT 0,
	    usemaxgrade SMALLINT NOT NULL DEFAULT 0,
	    maxanswers SMALLINT NOT NULL DEFAULT 4,
	    maxattempts SMALLINT NOT NULL DEFAULT 5,
	    review SMALLINT NOT NULL DEFAULT 0,
	    nextpagedefault SMALLINT NOT NULL DEFAULT 0,
	    feedback SMALLINT NOT NULL DEFAULT 1,
	    minquestions SMALLINT NOT NULL DEFAULT 0,
	    maxpages SMALLINT NOT NULL DEFAULT 0,
	    timelimit BIGINT NOT NULL DEFAULT 0,
	    retake SMALLINT NOT NULL DEFAULT 1,
	    activitylink BIGINT NOT NULL DEFAULT 0,
	    mediafile VARCHAR(255) NOT NULL DEFAULT '',
	    mediaheight BIGINT NOT NULL DEFAULT 100,
	    mediawidth BIGINT NOT NULL DEFAULT 650,
	    mediaclose SMALLINT NOT NULL DEFAULT 0,
	    slideshow SMALLINT NOT NULL DEFAULT 0,
	    width BIGINT NOT NULL DEFAULT 640,
	    height BIGINT NOT NULL DEFAULT 480,
	    bgcolor VARCHAR(7) NOT NULL DEFAULT '#FFFFFF',
	    displayleft SMALLINT NOT NULL DEFAULT 0,
	    displayleftif SMALLINT NOT NULL DEFAULT 0,
	    progressbar SMALLINT NOT NULL DEFAULT 0,
	    available BIGINT NOT NULL DEFAULT 0,
	    deadline BIGINT NOT NULL DEFAULT 0,
	    timemodified BIGINT NOT NULL DEFAULT 0,
	    completionendreached SMALLINT DEFAULT 0,
	    completiontimespent BIGINT DEFAULT 0,
	    allowofflineattempts SMALLINT DEFAULT 0,
	CONSTRAINT mdl_less_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_lesson IS 'Defines lesson'
	;
	CREATE INDEX mdl_less_cou_ix ON mdl_lesson (course)
	;
	CREATE TABLE mdl_lesson_pages (
	    id BIGSERIAL,
	    lessonid BIGINT NOT NULL DEFAULT 0,
	    prevpageid BIGINT NOT NULL DEFAULT 0,
	    nextpageid BIGINT NOT NULL DEFAULT 0,
	    qtype SMALLINT NOT NULL DEFAULT 0,
	    qoption SMALLINT NOT NULL DEFAULT 0,
	    layout SMALLINT NOT NULL DEFAULT 1,
	    display SMALLINT NOT NULL DEFAULT 1,
	    timecreated BIGINT NOT NULL DEFAULT 0,
	    timemodified BIGINT NOT NULL DEFAULT 0,
	    title VARCHAR(255) NOT NULL DEFAULT '',
	    contents TEXT NOT NULL,
	    contentsformat SMALLINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_lesspage_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_lesson_pages IS 'Defines lesson_pages'
	;
	CREATE INDEX mdl_lesspage_les_ix ON mdl_lesson_pages (lessonid)
	;
	CREATE TABLE mdl_lesson_answers (
	    id BIGSERIAL,
	    lessonid BIGINT NOT NULL DEFAULT 0,
	    pageid BIGINT NOT NULL DEFAULT 0,
	    jumpto BIGINT NOT NULL DEFAULT 0,
	    grade SMALLINT NOT NULL DEFAULT 0,
	    score BIGINT NOT NULL DEFAULT 0,
	    flags SMALLINT NOT NULL DEFAULT 0,
	    timecreated BIGINT NOT NULL DEFAULT 0,
	    timemodified BIGINT NOT NULL DEFAULT 0,
	    answer TEXT,
	    answerformat SMALLINT NOT NULL DEFAULT 0,
	    response TEXT,
	    responseformat SMALLINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_lessansw_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_lesson_answers IS 'Defines lesson_answers'
	;
	CREATE INDEX mdl_lessansw_les_ix ON mdl_lesson_answers (lessonid)
	;
	CREATE INDEX mdl_lessansw_pag_ix ON mdl_lesson_answers (pageid)
	;
	CREATE TABLE mdl_lesson_attempts (
	    id BIGSERIAL,
	    lessonid BIGINT NOT NULL DEFAULT 0,
	    pageid BIGINT NOT NULL DEFAULT 0,
	    userid BIGINT NOT NULL DEFAULT 0,
	    answerid BIGINT NOT NULL DEFAULT 0,
	    retry SMALLINT NOT NULL DEFAULT 0,
	    correct BIGINT NOT NULL DEFAULT 0,
	    useranswer TEXT,
	    timeseen BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_lessatte_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_lesson_attempts IS 'Defines lesson_attempts'
	;
	CREATE INDEX mdl_lessatte_use_ix ON mdl_lesson_attempts (userid)
	;
	CREATE INDEX mdl_lessatte_les_ix ON mdl_lesson_attempts (lessonid)
	;
	CREATE INDEX mdl_lessatte_pag_ix ON mdl_lesson_attempts (pageid)
	;
	CREATE INDEX mdl_lessatte_ans_ix ON mdl_lesson_attempts (answerid)
	;
	CREATE TABLE mdl_lesson_grades (
	    id BIGSERIAL,
	    lessonid BIGINT NOT NULL DEFAULT 0,
	    userid BIGINT NOT NULL DEFAULT 0,
	    grade DOUBLE PRECISION NOT NULL DEFAULT 0,
	    late SMALLINT NOT NULL DEFAULT 0,
	    completed BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_lessgrad_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_lesson_grades IS 'Defines lesson_grades'
	;
	CREATE INDEX mdl_lessgrad_use_ix ON mdl_lesson_grades (userid)
	;
	CREATE INDEX mdl_lessgrad_les_ix ON mdl_lesson_grades (lessonid)
	;
	CREATE TABLE mdl_lesson_timer (
	    id BIGSERIAL,
	    lessonid BIGINT NOT NULL DEFAULT 0,
	    userid BIGINT NOT NULL DEFAULT 0,
	    starttime BIGINT NOT NULL DEFAULT 0,
	    lessontime BIGINT NOT NULL DEFAULT 0,
	    completed SMALLINT DEFAULT 0,
	    timemodifiedoffline BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_lesstime_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_lesson_timer IS 'lesson timer for each lesson'
	;
	CREATE INDEX mdl_lesstime_use_ix ON mdl_lesson_timer (userid)
	;
	CREATE INDEX mdl_lesstime_les_ix ON mdl_lesson_timer (lessonid)
	;
	CREATE TABLE mdl_lesson_branch (
	    id BIGSERIAL,
	    lessonid BIGINT NOT NULL DEFAULT 0,
	    userid BIGINT NOT NULL DEFAULT 0,
	    pageid BIGINT NOT NULL DEFAULT 0,
	    retry BIGINT NOT NULL DEFAULT 0,
	    flag SMALLINT NOT NULL DEFAULT 0,
	    timeseen BIGINT NOT NULL DEFAULT 0,
	    nextpageid BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_lessbran_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_lesson_branch IS 'branches for each lesson/user'
	;
	CREATE INDEX mdl_lessbran_use_ix ON mdl_lesson_branch (userid)
	;
	CREATE INDEX mdl_lessbran_les_ix ON mdl_lesson_branch (lessonid)
	;
	CREATE INDEX mdl_lessbran_pag_ix ON mdl_lesson_branch (pageid)
	;
	CREATE TABLE mdl_lesson_overrides (
	    id BIGSERIAL,
	    lessonid BIGINT NOT NULL DEFAULT 0,
	    groupid BIGINT,
	    userid BIGINT,
	    available BIGINT,
	    deadline BIGINT,
	    timelimit BIGINT,
	    review SMALLINT,
	    maxattempts SMALLINT,
	    retake SMALLINT,
	    password VARCHAR(32),
	CONSTRAINT mdl_lessover_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_lesson_overrides IS 'The overrides to lesson settings.'
	;
	CREATE INDEX mdl_lessover_les_ix ON mdl_lesson_overrides (lessonid)
	;
	CREATE INDEX mdl_lessover_gro_ix ON mdl_lesson_overrides (groupid)
	;
	CREATE INDEX mdl_lessover_use_ix ON mdl_lesson_overrides (userid)
	; COMMIT
LOG:  DDL LOCK TRACE: acquiring in mode <ddl_lock> for (bdr (6678401888864649257,1,16384,)) [tracelevel=statement]
STATEMENT:  BEGIN ISOLATION LEVEL SERIALIZABLE;
	CREATE TABLE mdl_lti (
	    id BIGSERIAL,
	    course BIGINT NOT NULL DEFAULT 0,
	    name VARCHAR(255) NOT NULL DEFAULT '',
	    intro TEXT,
	    introformat SMALLINT DEFAULT 0,
	    timecreated BIGINT NOT NULL DEFAULT 0,
	    timemodified BIGINT NOT NULL DEFAULT 0,
	    typeid BIGINT,
	    toolurl TEXT NOT NULL,
	    securetoolurl TEXT,
	    instructorchoicesendname SMALLINT,
	    instructorchoicesendemailaddr SMALLINT,
	    instructorchoiceallowroster SMALLINT,
	    instructorchoiceallowsetting SMALLINT,
	    instructorcustomparameters VARCHAR(255),
	    instructorchoiceacceptgrades SMALLINT,
	    grade BIGINT NOT NULL DEFAULT 100,
	    launchcontainer SMALLINT NOT NULL DEFAULT 1,
	    resourcekey VARCHAR(255),
	    password VARCHAR(255),
	    debuglaunch SMALLINT NOT NULL DEFAULT 0,
	    showtitlelaunch SMALLINT NOT NULL DEFAULT 0,
	    showdescriptionlaunch SMALLINT NOT NULL DEFAULT 0,
	    servicesalt VARCHAR(40),
	    icon TEXT,
	    secureicon TEXT,
	CONSTRAINT mdl_lti_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_lti IS 'This table contains Basic LTI activities instances'
	;
	CREATE INDEX mdl_lti_cou_ix ON mdl_lti (course)
	;
	CREATE TABLE mdl_lti_tool_proxies (
	    id BIGSERIAL,
	    name VARCHAR(255) NOT NULL DEFAULT 'Tool Provider',
	    regurl TEXT,
	    state SMALLINT NOT NULL DEFAULT 1,
	    guid VARCHAR(255),
	    secret VARCHAR(255),
	    vendorcode VARCHAR(255),
	    capabilityoffered TEXT NOT NULL,
	    serviceoffered TEXT NOT NULL,
	    toolproxy TEXT,
	    createdby BIGINT NOT NULL,
	    timecreated BIGINT NOT NULL,
	    timemodified BIGINT NOT NULL,
	CONSTRAINT mdl_ltitoolprox_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_lti_tool_proxies IS 'LTI tool proxy registrations'
	;
	CREATE UNIQUE INDEX mdl_ltitoolprox_gui_uix ON mdl_lti_tool_proxies (guid)
	;
	CREATE TABLE mdl_lti_types (
	    id BIGSERIAL,
	    name VARCHAR(255) NOT NULL DEFAULT 'basiclti Activity',
	    baseurl TEXT NOT NULL,
	    tooldomain VARCHAR(255) NOT NULL DEFAULT '',
	    state SMALLINT NOT NULL DEFAULT 2,
	    course BIGINT NOT NULL,
	    coursevisible SMALLINT NOT NULL DEFAULT 0,
	    toolproxyid BIGINT,
	    enabledcapability TEXT,
	    parameter TEXT,
	    icon TEXT,
	    secureicon TEXT,
	    createdby BIGINT NOT NULL,
	    timecreated BIGINT NOT NULL,
	    timemodified BIGINT NOT NULL,
	    description TEXT,
	CONSTRAINT mdl_ltitype_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_lti_types IS 'Basic LTI pre-configured activities'
	;
	CREATE INDEX mdl_ltitype_cou_ix ON mdl_lti_types (course)
	;
	CREATE INDEX mdl_ltitype_too_ix ON mdl_lti_types (tooldomain)
	;
	CREATE TABLE mdl_lti_types_config (
	    id BIGSERIAL,
	    typeid BIGINT NOT NULL,
	    name VARCHAR(100) NOT NULL DEFAULT '',
	    value TEXT NOT NULL,
	CONSTRAINT mdl_ltitypeconf_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_lti_types_config IS 'Basic LTI types configuration'
	;
	CREATE INDEX mdl_ltitypeconf_typ_ix ON mdl_lti_types_config (typeid)
	;
	CREATE TABLE mdl_lti_tool_settings (
	    id BIGSERIAL,
	    toolproxyid BIGINT NOT NULL,
	    course BIGINT,
	    coursemoduleid BIGINT,
	    settings TEXT NOT NULL,
	    timecreated BIGINT NOT NULL,
	    timemodified BIGINT NOT NULL,
	CONSTRAINT mdl_ltitoolsett_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_lti_tool_settings IS 'LTI tool setting values'
	;
	CREATE INDEX mdl_ltitoolsett_too_ix ON mdl_lti_tool_settings (toolproxyid)
	;
	CREATE INDEX mdl_ltitoolsett_cou_ix ON mdl_lti_tool_settings (course)
	;
	CREATE INDEX mdl_ltitoolsett_cou2_ix ON mdl_lti_tool_settings (coursemoduleid)
	;
	CREATE TABLE mdl_lti_submission (
	    id BIGSERIAL,
	    ltiid BIGINT NOT NULL,
	    userid BIGINT NOT NULL,
	    datesubmitted BIGINT NOT NULL,
	    dateupdated BIGINT NOT NULL,
	    gradepercent NUMERIC(10,5) NOT NULL,
	    originalgrade NUMERIC(10,5) NOT NULL,
	    launchid BIGINT NOT NULL,
	    state SMALLINT NOT NULL,
	CONSTRAINT mdl_ltisubm_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_lti_submission IS 'Keeps track of individual submissions for LTI activities.'
	;
	CREATE INDEX mdl_ltisubm_lti_ix ON mdl_lti_submission (ltiid)
	; COMMIT
LOG:  DDL LOCK TRACE: acquiring in mode <write_lock> (upgrading from <ddl_lock>) for (bdr (6678401888864649257,1,16384,)) [tracelevel=statement]
STATEMENT:  BEGIN ISOLATION LEVEL SERIALIZABLE;
	CREATE TABLE mdl_lti (
	    id BIGSERIAL,
	    course BIGINT NOT NULL DEFAULT 0,
	    name VARCHAR(255) NOT NULL DEFAULT '',
	    intro TEXT,
	    introformat SMALLINT DEFAULT 0,
	    timecreated BIGINT NOT NULL DEFAULT 0,
	    timemodified BIGINT NOT NULL DEFAULT 0,
	    typeid BIGINT,
	    toolurl TEXT NOT NULL,
	    securetoolurl TEXT,
	    instructorchoicesendname SMALLINT,
	    instructorchoicesendemailaddr SMALLINT,
	    instructorchoiceallowroster SMALLINT,
	    instructorchoiceallowsetting SMALLINT,
	    instructorcustomparameters VARCHAR(255),
	    instructorchoiceacceptgrades SMALLINT,
	    grade BIGINT NOT NULL DEFAULT 100,
	    launchcontainer SMALLINT NOT NULL DEFAULT 1,
	    resourcekey VARCHAR(255),
	    password VARCHAR(255),
	    debuglaunch SMALLINT NOT NULL DEFAULT 0,
	    showtitlelaunch SMALLINT NOT NULL DEFAULT 0,
	    showdescriptionlaunch SMALLINT NOT NULL DEFAULT 0,
	    servicesalt VARCHAR(40),
	    icon TEXT,
	    secureicon TEXT,
	CONSTRAINT mdl_lti_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_lti IS 'This table contains Basic LTI activities instances'
	;
	CREATE INDEX mdl_lti_cou_ix ON mdl_lti (course)
	;
	CREATE TABLE mdl_lti_tool_proxies (
	    id BIGSERIAL,
	    name VARCHAR(255) NOT NULL DEFAULT 'Tool Provider',
	    regurl TEXT,
	    state SMALLINT NOT NULL DEFAULT 1,
	    guid VARCHAR(255),
	    secret VARCHAR(255),
	    vendorcode VARCHAR(255),
	    capabilityoffered TEXT NOT NULL,
	    serviceoffered TEXT NOT NULL,
	    toolproxy TEXT,
	    createdby BIGINT NOT NULL,
	    timecreated BIGINT NOT NULL,
	    timemodified BIGINT NOT NULL,
	CONSTRAINT mdl_ltitoolprox_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_lti_tool_proxies IS 'LTI tool proxy registrations'
	;
	CREATE UNIQUE INDEX mdl_ltitoolprox_gui_uix ON mdl_lti_tool_proxies (guid)
	;
	CREATE TABLE mdl_lti_types (
	    id BIGSERIAL,
	    name VARCHAR(255) NOT NULL DEFAULT 'basiclti Activity',
	    baseurl TEXT NOT NULL,
	    tooldomain VARCHAR(255) NOT NULL DEFAULT '',
	    state SMALLINT NOT NULL DEFAULT 2,
	    course BIGINT NOT NULL,
	    coursevisible SMALLINT NOT NULL DEFAULT 0,
	    toolproxyid BIGINT,
	    enabledcapability TEXT,
	    parameter TEXT,
	    icon TEXT,
	    secureicon TEXT,
	    createdby BIGINT NOT NULL,
	    timecreated BIGINT NOT NULL,
	    timemodified BIGINT NOT NULL,
	    description TEXT,
	CONSTRAINT mdl_ltitype_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_lti_types IS 'Basic LTI pre-configured activities'
	;
	CREATE INDEX mdl_ltitype_cou_ix ON mdl_lti_types (course)
	;
	CREATE INDEX mdl_ltitype_too_ix ON mdl_lti_types (tooldomain)
	;
	CREATE TABLE mdl_lti_types_config (
	    id BIGSERIAL,
	    typeid BIGINT NOT NULL,
	    name VARCHAR(100) NOT NULL DEFAULT '',
	    value TEXT NOT NULL,
	CONSTRAINT mdl_ltitypeconf_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_lti_types_config IS 'Basic LTI types configuration'
	;
	CREATE INDEX mdl_ltitypeconf_typ_ix ON mdl_lti_types_config (typeid)
	;
	CREATE TABLE mdl_lti_tool_settings (
	    id BIGSERIAL,
	    toolproxyid BIGINT NOT NULL,
	    course BIGINT,
	    coursemoduleid BIGINT,
	    settings TEXT NOT NULL,
	    timecreated BIGINT NOT NULL,
	    timemodified BIGINT NOT NULL,
	CONSTRAINT mdl_ltitoolsett_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_lti_tool_settings IS 'LTI tool setting values'
	;
	CREATE INDEX mdl_ltitoolsett_too_ix ON mdl_lti_tool_settings (toolproxyid)
	;
	CREATE INDEX mdl_ltitoolsett_cou_ix ON mdl_lti_tool_settings (course)
	;
	CREATE INDEX mdl_ltitoolsett_cou2_ix ON mdl_lti_tool_settings (coursemoduleid)
	;
	CREATE TABLE mdl_lti_submission (
	    id BIGSERIAL,
	    ltiid BIGINT NOT NULL,
	    userid BIGINT NOT NULL,
	    datesubmitted BIGINT NOT NULL,
	    dateupdated BIGINT NOT NULL,
	    gradepercent NUMERIC(10,5) NOT NULL,
	    originalgrade NUMERIC(10,5) NOT NULL,
	    launchid BIGINT NOT NULL,
	    state SMALLINT NOT NULL,
	CONSTRAINT mdl_ltisubm_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_lti_submission IS 'Keeps track of individual submissions for LTI activities.'
	;
	CREATE INDEX mdl_ltisubm_lti_ix ON mdl_lti_submission (ltiid)
	; COMMIT
LOG:  DDL LOCK TRACE: acquiring in mode <ddl_lock> for (bdr (6678401888864649257,1,16384,)) [tracelevel=statement]
STATEMENT:  BEGIN ISOLATION LEVEL SERIALIZABLE;
	CREATE TABLE mdl_page (
	    id BIGSERIAL,
	    course BIGINT NOT NULL DEFAULT 0,
	    name VARCHAR(255) NOT NULL DEFAULT '',
	    intro TEXT,
	    introformat SMALLINT NOT NULL DEFAULT 0,
	    content TEXT,
	    contentformat SMALLINT NOT NULL DEFAULT 0,
	    legacyfiles SMALLINT NOT NULL DEFAULT 0,
	    legacyfileslast BIGINT,
	    display SMALLINT NOT NULL DEFAULT 0,
	    displayoptions TEXT,
	    revision BIGINT NOT NULL DEFAULT 0,
	    timemodified BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_page_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_page IS 'Each record is one page and its config data'
	;
	CREATE INDEX mdl_page_cou_ix ON mdl_page (course)
	; COMMIT
LOG:  DDL LOCK TRACE: acquiring in mode <write_lock> (upgrading from <ddl_lock>) for (bdr (6678401888864649257,1,16384,)) [tracelevel=statement]
STATEMENT:  BEGIN ISOLATION LEVEL SERIALIZABLE;
	CREATE TABLE mdl_page (
	    id BIGSERIAL,
	    course BIGINT NOT NULL DEFAULT 0,
	    name VARCHAR(255) NOT NULL DEFAULT '',
	    intro TEXT,
	    introformat SMALLINT NOT NULL DEFAULT 0,
	    content TEXT,
	    contentformat SMALLINT NOT NULL DEFAULT 0,
	    legacyfiles SMALLINT NOT NULL DEFAULT 0,
	    legacyfileslast BIGINT,
	    display SMALLINT NOT NULL DEFAULT 0,
	    displayoptions TEXT,
	    revision BIGINT NOT NULL DEFAULT 0,
	    timemodified BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_page_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_page IS 'Each record is one page and its config data'
	;
	CREATE INDEX mdl_page_cou_ix ON mdl_page (course)
	; COMMIT
LOG:  DDL LOCK TRACE: acquiring in mode <ddl_lock> for (bdr (6678401888864649257,1,16384,)) [tracelevel=statement]
STATEMENT:  BEGIN ISOLATION LEVEL SERIALIZABLE;
	CREATE TABLE mdl_quiz (
	    id BIGSERIAL,
	    course BIGINT NOT NULL DEFAULT 0,
	    name VARCHAR(255) NOT NULL DEFAULT '',
	    intro TEXT NOT NULL,
	    introformat SMALLINT NOT NULL DEFAULT 0,
	    timeopen BIGINT NOT NULL DEFAULT 0,
	    timeclose BIGINT NOT NULL DEFAULT 0,
	    timelimit BIGINT NOT NULL DEFAULT 0,
	    overduehandling VARCHAR(16) NOT NULL DEFAULT 'autoabandon',
	    graceperiod BIGINT NOT NULL DEFAULT 0,
	    preferredbehaviour VARCHAR(32) NOT NULL DEFAULT '',
	    canredoquestions SMALLINT NOT NULL DEFAULT 0,
	    attempts INTEGER NOT NULL DEFAULT 0,
	    attemptonlast SMALLINT NOT NULL DEFAULT 0,
	    grademethod SMALLINT NOT NULL DEFAULT 1,
	    decimalpoints SMALLINT NOT NULL DEFAULT 2,
	    questiondecimalpoints SMALLINT NOT NULL DEFAULT -1,
	    reviewattempt INTEGER NOT NULL DEFAULT 0,
	    reviewcorrectness INTEGER NOT NULL DEFAULT 0,
	    reviewmarks INTEGER NOT NULL DEFAULT 0,
	    reviewspecificfeedback INTEGER NOT NULL DEFAULT 0,
	    reviewgeneralfeedback INTEGER NOT NULL DEFAULT 0,
	    reviewrightanswer INTEGER NOT NULL DEFAULT 0,
	    reviewoverallfeedback INTEGER NOT NULL DEFAULT 0,
	    questionsperpage BIGINT NOT NULL DEFAULT 0,
	    navmethod VARCHAR(16) NOT NULL DEFAULT 'free',
	    shuffleanswers SMALLINT NOT NULL DEFAULT 0,
	    sumgrades NUMERIC(10,5) NOT NULL DEFAULT 0,
	    grade NUMERIC(10,5) NOT NULL DEFAULT 0,
	    timecreated BIGINT NOT NULL DEFAULT 0,
	    timemodified BIGINT NOT NULL DEFAULT 0,
	    password VARCHAR(255) NOT NULL DEFAULT '',
	    subnet VARCHAR(255) NOT NULL DEFAULT '',
	    browsersecurity VARCHAR(32) NOT NULL DEFAULT '',
	    delay1 BIGINT NOT NULL DEFAULT 0,
	    delay2 BIGINT NOT NULL DEFAULT 0,
	    showuserpicture SMALLINT NOT NULL DEFAULT 0,
	    showblocks SMALLINT NOT NULL DEFAULT 0,
	    completionattemptsexhausted SMALLINT DEFAULT 0,
	    completionpass SMALLINT DEFAULT 0,
	    allowofflineattempts SMALLINT DEFAULT 0,
	CONSTRAINT mdl_quiz_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_quiz IS 'The settings for each quiz.'
	;
	CREATE INDEX mdl_quiz_cou_ix ON mdl_quiz (course)
	;
	CREATE TABLE mdl_quiz_slots (
	    id BIGSERIAL,
	    slot BIGINT NOT NULL,
	    quizid BIGINT NOT NULL DEFAULT 0,
	    page BIGINT NOT NULL,
	    requireprevious SMALLINT NOT NULL DEFAULT 0,
	    questionid BIGINT NOT NULL DEFAULT 0,
	    questioncategoryid BIGINT,
	    includingsubcategories SMALLINT,
	    maxmark NUMERIC(12,7) NOT NULL DEFAULT 0,
	CONSTRAINT mdl_quizslot_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_quiz_slots IS 'Stores the question used in a quiz, with the order, and for each question, which page it appears on, and the maximum mark (weight).'
	;
	CREATE UNIQUE INDEX mdl_quizslot_quislo_uix ON mdl_quiz_slots (quizid, slot)
	;
	CREATE INDEX mdl_quizslot_qui_ix ON mdl_quiz_slots (quizid)
	;
	CREATE INDEX mdl_quizslot_que_ix ON mdl_quiz_slots (questionid)
	;
	CREATE INDEX mdl_quizslot_que2_ix ON mdl_quiz_slots (questioncategoryid)
	;
	CREATE TABLE mdl_quiz_sections (
	    id BIGSERIAL,
	    quizid BIGINT NOT NULL,
	    firstslot BIGINT NOT NULL,
	    heading VARCHAR(1333),
	    shufflequestions SMALLINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_quizsect_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_quiz_sections IS 'Stores sections of a quiz with section name (heading), from slot-number N and whether the question order should be shuffled.'
	;
	CREATE UNIQUE INDEX mdl_quizsect_quifir_uix ON mdl_quiz_sections (quizid, firstslot)
	;
	CREATE INDEX mdl_quizsect_qui_ix ON mdl_quiz_sections (quizid)
	;
	CREATE TABLE mdl_quiz_feedback (
	    id BIGSERIAL,
	    quizid BIGINT NOT NULL DEFAULT 0,
	    feedbacktext TEXT NOT NULL,
	    feedbacktextformat SMALLINT NOT NULL DEFAULT 0,
	    mingrade NUMERIC(10,5) NOT NULL DEFAULT 0,
	    maxgrade NUMERIC(10,5) NOT NULL DEFAULT 0,
	CONSTRAINT mdl_quizfeed_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_quiz_feedback IS 'Feedback given to students based on which grade band their overall score lies.'
	;
	CREATE INDEX mdl_quizfeed_qui_ix ON mdl_quiz_feedback (quizid)
	;
	CREATE TABLE mdl_quiz_overrides (
	    id BIGSERIAL,
	    quiz BIGINT NOT NULL DEFAULT 0,
	    groupid BIGINT,
	    userid BIGINT,
	    timeopen BIGINT,
	    timeclose BIGINT,
	    timelimit BIGINT,
	    attempts INTEGER,
	    password VARCHAR(255),
	CONSTRAINT mdl_quizover_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_quiz_overrides IS 'The overrides to quiz settings on a per-user and per-group basis.'
	;
	CREATE INDEX mdl_quizover_qui_ix ON mdl_quiz_overrides (quiz)
	;
	CREATE INDEX mdl_quizover_gro_ix ON mdl_quiz_overrides (groupid)
	;
	CREATE INDEX mdl_quizover_use_ix ON mdl_quiz_overrides (userid)
	;
	CREATE TABLE mdl_quiz_attempts (
	    id BIGSERIAL,
	    quiz BIGINT NOT NULL DEFAULT 0,
	    userid BIGINT NOT NULL DEFAULT 0,
	    attempt INTEGER NOT NULL DEFAULT 0,
	    uniqueid BIGINT NOT NULL DEFAULT 0,
	    layout TEXT NOT NULL,
	    currentpage BIGINT NOT NULL DEFAULT 0,
	    preview SMALLINT NOT NULL DEFAULT 0,
	    state VARCHAR(16) NOT NULL DEFAULT 'inprogress',
	    timestart BIGINT NOT NULL DEFAULT 0,
	    timefinish BIGINT NOT NULL DEFAULT 0,
	    timemodified BIGINT NOT NULL DEFAULT 0,
	    timemodifiedoffline BIGINT NOT NULL DEFAULT 0,
	    timecheckstate BIGINT DEFAULT 0,
	    sumgrades NUMERIC(10,5),
	CONSTRAINT mdl_quizatte_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_quiz_attempts IS 'Stores users attempts at quizzes.'
	;
	CREATE UNIQUE INDEX mdl_quizatte_quiuseatt_uix ON mdl_quiz_attempts (quiz, userid, attempt)
	;
	CREATE INDEX mdl_quizatte_statim_ix ON mdl_quiz_attempts (state, timecheckstate)
	;
	CREATE INDEX mdl_quizatte_qui_ix ON mdl_quiz_attempts (quiz)
	;
	CREATE INDEX mdl_quizatte_use_ix ON mdl_quiz_attempts (userid)
	;
	CREATE UNIQUE INDEX mdl_quizatte_uni_uix ON mdl_quiz_attempts (uniqueid)
	;
	CREATE TABLE mdl_quiz_grades (
	    id BIGSERIAL,
	    quiz BIGINT NOT NULL DEFAULT 0,
	    userid BIGINT NOT NULL DEFAULT 0,
	    grade NUMERIC(10,5) NOT NULL DEFAULT 0,
	    timemodified BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_quizgrad_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_quiz_grades IS 'Stores the overall grade for each user on the quiz, based on their various attempts and the quiz.grademethod setting.'
	;
	CREATE INDEX mdl_quizgrad_use_ix ON mdl_quiz_grades (userid)
	;
	CREATE INDEX mdl_quizgrad_qui_ix ON mdl_quiz_grades (quiz)
	;
	CREATE TABLE mdl_quiz_reports (
	    id BIGSERIAL,
	    name VARCHAR(255),
	    displayorder BIGINT NOT NULL,
	    capability VARCHAR(255),
	CONSTRAINT mdl_quizrepo_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_quiz_reports IS 'Lists all the installed quiz reports and their display order and so on. No need to worry about deleting old records. Only records with an equivalent directory are displayed.'
	;
	CREATE UNIQUE INDEX mdl_quizrepo_nam_uix ON mdl_quiz_reports (name)
	;
	CREATE TABLE mdl_quiz_slot_tags (
	    id BIGSERIAL,
	    slotid BIGINT,
	    tagid BIGINT,
	    tagname VARCHAR(255),
	CONSTRAINT mdl_quizslottags_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_quiz_slot_tags IS 'Stores data about the tags that a question must have so that it can be selected for a quiz slot (when having a random question by tags on that slot).'
	;
	CREATE INDEX mdl_quizslottags_slo_ix ON mdl_quiz_slot_tags (slotid)
	;
	CREATE INDEX mdl_quizslottags_tag_ix ON mdl_quiz_slot_tags (tagid)
	; COMMIT
LOG:  DDL LOCK TRACE: acquiring in mode <write_lock> (upgrading from <ddl_lock>) for (bdr (6678401888864649257,1,16384,)) [tracelevel=statement]
STATEMENT:  BEGIN ISOLATION LEVEL SERIALIZABLE;
	CREATE TABLE mdl_quiz (
	    id BIGSERIAL,
	    course BIGINT NOT NULL DEFAULT 0,
	    name VARCHAR(255) NOT NULL DEFAULT '',
	    intro TEXT NOT NULL,
	    introformat SMALLINT NOT NULL DEFAULT 0,
	    timeopen BIGINT NOT NULL DEFAULT 0,
	    timeclose BIGINT NOT NULL DEFAULT 0,
	    timelimit BIGINT NOT NULL DEFAULT 0,
	    overduehandling VARCHAR(16) NOT NULL DEFAULT 'autoabandon',
	    graceperiod BIGINT NOT NULL DEFAULT 0,
	    preferredbehaviour VARCHAR(32) NOT NULL DEFAULT '',
	    canredoquestions SMALLINT NOT NULL DEFAULT 0,
	    attempts INTEGER NOT NULL DEFAULT 0,
	    attemptonlast SMALLINT NOT NULL DEFAULT 0,
	    grademethod SMALLINT NOT NULL DEFAULT 1,
	    decimalpoints SMALLINT NOT NULL DEFAULT 2,
	    questiondecimalpoints SMALLINT NOT NULL DEFAULT -1,
	    reviewattempt INTEGER NOT NULL DEFAULT 0,
	    reviewcorrectness INTEGER NOT NULL DEFAULT 0,
	    reviewmarks INTEGER NOT NULL DEFAULT 0,
	    reviewspecificfeedback INTEGER NOT NULL DEFAULT 0,
	    reviewgeneralfeedback INTEGER NOT NULL DEFAULT 0,
	    reviewrightanswer INTEGER NOT NULL DEFAULT 0,
	    reviewoverallfeedback INTEGER NOT NULL DEFAULT 0,
	    questionsperpage BIGINT NOT NULL DEFAULT 0,
	    navmethod VARCHAR(16) NOT NULL DEFAULT 'free',
	    shuffleanswers SMALLINT NOT NULL DEFAULT 0,
	    sumgrades NUMERIC(10,5) NOT NULL DEFAULT 0,
	    grade NUMERIC(10,5) NOT NULL DEFAULT 0,
	    timecreated BIGINT NOT NULL DEFAULT 0,
	    timemodified BIGINT NOT NULL DEFAULT 0,
	    password VARCHAR(255) NOT NULL DEFAULT '',
	    subnet VARCHAR(255) NOT NULL DEFAULT '',
	    browsersecurity VARCHAR(32) NOT NULL DEFAULT '',
	    delay1 BIGINT NOT NULL DEFAULT 0,
	    delay2 BIGINT NOT NULL DEFAULT 0,
	    showuserpicture SMALLINT NOT NULL DEFAULT 0,
	    showblocks SMALLINT NOT NULL DEFAULT 0,
	    completionattemptsexhausted SMALLINT DEFAULT 0,
	    completionpass SMALLINT DEFAULT 0,
	    allowofflineattempts SMALLINT DEFAULT 0,
	CONSTRAINT mdl_quiz_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_quiz IS 'The settings for each quiz.'
	;
	CREATE INDEX mdl_quiz_cou_ix ON mdl_quiz (course)
	;
	CREATE TABLE mdl_quiz_slots (
	    id BIGSERIAL,
	    slot BIGINT NOT NULL,
	    quizid BIGINT NOT NULL DEFAULT 0,
	    page BIGINT NOT NULL,
	    requireprevious SMALLINT NOT NULL DEFAULT 0,
	    questionid BIGINT NOT NULL DEFAULT 0,
	    questioncategoryid BIGINT,
	    includingsubcategories SMALLINT,
	    maxmark NUMERIC(12,7) NOT NULL DEFAULT 0,
	CONSTRAINT mdl_quizslot_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_quiz_slots IS 'Stores the question used in a quiz, with the order, and for each question, which page it appears on, and the maximum mark (weight).'
	;
	CREATE UNIQUE INDEX mdl_quizslot_quislo_uix ON mdl_quiz_slots (quizid, slot)
	;
	CREATE INDEX mdl_quizslot_qui_ix ON mdl_quiz_slots (quizid)
	;
	CREATE INDEX mdl_quizslot_que_ix ON mdl_quiz_slots (questionid)
	;
	CREATE INDEX mdl_quizslot_que2_ix ON mdl_quiz_slots (questioncategoryid)
	;
	CREATE TABLE mdl_quiz_sections (
	    id BIGSERIAL,
	    quizid BIGINT NOT NULL,
	    firstslot BIGINT NOT NULL,
	    heading VARCHAR(1333),
	    shufflequestions SMALLINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_quizsect_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_quiz_sections IS 'Stores sections of a quiz with section name (heading), from slot-number N and whether the question order should be shuffled.'
	;
	CREATE UNIQUE INDEX mdl_quizsect_quifir_uix ON mdl_quiz_sections (quizid, firstslot)
	;
	CREATE INDEX mdl_quizsect_qui_ix ON mdl_quiz_sections (quizid)
	;
	CREATE TABLE mdl_quiz_feedback (
	    id BIGSERIAL,
	    quizid BIGINT NOT NULL DEFAULT 0,
	    feedbacktext TEXT NOT NULL,
	    feedbacktextformat SMALLINT NOT NULL DEFAULT 0,
	    mingrade NUMERIC(10,5) NOT NULL DEFAULT 0,
	    maxgrade NUMERIC(10,5) NOT NULL DEFAULT 0,
	CONSTRAINT mdl_quizfeed_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_quiz_feedback IS 'Feedback given to students based on which grade band their overall score lies.'
	;
	CREATE INDEX mdl_quizfeed_qui_ix ON mdl_quiz_feedback (quizid)
	;
	CREATE TABLE mdl_quiz_overrides (
	    id BIGSERIAL,
	    quiz BIGINT NOT NULL DEFAULT 0,
	    groupid BIGINT,
	    userid BIGINT,
	    timeopen BIGINT,
	    timeclose BIGINT,
	    timelimit BIGINT,
	    attempts INTEGER,
	    password VARCHAR(255),
	CONSTRAINT mdl_quizover_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_quiz_overrides IS 'The overrides to quiz settings on a per-user and per-group basis.'
	;
	CREATE INDEX mdl_quizover_qui_ix ON mdl_quiz_overrides (quiz)
	;
	CREATE INDEX mdl_quizover_gro_ix ON mdl_quiz_overrides (groupid)
	;
	CREATE INDEX mdl_quizover_use_ix ON mdl_quiz_overrides (userid)
	;
	CREATE TABLE mdl_quiz_attempts (
	    id BIGSERIAL,
	    quiz BIGINT NOT NULL DEFAULT 0,
	    userid BIGINT NOT NULL DEFAULT 0,
	    attempt INTEGER NOT NULL DEFAULT 0,
	    uniqueid BIGINT NOT NULL DEFAULT 0,
	    layout TEXT NOT NULL,
	    currentpage BIGINT NOT NULL DEFAULT 0,
	    preview SMALLINT NOT NULL DEFAULT 0,
	    state VARCHAR(16) NOT NULL DEFAULT 'inprogress',
	    timestart BIGINT NOT NULL DEFAULT 0,
	    timefinish BIGINT NOT NULL DEFAULT 0,
	    timemodified BIGINT NOT NULL DEFAULT 0,
	    timemodifiedoffline BIGINT NOT NULL DEFAULT 0,
	    timecheckstate BIGINT DEFAULT 0,
	    sumgrades NUMERIC(10,5),
	CONSTRAINT mdl_quizatte_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_quiz_attempts IS 'Stores users attempts at quizzes.'
	;
	CREATE UNIQUE INDEX mdl_quizatte_quiuseatt_uix ON mdl_quiz_attempts (quiz, userid, attempt)
	;
	CREATE INDEX mdl_quizatte_statim_ix ON mdl_quiz_attempts (state, timecheckstate)
	;
	CREATE INDEX mdl_quizatte_qui_ix ON mdl_quiz_attempts (quiz)
	;
	CREATE INDEX mdl_quizatte_use_ix ON mdl_quiz_attempts (userid)
	;
	CREATE UNIQUE INDEX mdl_quizatte_uni_uix ON mdl_quiz_attempts (uniqueid)
	;
	CREATE TABLE mdl_quiz_grades (
	    id BIGSERIAL,
	    quiz BIGINT NOT NULL DEFAULT 0,
	    userid BIGINT NOT NULL DEFAULT 0,
	    grade NUMERIC(10,5) NOT NULL DEFAULT 0,
	    timemodified BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_quizgrad_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_quiz_grades IS 'Stores the overall grade for each user on the quiz, based on their various attempts and the quiz.grademethod setting.'
	;
	CREATE INDEX mdl_quizgrad_use_ix ON mdl_quiz_grades (userid)
	;
	CREATE INDEX mdl_quizgrad_qui_ix ON mdl_quiz_grades (quiz)
	;
	CREATE TABLE mdl_quiz_reports (
	    id BIGSERIAL,
	    name VARCHAR(255),
	    displayorder BIGINT NOT NULL,
	    capability VARCHAR(255),
	CONSTRAINT mdl_quizrepo_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_quiz_reports IS 'Lists all the installed quiz reports and their display order and so on. No need to worry about deleting old records. Only records with an equivalent directory are displayed.'
	;
	CREATE UNIQUE INDEX mdl_quizrepo_nam_uix ON mdl_quiz_reports (name)
	;
	CREATE TABLE mdl_quiz_slot_tags (
	    id BIGSERIAL,
	    slotid BIGINT,
	    tagid BIGINT,
	    tagname VARCHAR(255),
	CONSTRAINT mdl_quizslottags_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_quiz_slot_tags IS 'Stores data about the tags that a question must have so that it can be selected for a quiz slot (when having a random question by tags on that slot).'
	;
	CREATE INDEX mdl_quizslottags_slo_ix ON mdl_quiz_slot_tags (slotid)
	;
	CREATE INDEX mdl_quizslottags_tag_ix ON mdl_quiz_slot_tags (tagid)
	; COMMIT
LOG:  DDL LOCK TRACE: acquiring in mode <ddl_lock> for (bdr (6678401888864649257,1,16384,)) [tracelevel=statement]
STATEMENT:  BEGIN ISOLATION LEVEL SERIALIZABLE;
	CREATE TABLE mdl_resource (
	    id BIGSERIAL,
	    course BIGINT NOT NULL DEFAULT 0,
	    name VARCHAR(255) NOT NULL DEFAULT '',
	    intro TEXT,
	    introformat SMALLINT NOT NULL DEFAULT 0,
	    tobemigrated SMALLINT NOT NULL DEFAULT 0,
	    legacyfiles SMALLINT NOT NULL DEFAULT 0,
	    legacyfileslast BIGINT,
	    display SMALLINT NOT NULL DEFAULT 0,
	    displayoptions TEXT,
	    filterfiles SMALLINT NOT NULL DEFAULT 0,
	    revision BIGINT NOT NULL DEFAULT 0,
	    timemodified BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_reso_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_resource IS 'Each record is one resource and its config data'
	;
	CREATE INDEX mdl_reso_cou_ix ON mdl_resource (course)
	;
	CREATE TABLE mdl_resource_old (
	    id BIGSERIAL,
	    course BIGINT NOT NULL DEFAULT 0,
	    name VARCHAR(255) NOT NULL DEFAULT '',
	    type VARCHAR(30) NOT NULL DEFAULT '',
	    reference VARCHAR(255) NOT NULL DEFAULT '',
	    intro TEXT,
	    introformat SMALLINT NOT NULL DEFAULT 0,
	    alltext TEXT NOT NULL,
	    popup TEXT NOT NULL,
	    options VARCHAR(255) NOT NULL DEFAULT '',
	    timemodified BIGINT NOT NULL DEFAULT 0,
	    oldid BIGINT NOT NULL,
	    cmid BIGINT,
	    newmodule VARCHAR(50),
	    newid BIGINT,
	    migrated BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_resoold_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_resource_old IS 'backup of all old resource instances from 1.9'
	;
	CREATE UNIQUE INDEX mdl_resoold_old_uix ON mdl_resource_old (oldid)
	;
	CREATE INDEX mdl_resoold_cmi_ix ON mdl_resource_old (cmid)
	; COMMIT
LOG:  DDL LOCK TRACE: acquiring in mode <write_lock> (upgrading from <ddl_lock>) for (bdr (6678401888864649257,1,16384,)) [tracelevel=statement]
STATEMENT:  BEGIN ISOLATION LEVEL SERIALIZABLE;
	CREATE TABLE mdl_resource (
	    id BIGSERIAL,
	    course BIGINT NOT NULL DEFAULT 0,
	    name VARCHAR(255) NOT NULL DEFAULT '',
	    intro TEXT,
	    introformat SMALLINT NOT NULL DEFAULT 0,
	    tobemigrated SMALLINT NOT NULL DEFAULT 0,
	    legacyfiles SMALLINT NOT NULL DEFAULT 0,
	    legacyfileslast BIGINT,
	    display SMALLINT NOT NULL DEFAULT 0,
	    displayoptions TEXT,
	    filterfiles SMALLINT NOT NULL DEFAULT 0,
	    revision BIGINT NOT NULL DEFAULT 0,
	    timemodified BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_reso_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_resource IS 'Each record is one resource and its config data'
	;
	CREATE INDEX mdl_reso_cou_ix ON mdl_resource (course)
	;
	CREATE TABLE mdl_resource_old (
	    id BIGSERIAL,
	    course BIGINT NOT NULL DEFAULT 0,
	    name VARCHAR(255) NOT NULL DEFAULT '',
	    type VARCHAR(30) NOT NULL DEFAULT '',
	    reference VARCHAR(255) NOT NULL DEFAULT '',
	    intro TEXT,
	    introformat SMALLINT NOT NULL DEFAULT 0,
	    alltext TEXT NOT NULL,
	    popup TEXT NOT NULL,
	    options VARCHAR(255) NOT NULL DEFAULT '',
	    timemodified BIGINT NOT NULL DEFAULT 0,
	    oldid BIGINT NOT NULL,
	    cmid BIGINT,
	    newmodule VARCHAR(50),
	    newid BIGINT,
	    migrated BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_resoold_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_resource_old IS 'backup of all old resource instances from 1.9'
	;
	CREATE UNIQUE INDEX mdl_resoold_old_uix ON mdl_resource_old (oldid)
	;
	CREATE INDEX mdl_resoold_cmi_ix ON mdl_resource_old (cmid)
	; COMMIT
LOG:  DDL LOCK TRACE: acquiring in mode <ddl_lock> for (bdr (6678401888864649257,1,16384,)) [tracelevel=statement]
STATEMENT:  BEGIN ISOLATION LEVEL SERIALIZABLE;
	CREATE TABLE mdl_scorm (
	    id BIGSERIAL,
	    course BIGINT NOT NULL DEFAULT 0,
	    name VARCHAR(255) NOT NULL DEFAULT '',
	    scormtype VARCHAR(50) NOT NULL DEFAULT 'local',
	    reference VARCHAR(255) NOT NULL DEFAULT '',
	    intro TEXT NOT NULL,
	    introformat SMALLINT NOT NULL DEFAULT 0,
	    version VARCHAR(9) NOT NULL DEFAULT '',
	    maxgrade DOUBLE PRECISION NOT NULL DEFAULT 0,
	    grademethod SMALLINT NOT NULL DEFAULT 0,
	    whatgrade BIGINT NOT NULL DEFAULT 0,
	    maxattempt BIGINT NOT NULL DEFAULT 1,
	    forcecompleted SMALLINT NOT NULL DEFAULT 0,
	    forcenewattempt SMALLINT NOT NULL DEFAULT 0,
	    lastattemptlock SMALLINT NOT NULL DEFAULT 0,
	    masteryoverride SMALLINT NOT NULL DEFAULT 1,
	    displayattemptstatus SMALLINT NOT NULL DEFAULT 1,
	    displaycoursestructure SMALLINT NOT NULL DEFAULT 0,
	    updatefreq SMALLINT NOT NULL DEFAULT 0,
	    sha1hash VARCHAR(40),
	    md5hash VARCHAR(32) NOT NULL DEFAULT '',
	    revision BIGINT NOT NULL DEFAULT 0,
	    launch BIGINT NOT NULL DEFAULT 0,
	    skipview SMALLINT NOT NULL DEFAULT 1,
	    hidebrowse SMALLINT NOT NULL DEFAULT 0,
	    hidetoc SMALLINT NOT NULL DEFAULT 0,
	    nav SMALLINT NOT NULL DEFAULT 1,
	    navpositionleft BIGINT DEFAULT -100,
	    navpositiontop BIGINT DEFAULT -100,
	    auto SMALLINT NOT NULL DEFAULT 0,
	    popup SMALLINT NOT NULL DEFAULT 0,
	    options VARCHAR(255) NOT NULL DEFAULT '',
	    width BIGINT NOT NULL DEFAULT 100,
	    height BIGINT NOT NULL DEFAULT 600,
	    timeopen BIGINT NOT NULL DEFAULT 0,
	    timeclose BIGINT NOT NULL DEFAULT 0,
	    timemodified BIGINT NOT NULL DEFAULT 0,
	    completionstatusrequired SMALLINT,
	    completionscorerequired BIGINT,
	    completionstatusallscos SMALLINT,
	    displayactivityname SMALLINT NOT NULL DEFAULT 1,
	    autocommit SMALLINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_scor_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_scorm IS 'each table is one SCORM module and its configuration'
	;
	CREATE INDEX mdl_scor_cou_ix ON mdl_scorm (course)
	;
	CREATE TABLE mdl_scorm_scoes (
	    id BIGSERIAL,
	    scorm BIGINT NOT NULL DEFAULT 0,
	    manifest VARCHAR(255) NOT NULL DEFAULT '',
	    organization VARCHAR(255) NOT NULL DEFAULT '',
	    parent VARCHAR(255) NOT NULL DEFAULT '',
	    identifier VARCHAR(255) NOT NULL DEFAULT '',
	    launch TEXT NOT NULL,
	    scormtype VARCHAR(5) NOT NULL DEFAULT '',
	    title VARCHAR(255) NOT NULL DEFAULT '',
	    sortorder BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_scorscoe_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_scorm_scoes IS 'each SCO part of the SCORM module'
	;
	CREATE INDEX mdl_scorscoe_sco_ix ON mdl_scorm_scoes (scorm)
	;
	CREATE TABLE mdl_scorm_scoes_data (
	    id BIGSERIAL,
	    scoid BIGINT NOT NULL DEFAULT 0,
	    name VARCHAR(255) NOT NULL DEFAULT '',
	    value TEXT NOT NULL,
	CONSTRAINT mdl_scorscoedata_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_scorm_scoes_data IS 'Contains variable data get from packages'
	;
	CREATE INDEX mdl_scorscoedata_sco_ix ON mdl_scorm_scoes_data (scoid)
	;
	CREATE TABLE mdl_scorm_scoes_track (
	    id BIGSERIAL,
	    userid BIGINT NOT NULL DEFAULT 0,
	    scormid BIGINT NOT NULL DEFAULT 0,
	    scoid BIGINT NOT NULL DEFAULT 0,
	    attempt BIGINT NOT NULL DEFAULT 1,
	    element VARCHAR(255) NOT NULL DEFAULT '',
	    value TEXT NOT NULL,
	    timemodified BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_scorscoetrac_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_scorm_scoes_track IS 'to track SCOes'
	;
	CREATE UNIQUE INDEX mdl_scorscoetrac_usescosco_uix ON mdl_scorm_scoes_track (userid, scormid, scoid, attempt, element)
	;
	CREATE INDEX mdl_scorscoetrac_use_ix ON mdl_scorm_scoes_track (userid)
	;
	CREATE INDEX mdl_scorscoetrac_ele_ix ON mdl_scorm_scoes_track (element)
	;
	CREATE INDEX mdl_scorscoetrac_sco_ix ON mdl_scorm_scoes_track (scormid)
	;
	CREATE INDEX mdl_scorscoetrac_sco2_ix ON mdl_scorm_scoes_track (scoid)
	;
	CREATE TABLE mdl_scorm_seq_objective (
	    id BIGSERIAL,
	    scoid BIGINT NOT NULL DEFAULT 0,
	    primaryobj SMALLINT NOT NULL DEFAULT 0,
	    objectiveid VARCHAR(255) NOT NULL DEFAULT '',
	    satisfiedbymeasure SMALLINT NOT NULL DEFAULT 1,
	    minnormalizedmeasure REAL NOT NULL DEFAULT 0.0000,
	CONSTRAINT mdl_scorseqobje_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_scorm_seq_objective IS 'SCORM2004 objective description'
	;
	CREATE UNIQUE INDEX mdl_scorseqobje_scoid_uix ON mdl_scorm_seq_objective (scoid, id)
	;
	CREATE INDEX mdl_scorseqobje_sco_ix ON mdl_scorm_seq_objective (scoid)
	;
	CREATE TABLE mdl_scorm_seq_mapinfo (
	    id BIGSERIAL,
	    scoid BIGINT NOT NULL DEFAULT 0,
	    objectiveid BIGINT NOT NULL DEFAULT 0,
	    targetobjectiveid BIGINT NOT NULL DEFAULT 0,
	    readsatisfiedstatus SMALLINT NOT NULL DEFAULT 1,
	    readnormalizedmeasure SMALLINT NOT NULL DEFAULT 1,
	    writesatisfiedstatus SMALLINT NOT NULL DEFAULT 0,
	    writenormalizedmeasure SMALLINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_scorseqmapi_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_scorm_seq_mapinfo IS 'SCORM2004 objective mapinfo description'
	;
	CREATE UNIQUE INDEX mdl_scorseqmapi_scoidobj_uix ON mdl_scorm_seq_mapinfo (scoid, id, objectiveid)
	;
	CREATE INDEX mdl_scorseqmapi_sco_ix ON mdl_scorm_seq_mapinfo (scoid)
	;
	CREATE INDEX mdl_scorseqmapi_obj_ix ON mdl_scorm_seq_mapinfo (objectiveid)
	;
	CREATE TABLE mdl_scorm_seq_ruleconds (
	    id BIGSERIAL,
	    scoid BIGINT NOT NULL DEFAULT 0,
	    conditioncombination VARCHAR(3) NOT NULL DEFAULT 'all',
	    ruletype SMALLINT NOT NULL DEFAULT 0,
	    action VARCHAR(25) NOT NULL DEFAULT '',
	CONSTRAINT mdl_scorseqrule_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_scorm_seq_ruleconds IS 'SCORM2004 rule conditions'
	;
	CREATE UNIQUE INDEX mdl_scorseqrule_scoid_uix ON mdl_scorm_seq_ruleconds (scoid, id)
	;
	CREATE INDEX mdl_scorseqrule_sco_ix ON mdl_scorm_seq_ruleconds (scoid)
	;
	CREATE TABLE mdl_scorm_seq_rulecond (
	    id BIGSERIAL,
	    scoid BIGINT NOT NULL DEFAULT 0,
	    ruleconditionsid BIGINT NOT NULL DEFAULT 0,
	    refrencedobjective VARCHAR(255) NOT NULL DEFAULT '',
	    measurethreshold REAL NOT NULL DEFAULT 0.0000,
	    operator VARCHAR(5) NOT NULL DEFAULT 'noOp',
	    cond VARCHAR(30) NOT NULL DEFAULT 'always',
	CONSTRAINT mdl_scorseqrule_id3_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_scorm_seq_rulecond IS 'SCORM2004 rule condition'
	;
	CREATE UNIQUE INDEX mdl_scorseqrule_idscorul_uix ON mdl_scorm_seq_rulecond (id, scoid, ruleconditionsid)
	;
	CREATE INDEX mdl_scorseqrule_sco2_ix ON mdl_scorm_seq_rulecond (scoid)
	;
	CREATE INDEX mdl_scorseqrule_rul_ix ON mdl_scorm_seq_rulecond (ruleconditionsid)
	;
	CREATE TABLE mdl_scorm_seq_rolluprule (
	    id BIGSERIAL,
	    scoid BIGINT NOT NULL DEFAULT 0,
	    childactivityset VARCHAR(15) NOT NULL DEFAULT '',
	    minimumcount BIGINT NOT NULL DEFAULT 0,
	    minimumpercent REAL NOT NULL DEFAULT 0.0000,
	    conditioncombination VARCHAR(3) NOT NULL DEFAULT 'all',
	    action VARCHAR(15) NOT NULL DEFAULT '',
	CONSTRAINT mdl_scorseqroll_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_scorm_seq_rolluprule IS 'SCORM2004 sequencing rule'
	;
	CREATE UNIQUE INDEX mdl_scorseqroll_scoid_uix ON mdl_scorm_seq_rolluprule (scoid, id)
	;
	CREATE INDEX mdl_scorseqroll_sco_ix ON mdl_scorm_seq_rolluprule (scoid)
	;
	CREATE TABLE mdl_scorm_seq_rolluprulecond (
	    id BIGSERIAL,
	    scoid BIGINT NOT NULL DEFAULT 0,
	    rollupruleid BIGINT NOT NULL DEFAULT 0,
	    operator VARCHAR(5) NOT NULL DEFAULT 'noOp',
	    cond VARCHAR(25) NOT NULL DEFAULT '',
	CONSTRAINT mdl_scorseqroll_id3_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_scorm_seq_rolluprulecond IS 'SCORM2004 sequencing rule'
	;
	CREATE UNIQUE INDEX mdl_scorseqroll_scorolid_uix ON mdl_scorm_seq_rolluprulecond (scoid, rollupruleid, id)
	;
	CREATE INDEX mdl_scorseqroll_sco2_ix ON mdl_scorm_seq_rolluprulecond (scoid)
	;
	CREATE INDEX mdl_scorseqroll_rol_ix ON mdl_scorm_seq_rolluprulecond (rollupruleid)
	;
	CREATE TABLE mdl_scorm_aicc_session (
	    id BIGSERIAL,
	    userid BIGINT NOT NULL DEFAULT 0,
	    scormid BIGINT NOT NULL DEFAULT 0,
	    hacpsession VARCHAR(255) NOT NULL DEFAULT '',
	    scoid BIGINT DEFAULT 0,
	    scormmode VARCHAR(50),
	    scormstatus VARCHAR(255),
	    attempt BIGINT,
	    lessonstatus VARCHAR(255),
	    sessiontime VARCHAR(255),
	    timecreated BIGINT NOT NULL DEFAULT 0,
	    timemodified BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_scoraiccsess_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_scorm_aicc_session IS 'Used by AICC HACP to store session information'
	;
	CREATE INDEX mdl_scoraiccsess_sco_ix ON mdl_scorm_aicc_session (scormid)
	;
	CREATE INDEX mdl_scoraiccsess_use_ix ON mdl_scorm_aicc_session (userid)
	; COMMIT
LOG:  DDL LOCK TRACE: acquiring in mode <write_lock> (upgrading from <ddl_lock>) for (bdr (6678401888864649257,1,16384,)) [tracelevel=statement]
STATEMENT:  BEGIN ISOLATION LEVEL SERIALIZABLE;
	CREATE TABLE mdl_scorm (
	    id BIGSERIAL,
	    course BIGINT NOT NULL DEFAULT 0,
	    name VARCHAR(255) NOT NULL DEFAULT '',
	    scormtype VARCHAR(50) NOT NULL DEFAULT 'local',
	    reference VARCHAR(255) NOT NULL DEFAULT '',
	    intro TEXT NOT NULL,
	    introformat SMALLINT NOT NULL DEFAULT 0,
	    version VARCHAR(9) NOT NULL DEFAULT '',
	    maxgrade DOUBLE PRECISION NOT NULL DEFAULT 0,
	    grademethod SMALLINT NOT NULL DEFAULT 0,
	    whatgrade BIGINT NOT NULL DEFAULT 0,
	    maxattempt BIGINT NOT NULL DEFAULT 1,
	    forcecompleted SMALLINT NOT NULL DEFAULT 0,
	    forcenewattempt SMALLINT NOT NULL DEFAULT 0,
	    lastattemptlock SMALLINT NOT NULL DEFAULT 0,
	    masteryoverride SMALLINT NOT NULL DEFAULT 1,
	    displayattemptstatus SMALLINT NOT NULL DEFAULT 1,
	    displaycoursestructure SMALLINT NOT NULL DEFAULT 0,
	    updatefreq SMALLINT NOT NULL DEFAULT 0,
	    sha1hash VARCHAR(40),
	    md5hash VARCHAR(32) NOT NULL DEFAULT '',
	    revision BIGINT NOT NULL DEFAULT 0,
	    launch BIGINT NOT NULL DEFAULT 0,
	    skipview SMALLINT NOT NULL DEFAULT 1,
	    hidebrowse SMALLINT NOT NULL DEFAULT 0,
	    hidetoc SMALLINT NOT NULL DEFAULT 0,
	    nav SMALLINT NOT NULL DEFAULT 1,
	    navpositionleft BIGINT DEFAULT -100,
	    navpositiontop BIGINT DEFAULT -100,
	    auto SMALLINT NOT NULL DEFAULT 0,
	    popup SMALLINT NOT NULL DEFAULT 0,
	    options VARCHAR(255) NOT NULL DEFAULT '',
	    width BIGINT NOT NULL DEFAULT 100,
	    height BIGINT NOT NULL DEFAULT 600,
	    timeopen BIGINT NOT NULL DEFAULT 0,
	    timeclose BIGINT NOT NULL DEFAULT 0,
	    timemodified BIGINT NOT NULL DEFAULT 0,
	    completionstatusrequired SMALLINT,
	    completionscorerequired BIGINT,
	    completionstatusallscos SMALLINT,
	    displayactivityname SMALLINT NOT NULL DEFAULT 1,
	    autocommit SMALLINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_scor_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_scorm IS 'each table is one SCORM module and its configuration'
	;
	CREATE INDEX mdl_scor_cou_ix ON mdl_scorm (course)
	;
	CREATE TABLE mdl_scorm_scoes (
	    id BIGSERIAL,
	    scorm BIGINT NOT NULL DEFAULT 0,
	    manifest VARCHAR(255) NOT NULL DEFAULT '',
	    organization VARCHAR(255) NOT NULL DEFAULT '',
	    parent VARCHAR(255) NOT NULL DEFAULT '',
	    identifier VARCHAR(255) NOT NULL DEFAULT '',
	    launch TEXT NOT NULL,
	    scormtype VARCHAR(5) NOT NULL DEFAULT '',
	    title VARCHAR(255) NOT NULL DEFAULT '',
	    sortorder BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_scorscoe_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_scorm_scoes IS 'each SCO part of the SCORM module'
	;
	CREATE INDEX mdl_scorscoe_sco_ix ON mdl_scorm_scoes (scorm)
	;
	CREATE TABLE mdl_scorm_scoes_data (
	    id BIGSERIAL,
	    scoid BIGINT NOT NULL DEFAULT 0,
	    name VARCHAR(255) NOT NULL DEFAULT '',
	    value TEXT NOT NULL,
	CONSTRAINT mdl_scorscoedata_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_scorm_scoes_data IS 'Contains variable data get from packages'
	;
	CREATE INDEX mdl_scorscoedata_sco_ix ON mdl_scorm_scoes_data (scoid)
	;
	CREATE TABLE mdl_scorm_scoes_track (
	    id BIGSERIAL,
	    userid BIGINT NOT NULL DEFAULT 0,
	    scormid BIGINT NOT NULL DEFAULT 0,
	    scoid BIGINT NOT NULL DEFAULT 0,
	    attempt BIGINT NOT NULL DEFAULT 1,
	    element VARCHAR(255) NOT NULL DEFAULT '',
	    value TEXT NOT NULL,
	    timemodified BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_scorscoetrac_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_scorm_scoes_track IS 'to track SCOes'
	;
	CREATE UNIQUE INDEX mdl_scorscoetrac_usescosco_uix ON mdl_scorm_scoes_track (userid, scormid, scoid, attempt, element)
	;
	CREATE INDEX mdl_scorscoetrac_use_ix ON mdl_scorm_scoes_track (userid)
	;
	CREATE INDEX mdl_scorscoetrac_ele_ix ON mdl_scorm_scoes_track (element)
	;
	CREATE INDEX mdl_scorscoetrac_sco_ix ON mdl_scorm_scoes_track (scormid)
	;
	CREATE INDEX mdl_scorscoetrac_sco2_ix ON mdl_scorm_scoes_track (scoid)
	;
	CREATE TABLE mdl_scorm_seq_objective (
	    id BIGSERIAL,
	    scoid BIGINT NOT NULL DEFAULT 0,
	    primaryobj SMALLINT NOT NULL DEFAULT 0,
	    objectiveid VARCHAR(255) NOT NULL DEFAULT '',
	    satisfiedbymeasure SMALLINT NOT NULL DEFAULT 1,
	    minnormalizedmeasure REAL NOT NULL DEFAULT 0.0000,
	CONSTRAINT mdl_scorseqobje_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_scorm_seq_objective IS 'SCORM2004 objective description'
	;
	CREATE UNIQUE INDEX mdl_scorseqobje_scoid_uix ON mdl_scorm_seq_objective (scoid, id)
	;
	CREATE INDEX mdl_scorseqobje_sco_ix ON mdl_scorm_seq_objective (scoid)
	;
	CREATE TABLE mdl_scorm_seq_mapinfo (
	    id BIGSERIAL,
	    scoid BIGINT NOT NULL DEFAULT 0,
	    objectiveid BIGINT NOT NULL DEFAULT 0,
	    targetobjectiveid BIGINT NOT NULL DEFAULT 0,
	    readsatisfiedstatus SMALLINT NOT NULL DEFAULT 1,
	    readnormalizedmeasure SMALLINT NOT NULL DEFAULT 1,
	    writesatisfiedstatus SMALLINT NOT NULL DEFAULT 0,
	    writenormalizedmeasure SMALLINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_scorseqmapi_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_scorm_seq_mapinfo IS 'SCORM2004 objective mapinfo description'
	;
	CREATE UNIQUE INDEX mdl_scorseqmapi_scoidobj_uix ON mdl_scorm_seq_mapinfo (scoid, id, objectiveid)
	;
	CREATE INDEX mdl_scorseqmapi_sco_ix ON mdl_scorm_seq_mapinfo (scoid)
	;
	CREATE INDEX mdl_scorseqmapi_obj_ix ON mdl_scorm_seq_mapinfo (objectiveid)
	;
	CREATE TABLE mdl_scorm_seq_ruleconds (
	    id BIGSERIAL,
	    scoid BIGINT NOT NULL DEFAULT 0,
	    conditioncombination VARCHAR(3) NOT NULL DEFAULT 'all',
	    ruletype SMALLINT NOT NULL DEFAULT 0,
	    action VARCHAR(25) NOT NULL DEFAULT '',
	CONSTRAINT mdl_scorseqrule_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_scorm_seq_ruleconds IS 'SCORM2004 rule conditions'
	;
	CREATE UNIQUE INDEX mdl_scorseqrule_scoid_uix ON mdl_scorm_seq_ruleconds (scoid, id)
	;
	CREATE INDEX mdl_scorseqrule_sco_ix ON mdl_scorm_seq_ruleconds (scoid)
	;
	CREATE TABLE mdl_scorm_seq_rulecond (
	    id BIGSERIAL,
	    scoid BIGINT NOT NULL DEFAULT 0,
	    ruleconditionsid BIGINT NOT NULL DEFAULT 0,
	    refrencedobjective VARCHAR(255) NOT NULL DEFAULT '',
	    measurethreshold REAL NOT NULL DEFAULT 0.0000,
	    operator VARCHAR(5) NOT NULL DEFAULT 'noOp',
	    cond VARCHAR(30) NOT NULL DEFAULT 'always',
	CONSTRAINT mdl_scorseqrule_id3_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_scorm_seq_rulecond IS 'SCORM2004 rule condition'
	;
	CREATE UNIQUE INDEX mdl_scorseqrule_idscorul_uix ON mdl_scorm_seq_rulecond (id, scoid, ruleconditionsid)
	;
	CREATE INDEX mdl_scorseqrule_sco2_ix ON mdl_scorm_seq_rulecond (scoid)
	;
	CREATE INDEX mdl_scorseqrule_rul_ix ON mdl_scorm_seq_rulecond (ruleconditionsid)
	;
	CREATE TABLE mdl_scorm_seq_rolluprule (
	    id BIGSERIAL,
	    scoid BIGINT NOT NULL DEFAULT 0,
	    childactivityset VARCHAR(15) NOT NULL DEFAULT '',
	    minimumcount BIGINT NOT NULL DEFAULT 0,
	    minimumpercent REAL NOT NULL DEFAULT 0.0000,
	    conditioncombination VARCHAR(3) NOT NULL DEFAULT 'all',
	    action VARCHAR(15) NOT NULL DEFAULT '',
	CONSTRAINT mdl_scorseqroll_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_scorm_seq_rolluprule IS 'SCORM2004 sequencing rule'
	;
	CREATE UNIQUE INDEX mdl_scorseqroll_scoid_uix ON mdl_scorm_seq_rolluprule (scoid, id)
	;
	CREATE INDEX mdl_scorseqroll_sco_ix ON mdl_scorm_seq_rolluprule (scoid)
	;
	CREATE TABLE mdl_scorm_seq_rolluprulecond (
	    id BIGSERIAL,
	    scoid BIGINT NOT NULL DEFAULT 0,
	    rollupruleid BIGINT NOT NULL DEFAULT 0,
	    operator VARCHAR(5) NOT NULL DEFAULT 'noOp',
	    cond VARCHAR(25) NOT NULL DEFAULT '',
	CONSTRAINT mdl_scorseqroll_id3_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_scorm_seq_rolluprulecond IS 'SCORM2004 sequencing rule'
	;
	CREATE UNIQUE INDEX mdl_scorseqroll_scorolid_uix ON mdl_scorm_seq_rolluprulecond (scoid, rollupruleid, id)
	;
	CREATE INDEX mdl_scorseqroll_sco2_ix ON mdl_scorm_seq_rolluprulecond (scoid)
	;
	CREATE INDEX mdl_scorseqroll_rol_ix ON mdl_scorm_seq_rolluprulecond (rollupruleid)
	;
	CREATE TABLE mdl_scorm_aicc_session (
	    id BIGSERIAL,
	    userid BIGINT NOT NULL DEFAULT 0,
	    scormid BIGINT NOT NULL DEFAULT 0,
	    hacpsession VARCHAR(255) NOT NULL DEFAULT '',
	    scoid BIGINT DEFAULT 0,
	    scormmode VARCHAR(50),
	    scormstatus VARCHAR(255),
	    attempt BIGINT,
	    lessonstatus VARCHAR(255),
	    sessiontime VARCHAR(255),
	    timecreated BIGINT NOT NULL DEFAULT 0,
	    timemodified BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_scoraiccsess_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_scorm_aicc_session IS 'Used by AICC HACP to store session information'
	;
	CREATE INDEX mdl_scoraiccsess_sco_ix ON mdl_scorm_aicc_session (scormid)
	;
	CREATE INDEX mdl_scoraiccsess_use_ix ON mdl_scorm_aicc_session (userid)
	; COMMIT
LOG:  DDL LOCK TRACE: acquiring in mode <ddl_lock> for (bdr (6678401888864649257,1,16384,)) [tracelevel=statement]
STATEMENT:  BEGIN ISOLATION LEVEL SERIALIZABLE;
	CREATE TABLE mdl_survey (
	    id BIGSERIAL,
	    course BIGINT NOT NULL DEFAULT 0,
	    template BIGINT NOT NULL DEFAULT 0,
	    days INTEGER NOT NULL DEFAULT 0,
	    timecreated BIGINT NOT NULL DEFAULT 0,
	    timemodified BIGINT NOT NULL DEFAULT 0,
	    name VARCHAR(255) NOT NULL DEFAULT '',
	    intro TEXT NOT NULL,
	    introformat SMALLINT NOT NULL DEFAULT 0,
	    questions VARCHAR(255) NOT NULL DEFAULT '',
	    completionsubmit SMALLINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_surv_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_survey IS 'Each record is one SURVEY module with its configuration'
	;
	CREATE INDEX mdl_surv_cou_ix ON mdl_survey (course)
	;
	CREATE TABLE mdl_survey_questions (
	    id BIGSERIAL,
	    text VARCHAR(255) NOT NULL DEFAULT '',
	    shorttext VARCHAR(30) NOT NULL DEFAULT '',
	    multi VARCHAR(100) NOT NULL DEFAULT '',
	    intro VARCHAR(50) NOT NULL DEFAULT '',
	    type SMALLINT NOT NULL DEFAULT 0,
	    options TEXT,
	CONSTRAINT mdl_survques_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_survey_questions IS 'the questions conforming one survey'
	;
	CREATE TABLE mdl_survey_answers (
	    id BIGSERIAL,
	    userid BIGINT NOT NULL DEFAULT 0,
	    survey BIGINT NOT NULL DEFAULT 0,
	    question BIGINT NOT NULL DEFAULT 0,
	    time BIGINT NOT NULL DEFAULT 0,
	    answer1 TEXT NOT NULL,
	    answer2 TEXT NOT NULL,
	CONSTRAINT mdl_survansw_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_survey_answers IS 'the answers to each questions filled by the users'
	;
	CREATE INDEX mdl_survansw_use_ix ON mdl_survey_answers (userid)
	;
	CREATE INDEX mdl_survansw_sur_ix ON mdl_survey_answers (survey)
	;
	CREATE INDEX mdl_survansw_que_ix ON mdl_survey_answers (question)
	;
	CREATE TABLE mdl_survey_analysis (
	    id BIGSERIAL,
	    survey BIGINT NOT NULL DEFAULT 0,
	    userid BIGINT NOT NULL DEFAULT 0,
	    notes TEXT NOT NULL,
	CONSTRAINT mdl_survanal_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_survey_analysis IS 'text about each survey submission'
	;
	CREATE INDEX mdl_survanal_use_ix ON mdl_survey_analysis (userid)
	;
	CREATE INDEX mdl_survanal_sur_ix ON mdl_survey_analysis (survey)
	; COMMIT
LOG:  DDL LOCK TRACE: acquiring in mode <write_lock> (upgrading from <ddl_lock>) for (bdr (6678401888864649257,1,16384,)) [tracelevel=statement]
STATEMENT:  BEGIN ISOLATION LEVEL SERIALIZABLE;
	CREATE TABLE mdl_survey (
	    id BIGSERIAL,
	    course BIGINT NOT NULL DEFAULT 0,
	    template BIGINT NOT NULL DEFAULT 0,
	    days INTEGER NOT NULL DEFAULT 0,
	    timecreated BIGINT NOT NULL DEFAULT 0,
	    timemodified BIGINT NOT NULL DEFAULT 0,
	    name VARCHAR(255) NOT NULL DEFAULT '',
	    intro TEXT NOT NULL,
	    introformat SMALLINT NOT NULL DEFAULT 0,
	    questions VARCHAR(255) NOT NULL DEFAULT '',
	    completionsubmit SMALLINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_surv_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_survey IS 'Each record is one SURVEY module with its configuration'
	;
	CREATE INDEX mdl_surv_cou_ix ON mdl_survey (course)
	;
	CREATE TABLE mdl_survey_questions (
	    id BIGSERIAL,
	    text VARCHAR(255) NOT NULL DEFAULT '',
	    shorttext VARCHAR(30) NOT NULL DEFAULT '',
	    multi VARCHAR(100) NOT NULL DEFAULT '',
	    intro VARCHAR(50) NOT NULL DEFAULT '',
	    type SMALLINT NOT NULL DEFAULT 0,
	    options TEXT,
	CONSTRAINT mdl_survques_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_survey_questions IS 'the questions conforming one survey'
	;
	CREATE TABLE mdl_survey_answers (
	    id BIGSERIAL,
	    userid BIGINT NOT NULL DEFAULT 0,
	    survey BIGINT NOT NULL DEFAULT 0,
	    question BIGINT NOT NULL DEFAULT 0,
	    time BIGINT NOT NULL DEFAULT 0,
	    answer1 TEXT NOT NULL,
	    answer2 TEXT NOT NULL,
	CONSTRAINT mdl_survansw_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_survey_answers IS 'the answers to each questions filled by the users'
	;
	CREATE INDEX mdl_survansw_use_ix ON mdl_survey_answers (userid)
	;
	CREATE INDEX mdl_survansw_sur_ix ON mdl_survey_answers (survey)
	;
	CREATE INDEX mdl_survansw_que_ix ON mdl_survey_answers (question)
	;
	CREATE TABLE mdl_survey_analysis (
	    id BIGSERIAL,
	    survey BIGINT NOT NULL DEFAULT 0,
	    userid BIGINT NOT NULL DEFAULT 0,
	    notes TEXT NOT NULL,
	CONSTRAINT mdl_survanal_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_survey_analysis IS 'text about each survey submission'
	;
	CREATE INDEX mdl_survanal_use_ix ON mdl_survey_analysis (userid)
	;
	CREATE INDEX mdl_survanal_sur_ix ON mdl_survey_analysis (survey)
	; COMMIT
LOG:  DDL LOCK TRACE: acquiring in mode <ddl_lock> for (bdr (6678401888864649257,1,16384,)) [tracelevel=statement]
STATEMENT:  BEGIN ISOLATION LEVEL SERIALIZABLE;
	CREATE TABLE mdl_url (
	    id BIGSERIAL,
	    course BIGINT NOT NULL DEFAULT 0,
	    name VARCHAR(255) NOT NULL DEFAULT '',
	    intro TEXT,
	    introformat SMALLINT NOT NULL DEFAULT 0,
	    externalurl TEXT NOT NULL,
	    display SMALLINT NOT NULL DEFAULT 0,
	    displayoptions TEXT,
	    parameters TEXT,
	    timemodified BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_url_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_url IS 'each record is one url resource'
	;
	CREATE INDEX mdl_url_cou_ix ON mdl_url (course)
	; COMMIT
LOG:  DDL LOCK TRACE: acquiring in mode <write_lock> (upgrading from <ddl_lock>) for (bdr (6678401888864649257,1,16384,)) [tracelevel=statement]
STATEMENT:  BEGIN ISOLATION LEVEL SERIALIZABLE;
	CREATE TABLE mdl_url (
	    id BIGSERIAL,
	    course BIGINT NOT NULL DEFAULT 0,
	    name VARCHAR(255) NOT NULL DEFAULT '',
	    intro TEXT,
	    introformat SMALLINT NOT NULL DEFAULT 0,
	    externalurl TEXT NOT NULL,
	    display SMALLINT NOT NULL DEFAULT 0,
	    displayoptions TEXT,
	    parameters TEXT,
	    timemodified BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_url_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_url IS 'each record is one url resource'
	;
	CREATE INDEX mdl_url_cou_ix ON mdl_url (course)
	; COMMIT
LOG:  DDL LOCK TRACE: acquiring in mode <ddl_lock> for (bdr (6678401888864649257,1,16384,)) [tracelevel=statement]
STATEMENT:  BEGIN ISOLATION LEVEL SERIALIZABLE;
	CREATE TABLE mdl_wiki (
	    id BIGSERIAL,
	    course BIGINT NOT NULL DEFAULT 0,
	    name VARCHAR(255) NOT NULL DEFAULT 'Wiki',
	    intro TEXT,
	    introformat SMALLINT NOT NULL DEFAULT 0,
	    timecreated BIGINT NOT NULL DEFAULT 0,
	    timemodified BIGINT NOT NULL DEFAULT 0,
	    firstpagetitle VARCHAR(255) NOT NULL DEFAULT 'First Page',
	    wikimode VARCHAR(20) NOT NULL DEFAULT 'collaborative',
	    defaultformat VARCHAR(20) NOT NULL DEFAULT 'creole',
	    forceformat SMALLINT NOT NULL DEFAULT 1,
	    editbegin BIGINT NOT NULL DEFAULT 0,
	    editend BIGINT DEFAULT 0,
	CONSTRAINT mdl_wiki_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_wiki IS 'Stores Wiki activity configuration'
	;
	CREATE INDEX mdl_wiki_cou_ix ON mdl_wiki (course)
	;
	CREATE TABLE mdl_wiki_subwikis (
	    id BIGSERIAL,
	    wikiid BIGINT NOT NULL DEFAULT 0,
	    groupid BIGINT NOT NULL DEFAULT 0,
	    userid BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_wikisubw_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_wiki_subwikis IS 'Stores subwiki instances'
	;
	CREATE INDEX mdl_wikisubw_wik_ix ON mdl_wiki_subwikis (wikiid)
	;
	CREATE UNIQUE INDEX mdl_wikisubw_wikgrouse_uix ON mdl_wiki_subwikis (wikiid, groupid, userid)
	;
	CREATE TABLE mdl_wiki_pages (
	    id BIGSERIAL,
	    subwikiid BIGINT NOT NULL DEFAULT 0,
	    title VARCHAR(255) NOT NULL DEFAULT 'title',
	    cachedcontent TEXT NOT NULL,
	    timecreated BIGINT NOT NULL DEFAULT 0,
	    timemodified BIGINT NOT NULL DEFAULT 0,
	    timerendered BIGINT NOT NULL DEFAULT 0,
	    userid BIGINT NOT NULL DEFAULT 0,
	    pageviews BIGINT NOT NULL DEFAULT 0,
	    readonly SMALLINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_wikipage_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_wiki_pages IS 'Stores wiki pages'
	;
	CREATE UNIQUE INDEX mdl_wikipage_subtituse_uix ON mdl_wiki_pages (subwikiid, title, userid)
	;
	CREATE INDEX mdl_wikipage_sub_ix ON mdl_wiki_pages (subwikiid)
	;
	CREATE TABLE mdl_wiki_versions (
	    id BIGSERIAL,
	    pageid BIGINT NOT NULL DEFAULT 0,
	    content TEXT NOT NULL,
	    contentformat VARCHAR(20) NOT NULL DEFAULT 'creole',
	    version INTEGER NOT NULL DEFAULT 0,
	    timecreated BIGINT NOT NULL DEFAULT 0,
	    userid BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_wikivers_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_wiki_versions IS 'Stores wiki page history'
	;
	CREATE INDEX mdl_wikivers_pag_ix ON mdl_wiki_versions (pageid)
	;
	CREATE TABLE mdl_wiki_synonyms (
	    id BIGSERIAL,
	    subwikiid BIGINT NOT NULL DEFAULT 0,
	    pageid BIGINT NOT NULL DEFAULT 0,
	    pagesynonym VARCHAR(255) NOT NULL DEFAULT 'Pagesynonym',
	CONSTRAINT mdl_wikisyno_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_wiki_synonyms IS 'Stores wiki pages synonyms'
	;
	CREATE UNIQUE INDEX mdl_wikisyno_pagpag_uix ON mdl_wiki_synonyms (pageid, pagesynonym)
	;
	CREATE TABLE mdl_wiki_links (
	    id BIGSERIAL,
	    subwikiid BIGINT NOT NULL DEFAULT 0,
	    frompageid BIGINT NOT NULL DEFAULT 0,
	    topageid BIGINT NOT NULL DEFAULT 0,
	    tomissingpage VARCHAR(255),
	CONSTRAINT mdl_wikilink_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_wiki_links IS 'Page wiki links'
	;
	CREATE INDEX mdl_wikilink_fro_ix ON mdl_wiki_links (frompageid)
	;
	CREATE INDEX mdl_wikilink_sub_ix ON mdl_wiki_links (subwikiid)
	;
	CREATE TABLE mdl_wiki_locks (
	    id BIGSERIAL,
	    pageid BIGINT NOT NULL DEFAULT 0,
	    sectionname VARCHAR(255),
	    userid BIGINT NOT NULL DEFAULT 0,
	    lockedat BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_wikilock_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_wiki_locks IS 'Manages page locks'
	; COMMIT
LOG:  DDL LOCK TRACE: acquiring in mode <write_lock> (upgrading from <ddl_lock>) for (bdr (6678401888864649257,1,16384,)) [tracelevel=statement]
STATEMENT:  BEGIN ISOLATION LEVEL SERIALIZABLE;
	CREATE TABLE mdl_wiki (
	    id BIGSERIAL,
	    course BIGINT NOT NULL DEFAULT 0,
	    name VARCHAR(255) NOT NULL DEFAULT 'Wiki',
	    intro TEXT,
	    introformat SMALLINT NOT NULL DEFAULT 0,
	    timecreated BIGINT NOT NULL DEFAULT 0,
	    timemodified BIGINT NOT NULL DEFAULT 0,
	    firstpagetitle VARCHAR(255) NOT NULL DEFAULT 'First Page',
	    wikimode VARCHAR(20) NOT NULL DEFAULT 'collaborative',
	    defaultformat VARCHAR(20) NOT NULL DEFAULT 'creole',
	    forceformat SMALLINT NOT NULL DEFAULT 1,
	    editbegin BIGINT NOT NULL DEFAULT 0,
	    editend BIGINT DEFAULT 0,
	CONSTRAINT mdl_wiki_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_wiki IS 'Stores Wiki activity configuration'
	;
	CREATE INDEX mdl_wiki_cou_ix ON mdl_wiki (course)
	;
	CREATE TABLE mdl_wiki_subwikis (
	    id BIGSERIAL,
	    wikiid BIGINT NOT NULL DEFAULT 0,
	    groupid BIGINT NOT NULL DEFAULT 0,
	    userid BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_wikisubw_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_wiki_subwikis IS 'Stores subwiki instances'
	;
	CREATE INDEX mdl_wikisubw_wik_ix ON mdl_wiki_subwikis (wikiid)
	;
	CREATE UNIQUE INDEX mdl_wikisubw_wikgrouse_uix ON mdl_wiki_subwikis (wikiid, groupid, userid)
	;
	CREATE TABLE mdl_wiki_pages (
	    id BIGSERIAL,
	    subwikiid BIGINT NOT NULL DEFAULT 0,
	    title VARCHAR(255) NOT NULL DEFAULT 'title',
	    cachedcontent TEXT NOT NULL,
	    timecreated BIGINT NOT NULL DEFAULT 0,
	    timemodified BIGINT NOT NULL DEFAULT 0,
	    timerendered BIGINT NOT NULL DEFAULT 0,
	    userid BIGINT NOT NULL DEFAULT 0,
	    pageviews BIGINT NOT NULL DEFAULT 0,
	    readonly SMALLINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_wikipage_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_wiki_pages IS 'Stores wiki pages'
	;
	CREATE UNIQUE INDEX mdl_wikipage_subtituse_uix ON mdl_wiki_pages (subwikiid, title, userid)
	;
	CREATE INDEX mdl_wikipage_sub_ix ON mdl_wiki_pages (subwikiid)
	;
	CREATE TABLE mdl_wiki_versions (
	    id BIGSERIAL,
	    pageid BIGINT NOT NULL DEFAULT 0,
	    content TEXT NOT NULL,
	    contentformat VARCHAR(20) NOT NULL DEFAULT 'creole',
	    version INTEGER NOT NULL DEFAULT 0,
	    timecreated BIGINT NOT NULL DEFAULT 0,
	    userid BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_wikivers_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_wiki_versions IS 'Stores wiki page history'
	;
	CREATE INDEX mdl_wikivers_pag_ix ON mdl_wiki_versions (pageid)
	;
	CREATE TABLE mdl_wiki_synonyms (
	    id BIGSERIAL,
	    subwikiid BIGINT NOT NULL DEFAULT 0,
	    pageid BIGINT NOT NULL DEFAULT 0,
	    pagesynonym VARCHAR(255) NOT NULL DEFAULT 'Pagesynonym',
	CONSTRAINT mdl_wikisyno_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_wiki_synonyms IS 'Stores wiki pages synonyms'
	;
	CREATE UNIQUE INDEX mdl_wikisyno_pagpag_uix ON mdl_wiki_synonyms (pageid, pagesynonym)
	;
	CREATE TABLE mdl_wiki_links (
	    id BIGSERIAL,
	    subwikiid BIGINT NOT NULL DEFAULT 0,
	    frompageid BIGINT NOT NULL DEFAULT 0,
	    topageid BIGINT NOT NULL DEFAULT 0,
	    tomissingpage VARCHAR(255),
	CONSTRAINT mdl_wikilink_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_wiki_links IS 'Page wiki links'
	;
	CREATE INDEX mdl_wikilink_fro_ix ON mdl_wiki_links (frompageid)
	;
	CREATE INDEX mdl_wikilink_sub_ix ON mdl_wiki_links (subwikiid)
	;
	CREATE TABLE mdl_wiki_locks (
	    id BIGSERIAL,
	    pageid BIGINT NOT NULL DEFAULT 0,
	    sectionname VARCHAR(255),
	    userid BIGINT NOT NULL DEFAULT 0,
	    lockedat BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_wikilock_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_wiki_locks IS 'Manages page locks'
	; COMMIT
LOG:  DDL LOCK TRACE: acquiring in mode <ddl_lock> for (bdr (6678401888864649257,1,16384,)) [tracelevel=statement]
STATEMENT:  BEGIN ISOLATION LEVEL SERIALIZABLE;
	CREATE TABLE mdl_workshop (
	    id BIGSERIAL,
	    course BIGINT NOT NULL,
	    name VARCHAR(255) NOT NULL DEFAULT '',
	    intro TEXT,
	    introformat SMALLINT NOT NULL DEFAULT 0,
	    instructauthors TEXT,
	    instructauthorsformat SMALLINT NOT NULL DEFAULT 0,
	    instructreviewers TEXT,
	    instructreviewersformat SMALLINT NOT NULL DEFAULT 0,
	    timemodified BIGINT NOT NULL,
	    phase SMALLINT DEFAULT 0,
	    useexamples SMALLINT DEFAULT 0,
	    usepeerassessment SMALLINT DEFAULT 0,
	    useselfassessment SMALLINT DEFAULT 0,
	    grade NUMERIC(10,5) DEFAULT 80,
	    gradinggrade NUMERIC(10,5) DEFAULT 20,
	    strategy VARCHAR(30) NOT NULL DEFAULT '',
	    evaluation VARCHAR(30) NOT NULL DEFAULT '',
	    gradedecimals SMALLINT DEFAULT 0,
	    nattachments SMALLINT DEFAULT 0,
	    submissionfiletypes VARCHAR(255),
	    latesubmissions SMALLINT DEFAULT 0,
	    maxbytes BIGINT DEFAULT 100000,
	    examplesmode SMALLINT DEFAULT 0,
	    submissionstart BIGINT DEFAULT 0,
	    submissionend BIGINT DEFAULT 0,
	    assessmentstart BIGINT DEFAULT 0,
	    assessmentend BIGINT DEFAULT 0,
	    phaseswitchassessment SMALLINT NOT NULL DEFAULT 0,
	    conclusion TEXT,
	    conclusionformat SMALLINT NOT NULL DEFAULT 1,
	    overallfeedbackmode SMALLINT DEFAULT 1,
	    overallfeedbackfiles SMALLINT DEFAULT 0,
	    overallfeedbackfiletypes VARCHAR(255),
	    overallfeedbackmaxbytes BIGINT DEFAULT 100000,
	CONSTRAINT mdl_work_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_workshop IS 'This table keeps information about the module instances and their settings'
	;
	CREATE INDEX mdl_work_cou_ix ON mdl_workshop (course)
	;
	CREATE TABLE mdl_workshop_submissions (
	    id BIGSERIAL,
	    workshopid BIGINT NOT NULL,
	    example SMALLINT DEFAULT 0,
	    authorid BIGINT NOT NULL,
	    timecreated BIGINT NOT NULL,
	    timemodified BIGINT NOT NULL,
	    title VARCHAR(255) NOT NULL DEFAULT '',
	    content TEXT,
	    contentformat SMALLINT NOT NULL DEFAULT 0,
	    contenttrust SMALLINT NOT NULL DEFAULT 0,
	    attachment SMALLINT DEFAULT 0,
	    grade NUMERIC(10,5),
	    gradeover NUMERIC(10,5),
	    gradeoverby BIGINT,
	    feedbackauthor TEXT,
	    feedbackauthorformat SMALLINT DEFAULT 0,
	    timegraded BIGINT,
	    published SMALLINT DEFAULT 0,
	    late SMALLINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_worksubm_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_workshop_submissions IS 'Info about the submission and the aggregation of the grade for submission, grade for assessment and final grade. Both grade for submission and grade for assessment can be overridden by teacher. Final grade is always the sum of them. All grades are st'
	;
	CREATE INDEX mdl_worksubm_wor_ix ON mdl_workshop_submissions (workshopid)
	;
	CREATE INDEX mdl_worksubm_gra_ix ON mdl_workshop_submissions (gradeoverby)
	;
	CREATE INDEX mdl_worksubm_aut_ix ON mdl_workshop_submissions (authorid)
	;
	CREATE TABLE mdl_workshop_assessments (
	    id BIGSERIAL,
	    submissionid BIGINT NOT NULL,
	    reviewerid BIGINT NOT NULL,
	    weight BIGINT NOT NULL DEFAULT 1,
	    timecreated BIGINT DEFAULT 0,
	    timemodified BIGINT DEFAULT 0,
	    grade NUMERIC(10,5),
	    gradinggrade NUMERIC(10,5),
	    gradinggradeover NUMERIC(10,5),
	    gradinggradeoverby BIGINT,
	    feedbackauthor TEXT,
	    feedbackauthorformat SMALLINT DEFAULT 0,
	    feedbackauthorattachment SMALLINT DEFAULT 0,
	    feedbackreviewer TEXT,
	    feedbackreviewerformat SMALLINT DEFAULT 0,
	CONSTRAINT mdl_workasse_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_workshop_assessments IS 'Info about the made assessment and automatically calculated grade for it. The proposed grade can be overridden by teacher.'
	;
	CREATE INDEX mdl_workasse_sub_ix ON mdl_workshop_assessments (submissionid)
	;
	CREATE INDEX mdl_workasse_gra_ix ON mdl_workshop_assessments (gradinggradeoverby)
	;
	CREATE INDEX mdl_workasse_rev_ix ON mdl_workshop_assessments (reviewerid)
	;
	CREATE TABLE mdl_workshop_grades (
	    id BIGSERIAL,
	    assessmentid BIGINT NOT NULL,
	    strategy VARCHAR(30) NOT NULL DEFAULT '',
	    dimensionid BIGINT NOT NULL,
	    grade NUMERIC(10,5) NOT NULL,
	    peercomment TEXT,
	    peercommentformat SMALLINT DEFAULT 0,
	CONSTRAINT mdl_workgrad_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_workshop_grades IS 'How the reviewers filled-up the grading forms, given grades and comments'
	;
	CREATE INDEX mdl_workgrad_ass_ix ON mdl_workshop_grades (assessmentid)
	;
	CREATE UNIQUE INDEX mdl_workgrad_assstrdim_uix ON mdl_workshop_grades (assessmentid, strategy, dimensionid)
	;
	CREATE TABLE mdl_workshop_aggregations (
	    id BIGSERIAL,
	    workshopid BIGINT NOT NULL,
	    userid BIGINT NOT NULL,
	    gradinggrade NUMERIC(10,5),
	    timegraded BIGINT,
	CONSTRAINT mdl_workaggr_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_workshop_aggregations IS 'Aggregated grades for assessment are stored here. The aggregated grade for submission is stored in workshop_submissions'
	;
	CREATE INDEX mdl_workaggr_wor_ix ON mdl_workshop_aggregations (workshopid)
	;
	CREATE INDEX mdl_workaggr_use_ix ON mdl_workshop_aggregations (userid)
	;
	CREATE UNIQUE INDEX mdl_workaggr_woruse_uix ON mdl_workshop_aggregations (workshopid, userid)
	; COMMIT
LOG:  DDL LOCK TRACE: acquiring in mode <write_lock> (upgrading from <ddl_lock>) for (bdr (6678401888864649257,1,16384,)) [tracelevel=statement]
STATEMENT:  BEGIN ISOLATION LEVEL SERIALIZABLE;
	CREATE TABLE mdl_workshop (
	    id BIGSERIAL,
	    course BIGINT NOT NULL,
	    name VARCHAR(255) NOT NULL DEFAULT '',
	    intro TEXT,
	    introformat SMALLINT NOT NULL DEFAULT 0,
	    instructauthors TEXT,
	    instructauthorsformat SMALLINT NOT NULL DEFAULT 0,
	    instructreviewers TEXT,
	    instructreviewersformat SMALLINT NOT NULL DEFAULT 0,
	    timemodified BIGINT NOT NULL,
	    phase SMALLINT DEFAULT 0,
	    useexamples SMALLINT DEFAULT 0,
	    usepeerassessment SMALLINT DEFAULT 0,
	    useselfassessment SMALLINT DEFAULT 0,
	    grade NUMERIC(10,5) DEFAULT 80,
	    gradinggrade NUMERIC(10,5) DEFAULT 20,
	    strategy VARCHAR(30) NOT NULL DEFAULT '',
	    evaluation VARCHAR(30) NOT NULL DEFAULT '',
	    gradedecimals SMALLINT DEFAULT 0,
	    nattachments SMALLINT DEFAULT 0,
	    submissionfiletypes VARCHAR(255),
	    latesubmissions SMALLINT DEFAULT 0,
	    maxbytes BIGINT DEFAULT 100000,
	    examplesmode SMALLINT DEFAULT 0,
	    submissionstart BIGINT DEFAULT 0,
	    submissionend BIGINT DEFAULT 0,
	    assessmentstart BIGINT DEFAULT 0,
	    assessmentend BIGINT DEFAULT 0,
	    phaseswitchassessment SMALLINT NOT NULL DEFAULT 0,
	    conclusion TEXT,
	    conclusionformat SMALLINT NOT NULL DEFAULT 1,
	    overallfeedbackmode SMALLINT DEFAULT 1,
	    overallfeedbackfiles SMALLINT DEFAULT 0,
	    overallfeedbackfiletypes VARCHAR(255),
	    overallfeedbackmaxbytes BIGINT DEFAULT 100000,
	CONSTRAINT mdl_work_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_workshop IS 'This table keeps information about the module instances and their settings'
	;
	CREATE INDEX mdl_work_cou_ix ON mdl_workshop (course)
	;
	CREATE TABLE mdl_workshop_submissions (
	    id BIGSERIAL,
	    workshopid BIGINT NOT NULL,
	    example SMALLINT DEFAULT 0,
	    authorid BIGINT NOT NULL,
	    timecreated BIGINT NOT NULL,
	    timemodified BIGINT NOT NULL,
	    title VARCHAR(255) NOT NULL DEFAULT '',
	    content TEXT,
	    contentformat SMALLINT NOT NULL DEFAULT 0,
	    contenttrust SMALLINT NOT NULL DEFAULT 0,
	    attachment SMALLINT DEFAULT 0,
	    grade NUMERIC(10,5),
	    gradeover NUMERIC(10,5),
	    gradeoverby BIGINT,
	    feedbackauthor TEXT,
	    feedbackauthorformat SMALLINT DEFAULT 0,
	    timegraded BIGINT,
	    published SMALLINT DEFAULT 0,
	    late SMALLINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_worksubm_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_workshop_submissions IS 'Info about the submission and the aggregation of the grade for submission, grade for assessment and final grade. Both grade for submission and grade for assessment can be overridden by teacher. Final grade is always the sum of them. All grades are st'
	;
	CREATE INDEX mdl_worksubm_wor_ix ON mdl_workshop_submissions (workshopid)
	;
	CREATE INDEX mdl_worksubm_gra_ix ON mdl_workshop_submissions (gradeoverby)
	;
	CREATE INDEX mdl_worksubm_aut_ix ON mdl_workshop_submissions (authorid)
	;
	CREATE TABLE mdl_workshop_assessments (
	    id BIGSERIAL,
	    submissionid BIGINT NOT NULL,
	    reviewerid BIGINT NOT NULL,
	    weight BIGINT NOT NULL DEFAULT 1,
	    timecreated BIGINT DEFAULT 0,
	    timemodified BIGINT DEFAULT 0,
	    grade NUMERIC(10,5),
	    gradinggrade NUMERIC(10,5),
	    gradinggradeover NUMERIC(10,5),
	    gradinggradeoverby BIGINT,
	    feedbackauthor TEXT,
	    feedbackauthorformat SMALLINT DEFAULT 0,
	    feedbackauthorattachment SMALLINT DEFAULT 0,
	    feedbackreviewer TEXT,
	    feedbackreviewerformat SMALLINT DEFAULT 0,
	CONSTRAINT mdl_workasse_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_workshop_assessments IS 'Info about the made assessment and automatically calculated grade for it. The proposed grade can be overridden by teacher.'
	;
	CREATE INDEX mdl_workasse_sub_ix ON mdl_workshop_assessments (submissionid)
	;
	CREATE INDEX mdl_workasse_gra_ix ON mdl_workshop_assessments (gradinggradeoverby)
	;
	CREATE INDEX mdl_workasse_rev_ix ON mdl_workshop_assessments (reviewerid)
	;
	CREATE TABLE mdl_workshop_grades (
	    id BIGSERIAL,
	    assessmentid BIGINT NOT NULL,
	    strategy VARCHAR(30) NOT NULL DEFAULT '',
	    dimensionid BIGINT NOT NULL,
	    grade NUMERIC(10,5) NOT NULL,
	    peercomment TEXT,
	    peercommentformat SMALLINT DEFAULT 0,
	CONSTRAINT mdl_workgrad_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_workshop_grades IS 'How the reviewers filled-up the grading forms, given grades and comments'
	;
	CREATE INDEX mdl_workgrad_ass_ix ON mdl_workshop_grades (assessmentid)
	;
	CREATE UNIQUE INDEX mdl_workgrad_assstrdim_uix ON mdl_workshop_grades (assessmentid, strategy, dimensionid)
	;
	CREATE TABLE mdl_workshop_aggregations (
	    id BIGSERIAL,
	    workshopid BIGINT NOT NULL,
	    userid BIGINT NOT NULL,
	    gradinggrade NUMERIC(10,5),
	    timegraded BIGINT,
	CONSTRAINT mdl_workaggr_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_workshop_aggregations IS 'Aggregated grades for assessment are stored here. The aggregated grade for submission is stored in workshop_submissions'
	;
	CREATE INDEX mdl_workaggr_wor_ix ON mdl_workshop_aggregations (workshopid)
	;
	CREATE INDEX mdl_workaggr_use_ix ON mdl_workshop_aggregations (userid)
	;
	CREATE UNIQUE INDEX mdl_workaggr_woruse_uix ON mdl_workshop_aggregations (workshopid, userid)
	; COMMIT
LOG:  DDL LOCK TRACE: acquiring in mode <ddl_lock> for (bdr (6678401888864649257,1,16384,)) [tracelevel=statement]
STATEMENT:  BEGIN ISOLATION LEVEL SERIALIZABLE;
	CREATE TABLE mdl_auth_oauth2_linked_login (
	    id BIGSERIAL,
	    timecreated BIGINT NOT NULL,
	    timemodified BIGINT NOT NULL,
	    usermodified BIGINT NOT NULL,
	    userid BIGINT NOT NULL,
	    issuerid BIGINT NOT NULL,
	    username VARCHAR(255) NOT NULL DEFAULT '',
	    email TEXT NOT NULL,
	    confirmtoken VARCHAR(64) NOT NULL DEFAULT '',
	    confirmtokenexpires BIGINT,
	CONSTRAINT mdl_authoautlinklogi_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_auth_oauth2_linked_login IS 'Accounts linked to a users Moodle account.'
	;
	CREATE INDEX mdl_authoautlinklogi_issuse_ix ON mdl_auth_oauth2_linked_login (issuerid, username)
	;
	CREATE INDEX mdl_authoautlinklogi_use_ix ON mdl_auth_oauth2_linked_login (usermodified)
	;
	CREATE INDEX mdl_authoautlinklogi_use2_ix ON mdl_auth_oauth2_linked_login (userid)
	;
	CREATE INDEX mdl_authoautlinklogi_iss_ix ON mdl_auth_oauth2_linked_login (issuerid)
	;
	CREATE UNIQUE INDEX mdl_authoautlinklogi_useis_uix ON mdl_auth_oauth2_linked_login (userid, issuerid, username)
	; COMMIT
LOG:  DDL LOCK TRACE: acquiring in mode <write_lock> (upgrading from <ddl_lock>) for (bdr (6678401888864649257,1,16384,)) [tracelevel=statement]
STATEMENT:  BEGIN ISOLATION LEVEL SERIALIZABLE;
	CREATE TABLE mdl_auth_oauth2_linked_login (
	    id BIGSERIAL,
	    timecreated BIGINT NOT NULL,
	    timemodified BIGINT NOT NULL,
	    usermodified BIGINT NOT NULL,
	    userid BIGINT NOT NULL,
	    issuerid BIGINT NOT NULL,
	    username VARCHAR(255) NOT NULL DEFAULT '',
	    email TEXT NOT NULL,
	    confirmtoken VARCHAR(64) NOT NULL DEFAULT '',
	    confirmtokenexpires BIGINT,
	CONSTRAINT mdl_authoautlinklogi_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_auth_oauth2_linked_login IS 'Accounts linked to a users Moodle account.'
	;
	CREATE INDEX mdl_authoautlinklogi_issuse_ix ON mdl_auth_oauth2_linked_login (issuerid, username)
	;
	CREATE INDEX mdl_authoautlinklogi_use_ix ON mdl_auth_oauth2_linked_login (usermodified)
	;
	CREATE INDEX mdl_authoautlinklogi_use2_ix ON mdl_auth_oauth2_linked_login (userid)
	;
	CREATE INDEX mdl_authoautlinklogi_iss_ix ON mdl_auth_oauth2_linked_login (issuerid)
	;
	CREATE UNIQUE INDEX mdl_authoautlinklogi_useis_uix ON mdl_auth_oauth2_linked_login (userid, issuerid, username)
	; COMMIT
LOG:  DDL LOCK TRACE: acquiring in mode <ddl_lock> for (bdr (6678401888864649257,1,16384,)) [tracelevel=statement]
STATEMENT:  BEGIN ISOLATION LEVEL SERIALIZABLE;
	CREATE TABLE mdl_enrol_flatfile (
	    id BIGSERIAL,
	    action VARCHAR(30) NOT NULL DEFAULT '',
	    roleid BIGINT NOT NULL,
	    userid BIGINT NOT NULL,
	    courseid BIGINT NOT NULL,
	    timestart BIGINT NOT NULL DEFAULT 0,
	    timeend BIGINT NOT NULL DEFAULT 0,
	    timemodified BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_enroflat_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_enrol_flatfile IS 'enrol_flatfile table retrofitted from MySQL'
	;
	CREATE INDEX mdl_enroflat_cou_ix ON mdl_enrol_flatfile (courseid)
	;
	CREATE INDEX mdl_enroflat_use_ix ON mdl_enrol_flatfile (userid)
	;
	CREATE INDEX mdl_enroflat_rol_ix ON mdl_enrol_flatfile (roleid)
	; COMMIT
LOG:  DDL LOCK TRACE: acquiring in mode <write_lock> (upgrading from <ddl_lock>) for (bdr (6678401888864649257,1,16384,)) [tracelevel=statement]
STATEMENT:  BEGIN ISOLATION LEVEL SERIALIZABLE;
	CREATE TABLE mdl_enrol_flatfile (
	    id BIGSERIAL,
	    action VARCHAR(30) NOT NULL DEFAULT '',
	    roleid BIGINT NOT NULL,
	    userid BIGINT NOT NULL,
	    courseid BIGINT NOT NULL,
	    timestart BIGINT NOT NULL DEFAULT 0,
	    timeend BIGINT NOT NULL DEFAULT 0,
	    timemodified BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_enroflat_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_enrol_flatfile IS 'enrol_flatfile table retrofitted from MySQL'
	;
	CREATE INDEX mdl_enroflat_cou_ix ON mdl_enrol_flatfile (courseid)
	;
	CREATE INDEX mdl_enroflat_use_ix ON mdl_enrol_flatfile (userid)
	;
	CREATE INDEX mdl_enroflat_rol_ix ON mdl_enrol_flatfile (roleid)
	; COMMIT
LOG:  DDL LOCK TRACE: acquiring in mode <ddl_lock> for (bdr (6678401888864649257,1,16384,)) [tracelevel=statement]
STATEMENT:  BEGIN ISOLATION LEVEL SERIALIZABLE;
	CREATE TABLE mdl_enrol_lti_tools (
	    id BIGSERIAL,
	    enrolid BIGINT NOT NULL,
	    contextid BIGINT NOT NULL,
	    institution VARCHAR(40) NOT NULL DEFAULT '',
	    lang VARCHAR(30) NOT NULL DEFAULT 'en',
	    timezone VARCHAR(100) NOT NULL DEFAULT '99',
	    maxenrolled BIGINT NOT NULL DEFAULT 0,
	    maildisplay SMALLINT NOT NULL DEFAULT 2,
	    city VARCHAR(120) NOT NULL DEFAULT '',
	    country VARCHAR(2) NOT NULL DEFAULT '',
	    gradesync SMALLINT NOT NULL DEFAULT 0,
	    gradesynccompletion SMALLINT NOT NULL DEFAULT 0,
	    membersync SMALLINT NOT NULL DEFAULT 0,
	    membersyncmode SMALLINT NOT NULL DEFAULT 0,
	    roleinstructor BIGINT NOT NULL,
	    rolelearner BIGINT NOT NULL,
	    secret TEXT,
	    timecreated BIGINT NOT NULL,
	    timemodified BIGINT NOT NULL,
	CONSTRAINT mdl_enroltitool_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_enrol_lti_tools IS 'List of tools provided to the remote system'
	;
	CREATE INDEX mdl_enroltitool_enr_ix ON mdl_enrol_lti_tools (enrolid)
	;
	CREATE INDEX mdl_enroltitool_con_ix ON mdl_enrol_lti_tools (contextid)
	;
	CREATE TABLE mdl_enrol_lti_users (
	    id BIGSERIAL,
	    userid BIGINT NOT NULL,
	    toolid BIGINT NOT NULL,
	    serviceurl TEXT,
	    sourceid TEXT,
	    consumerkey TEXT,
	    consumersecret TEXT,
	    membershipsurl TEXT,
	    membershipsid TEXT,
	    lastgrade NUMERIC(10,5),
	    lastaccess BIGINT,
	    timecreated BIGINT,
	CONSTRAINT mdl_enroltiuser_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_enrol_lti_users IS 'User access log and gradeback data'
	;
	CREATE INDEX mdl_enroltiuser_use_ix ON mdl_enrol_lti_users (userid)
	;
	CREATE INDEX mdl_enroltiuser_too_ix ON mdl_enrol_lti_users (toolid)
	;
	CREATE TABLE mdl_enrol_lti_lti2_consumer (
	    id BIGSERIAL,
	    name VARCHAR(50) NOT NULL DEFAULT '',
	    consumerkey256 VARCHAR(255) NOT NULL DEFAULT '',
	    consumerkey TEXT,
	    secret VARCHAR(1024) NOT NULL DEFAULT '',
	    ltiversion VARCHAR(10),
	    consumername VARCHAR(255),
	    consumerversion VARCHAR(255),
	    consumerguid VARCHAR(1024),
	    profile TEXT,
	    toolproxy TEXT,
	    settings TEXT,
	    protected SMALLINT NOT NULL,
	    enabled SMALLINT NOT NULL,
	    enablefrom BIGINT,
	    enableuntil BIGINT,
	    lastaccess BIGINT,
	    created BIGINT NOT NULL,
	    updated BIGINT NOT NULL,
	CONSTRAINT mdl_enroltilti2cons_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_enrol_lti_lti2_consumer IS 'LTI consumers interacting with moodle'
	;
	CREATE UNIQUE INDEX mdl_enroltilti2cons_con_uix ON mdl_enrol_lti_lti2_consumer (consumerkey256)
	;
	CREATE TABLE mdl_enrol_lti_lti2_tool_proxy (
	    id BIGSERIAL,
	    toolproxykey VARCHAR(32) NOT NULL DEFAULT '',
	    consumerid BIGINT NOT NULL,
	    toolproxy TEXT NOT NULL,
	    created BIGINT NOT NULL,
	    updated BIGINT NOT NULL,
	CONSTRAINT mdl_enroltilti2toolprox_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_enrol_lti_lti2_tool_proxy IS 'A tool proxy between moodle and a consumer'
	;
	CREATE UNIQUE INDEX mdl_enroltilti2toolprox_to_uix ON mdl_enrol_lti_lti2_tool_proxy (toolproxykey)
	;
	CREATE INDEX mdl_enroltilti2toolprox_con_ix ON mdl_enrol_lti_lti2_tool_proxy (consumerid)
	;
	CREATE TABLE mdl_enrol_lti_lti2_context (
	    id BIGSERIAL,
	    consumerid BIGINT NOT NULL,
	    lticontextkey VARCHAR(255) NOT NULL DEFAULT '',
	    type VARCHAR(100),
	    settings TEXT,
	    created BIGINT NOT NULL,
	    updated BIGINT NOT NULL,
	CONSTRAINT mdl_enroltilti2cont_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_enrol_lti_lti2_context IS 'Information about a specific LTI contexts from the consumers'
	;
	CREATE INDEX mdl_enroltilti2cont_con_ix ON mdl_enrol_lti_lti2_context (consumerid)
	;
	CREATE TABLE mdl_enrol_lti_lti2_nonce (
	    id BIGSERIAL,
	    consumerid BIGINT NOT NULL,
	    value VARCHAR(64) NOT NULL DEFAULT '',
	    expires BIGINT NOT NULL,
	CONSTRAINT mdl_enroltilti2nonc_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_enrol_lti_lti2_nonce IS 'Nonce used for authentication between moodle and a consumer'
	;
	CREATE INDEX mdl_enroltilti2nonc_con_ix ON mdl_enrol_lti_lti2_nonce (consumerid)
	;
	CREATE TABLE mdl_enrol_lti_lti2_resource_link (
	    id BIGSERIAL,
	    contextid BIGINT,
	    consumerid BIGINT,
	    ltiresourcelinkkey VARCHAR(255) NOT NULL DEFAULT '',
	    settings TEXT,
	    primaryresourcelinkid BIGINT,
	    shareapproved SMALLINT,
	    created BIGINT NOT NULL,
	    updated BIGINT NOT NULL,
	CONSTRAINT mdl_enroltilti2resolink_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_enrol_lti_lti2_resource_link IS 'Link from the consumer to the tool'
	;
	CREATE INDEX mdl_enroltilti2resolink_con_ix ON mdl_enrol_lti_lti2_resource_link (contextid)
	;
	CREATE INDEX mdl_enroltilti2resolink_pri_ix ON mdl_enrol_lti_lti2_resource_link (primaryresourcelinkid)
	;
	CREATE INDEX mdl_enroltilti2resolink_co2_ix ON mdl_enrol_lti_lti2_resource_link (consumerid)
	;
	CREATE TABLE mdl_enrol_lti_lti2_share_key (
	    id BIGSERIAL,
	    sharekey VARCHAR(32) NOT NULL DEFAULT '',
	    resourcelinkid BIGINT NOT NULL,
	    autoapprove SMALLINT NOT NULL,
	    expires BIGINT NOT NULL,
	CONSTRAINT mdl_enroltilti2sharkey_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_enrol_lti_lti2_share_key IS 'Resource link share key'
	;
	CREATE UNIQUE INDEX mdl_enroltilti2sharkey_sha_uix ON mdl_enrol_lti_lti2_share_key (sharekey)
	;
	CREATE UNIQUE INDEX mdl_enroltilti2sharkey_res_uix ON mdl_enrol_lti_lti2_share_key (resourcelinkid)
	;
	CREATE TABLE mdl_enrol_lti_lti2_user_result (
	    id BIGSERIAL,
	    resourcelinkid BIGINT NOT NULL,
	    ltiuserkey VARCHAR(255) NOT NULL DEFAULT '',
	    ltiresultsourcedid VARCHAR(1024) NOT NULL DEFAULT '',
	    created BIGINT NOT NULL,
	    updated BIGINT NOT NULL,
	CONSTRAINT mdl_enroltilti2userresu_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_enrol_lti_lti2_user_result IS 'Results for each user for each resource link'
	;
	CREATE INDEX mdl_enroltilti2userresu_res_ix ON mdl_enrol_lti_lti2_user_result (resourcelinkid)
	;
	CREATE TABLE mdl_enrol_lti_tool_consumer_map (
	    id BIGSERIAL,
	    toolid BIGINT NOT NULL,
	    consumerid BIGINT NOT NULL,
	CONSTRAINT mdl_enroltitoolconsmap_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_enrol_lti_tool_consumer_map IS 'Table that maps the published tool to tool consumers.'
	;
	CREATE INDEX mdl_enroltitoolconsmap_too_ix ON mdl_enrol_lti_tool_consumer_map (toolid)
	;
	CREATE INDEX mdl_enroltitoolconsmap_con_ix ON mdl_enrol_lti_tool_consumer_map (consumerid)
	; COMMIT
LOG:  DDL LOCK TRACE: acquiring in mode <write_lock> (upgrading from <ddl_lock>) for (bdr (6678401888864649257,1,16384,)) [tracelevel=statement]
STATEMENT:  BEGIN ISOLATION LEVEL SERIALIZABLE;
	CREATE TABLE mdl_enrol_lti_tools (
	    id BIGSERIAL,
	    enrolid BIGINT NOT NULL,
	    contextid BIGINT NOT NULL,
	    institution VARCHAR(40) NOT NULL DEFAULT '',
	    lang VARCHAR(30) NOT NULL DEFAULT 'en',
	    timezone VARCHAR(100) NOT NULL DEFAULT '99',
	    maxenrolled BIGINT NOT NULL DEFAULT 0,
	    maildisplay SMALLINT NOT NULL DEFAULT 2,
	    city VARCHAR(120) NOT NULL DEFAULT '',
	    country VARCHAR(2) NOT NULL DEFAULT '',
	    gradesync SMALLINT NOT NULL DEFAULT 0,
	    gradesynccompletion SMALLINT NOT NULL DEFAULT 0,
	    membersync SMALLINT NOT NULL DEFAULT 0,
	    membersyncmode SMALLINT NOT NULL DEFAULT 0,
	    roleinstructor BIGINT NOT NULL,
	    rolelearner BIGINT NOT NULL,
	    secret TEXT,
	    timecreated BIGINT NOT NULL,
	    timemodified BIGINT NOT NULL,
	CONSTRAINT mdl_enroltitool_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_enrol_lti_tools IS 'List of tools provided to the remote system'
	;
	CREATE INDEX mdl_enroltitool_enr_ix ON mdl_enrol_lti_tools (enrolid)
	;
	CREATE INDEX mdl_enroltitool_con_ix ON mdl_enrol_lti_tools (contextid)
	;
	CREATE TABLE mdl_enrol_lti_users (
	    id BIGSERIAL,
	    userid BIGINT NOT NULL,
	    toolid BIGINT NOT NULL,
	    serviceurl TEXT,
	    sourceid TEXT,
	    consumerkey TEXT,
	    consumersecret TEXT,
	    membershipsurl TEXT,
	    membershipsid TEXT,
	    lastgrade NUMERIC(10,5),
	    lastaccess BIGINT,
	    timecreated BIGINT,
	CONSTRAINT mdl_enroltiuser_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_enrol_lti_users IS 'User access log and gradeback data'
	;
	CREATE INDEX mdl_enroltiuser_use_ix ON mdl_enrol_lti_users (userid)
	;
	CREATE INDEX mdl_enroltiuser_too_ix ON mdl_enrol_lti_users (toolid)
	;
	CREATE TABLE mdl_enrol_lti_lti2_consumer (
	    id BIGSERIAL,
	    name VARCHAR(50) NOT NULL DEFAULT '',
	    consumerkey256 VARCHAR(255) NOT NULL DEFAULT '',
	    consumerkey TEXT,
	    secret VARCHAR(1024) NOT NULL DEFAULT '',
	    ltiversion VARCHAR(10),
	    consumername VARCHAR(255),
	    consumerversion VARCHAR(255),
	    consumerguid VARCHAR(1024),
	    profile TEXT,
	    toolproxy TEXT,
	    settings TEXT,
	    protected SMALLINT NOT NULL,
	    enabled SMALLINT NOT NULL,
	    enablefrom BIGINT,
	    enableuntil BIGINT,
	    lastaccess BIGINT,
	    created BIGINT NOT NULL,
	    updated BIGINT NOT NULL,
	CONSTRAINT mdl_enroltilti2cons_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_enrol_lti_lti2_consumer IS 'LTI consumers interacting with moodle'
	;
	CREATE UNIQUE INDEX mdl_enroltilti2cons_con_uix ON mdl_enrol_lti_lti2_consumer (consumerkey256)
	;
	CREATE TABLE mdl_enrol_lti_lti2_tool_proxy (
	    id BIGSERIAL,
	    toolproxykey VARCHAR(32) NOT NULL DEFAULT '',
	    consumerid BIGINT NOT NULL,
	    toolproxy TEXT NOT NULL,
	    created BIGINT NOT NULL,
	    updated BIGINT NOT NULL,
	CONSTRAINT mdl_enroltilti2toolprox_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_enrol_lti_lti2_tool_proxy IS 'A tool proxy between moodle and a consumer'
	;
	CREATE UNIQUE INDEX mdl_enroltilti2toolprox_to_uix ON mdl_enrol_lti_lti2_tool_proxy (toolproxykey)
	;
	CREATE INDEX mdl_enroltilti2toolprox_con_ix ON mdl_enrol_lti_lti2_tool_proxy (consumerid)
	;
	CREATE TABLE mdl_enrol_lti_lti2_context (
	    id BIGSERIAL,
	    consumerid BIGINT NOT NULL,
	    lticontextkey VARCHAR(255) NOT NULL DEFAULT '',
	    type VARCHAR(100),
	    settings TEXT,
	    created BIGINT NOT NULL,
	    updated BIGINT NOT NULL,
	CONSTRAINT mdl_enroltilti2cont_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_enrol_lti_lti2_context IS 'Information about a specific LTI contexts from the consumers'
	;
	CREATE INDEX mdl_enroltilti2cont_con_ix ON mdl_enrol_lti_lti2_context (consumerid)
	;
	CREATE TABLE mdl_enrol_lti_lti2_nonce (
	    id BIGSERIAL,
	    consumerid BIGINT NOT NULL,
	    value VARCHAR(64) NOT NULL DEFAULT '',
	    expires BIGINT NOT NULL,
	CONSTRAINT mdl_enroltilti2nonc_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_enrol_lti_lti2_nonce IS 'Nonce used for authentication between moodle and a consumer'
	;
	CREATE INDEX mdl_enroltilti2nonc_con_ix ON mdl_enrol_lti_lti2_nonce (consumerid)
	;
	CREATE TABLE mdl_enrol_lti_lti2_resource_link (
	    id BIGSERIAL,
	    contextid BIGINT,
	    consumerid BIGINT,
	    ltiresourcelinkkey VARCHAR(255) NOT NULL DEFAULT '',
	    settings TEXT,
	    primaryresourcelinkid BIGINT,
	    shareapproved SMALLINT,
	    created BIGINT NOT NULL,
	    updated BIGINT NOT NULL,
	CONSTRAINT mdl_enroltilti2resolink_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_enrol_lti_lti2_resource_link IS 'Link from the consumer to the tool'
	;
	CREATE INDEX mdl_enroltilti2resolink_con_ix ON mdl_enrol_lti_lti2_resource_link (contextid)
	;
	CREATE INDEX mdl_enroltilti2resolink_pri_ix ON mdl_enrol_lti_lti2_resource_link (primaryresourcelinkid)
	;
	CREATE INDEX mdl_enroltilti2resolink_co2_ix ON mdl_enrol_lti_lti2_resource_link (consumerid)
	;
	CREATE TABLE mdl_enrol_lti_lti2_share_key (
	    id BIGSERIAL,
	    sharekey VARCHAR(32) NOT NULL DEFAULT '',
	    resourcelinkid BIGINT NOT NULL,
	    autoapprove SMALLINT NOT NULL,
	    expires BIGINT NOT NULL,
	CONSTRAINT mdl_enroltilti2sharkey_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_enrol_lti_lti2_share_key IS 'Resource link share key'
	;
	CREATE UNIQUE INDEX mdl_enroltilti2sharkey_sha_uix ON mdl_enrol_lti_lti2_share_key (sharekey)
	;
	CREATE UNIQUE INDEX mdl_enroltilti2sharkey_res_uix ON mdl_enrol_lti_lti2_share_key (resourcelinkid)
	;
	CREATE TABLE mdl_enrol_lti_lti2_user_result (
	    id BIGSERIAL,
	    resourcelinkid BIGINT NOT NULL,
	    ltiuserkey VARCHAR(255) NOT NULL DEFAULT '',
	    ltiresultsourcedid VARCHAR(1024) NOT NULL DEFAULT '',
	    created BIGINT NOT NULL,
	    updated BIGINT NOT NULL,
	CONSTRAINT mdl_enroltilti2userresu_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_enrol_lti_lti2_user_result IS 'Results for each user for each resource link'
	;
	CREATE INDEX mdl_enroltilti2userresu_res_ix ON mdl_enrol_lti_lti2_user_result (resourcelinkid)
	;
	CREATE TABLE mdl_enrol_lti_tool_consumer_map (
	    id BIGSERIAL,
	    toolid BIGINT NOT NULL,
	    consumerid BIGINT NOT NULL,
	CONSTRAINT mdl_enroltitoolconsmap_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_enrol_lti_tool_consumer_map IS 'Table that maps the published tool to tool consumers.'
	;
	CREATE INDEX mdl_enroltitoolconsmap_too_ix ON mdl_enrol_lti_tool_consumer_map (toolid)
	;
	CREATE INDEX mdl_enroltitoolconsmap_con_ix ON mdl_enrol_lti_tool_consumer_map (consumerid)
	; COMMIT
LOG:  DDL LOCK TRACE: acquiring in mode <ddl_lock> for (bdr (6678401888864649257,1,16384,)) [tracelevel=statement]
STATEMENT:  BEGIN ISOLATION LEVEL SERIALIZABLE;
	CREATE TABLE mdl_enrol_paypal (
	    id BIGSERIAL,
	    business VARCHAR(255) NOT NULL DEFAULT '',
	    receiver_email VARCHAR(255) NOT NULL DEFAULT '',
	    receiver_id VARCHAR(255) NOT NULL DEFAULT '',
	    item_name VARCHAR(255) NOT NULL DEFAULT '',
	    courseid BIGINT NOT NULL DEFAULT 0,
	    userid BIGINT NOT NULL DEFAULT 0,
	    instanceid BIGINT NOT NULL DEFAULT 0,
	    memo VARCHAR(255) NOT NULL DEFAULT '',
	    tax VARCHAR(255) NOT NULL DEFAULT '',
	    option_name1 VARCHAR(255) NOT NULL DEFAULT '',
	    option_selection1_x VARCHAR(255) NOT NULL DEFAULT '',
	    option_name2 VARCHAR(255) NOT NULL DEFAULT '',
	    option_selection2_x VARCHAR(255) NOT NULL DEFAULT '',
	    payment_status VARCHAR(255) NOT NULL DEFAULT '',
	    pending_reason VARCHAR(255) NOT NULL DEFAULT '',
	    reason_code VARCHAR(30) NOT NULL DEFAULT '',
	    txn_id VARCHAR(255) NOT NULL DEFAULT '',
	    parent_txn_id VARCHAR(255) NOT NULL DEFAULT '',
	    payment_type VARCHAR(30) NOT NULL DEFAULT '',
	    timeupdated BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_enropayp_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_enrol_paypal IS 'Holds all known information about PayPal transactions'
	;
	CREATE INDEX mdl_enropayp_bus_ix ON mdl_enrol_paypal (business)
	;
	CREATE INDEX mdl_enropayp_rec_ix ON mdl_enrol_paypal (receiver_email)
	;
	CREATE INDEX mdl_enropayp_cou_ix ON mdl_enrol_paypal (courseid)
	;
	CREATE INDEX mdl_enropayp_use_ix ON mdl_enrol_paypal (userid)
	;
	CREATE INDEX mdl_enropayp_ins_ix ON mdl_enrol_paypal (instanceid)
	; COMMIT
LOG:  DDL LOCK TRACE: acquiring in mode <write_lock> (upgrading from <ddl_lock>) for (bdr (6678401888864649257,1,16384,)) [tracelevel=statement]
STATEMENT:  BEGIN ISOLATION LEVEL SERIALIZABLE;
	CREATE TABLE mdl_enrol_paypal (
	    id BIGSERIAL,
	    business VARCHAR(255) NOT NULL DEFAULT '',
	    receiver_email VARCHAR(255) NOT NULL DEFAULT '',
	    receiver_id VARCHAR(255) NOT NULL DEFAULT '',
	    item_name VARCHAR(255) NOT NULL DEFAULT '',
	    courseid BIGINT NOT NULL DEFAULT 0,
	    userid BIGINT NOT NULL DEFAULT 0,
	    instanceid BIGINT NOT NULL DEFAULT 0,
	    memo VARCHAR(255) NOT NULL DEFAULT '',
	    tax VARCHAR(255) NOT NULL DEFAULT '',
	    option_name1 VARCHAR(255) NOT NULL DEFAULT '',
	    option_selection1_x VARCHAR(255) NOT NULL DEFAULT '',
	    option_name2 VARCHAR(255) NOT NULL DEFAULT '',
	    option_selection2_x VARCHAR(255) NOT NULL DEFAULT '',
	    payment_status VARCHAR(255) NOT NULL DEFAULT '',
	    pending_reason VARCHAR(255) NOT NULL DEFAULT '',
	    reason_code VARCHAR(30) NOT NULL DEFAULT '',
	    txn_id VARCHAR(255) NOT NULL DEFAULT '',
	    parent_txn_id VARCHAR(255) NOT NULL DEFAULT '',
	    payment_type VARCHAR(30) NOT NULL DEFAULT '',
	    timeupdated BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_enropayp_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_enrol_paypal IS 'Holds all known information about PayPal transactions'
	;
	CREATE INDEX mdl_enropayp_bus_ix ON mdl_enrol_paypal (business)
	;
	CREATE INDEX mdl_enropayp_rec_ix ON mdl_enrol_paypal (receiver_email)
	;
	CREATE INDEX mdl_enropayp_cou_ix ON mdl_enrol_paypal (courseid)
	;
	CREATE INDEX mdl_enropayp_use_ix ON mdl_enrol_paypal (userid)
	;
	CREATE INDEX mdl_enropayp_ins_ix ON mdl_enrol_paypal (instanceid)
	; COMMIT
LOG:  DDL LOCK TRACE: acquiring in mode <ddl_lock> for (bdr (6678401888864649257,1,16384,)) [tracelevel=statement]
STATEMENT:  BEGIN ISOLATION LEVEL SERIALIZABLE;
	CREATE TABLE mdl_message_airnotifier_devices (
	    id BIGSERIAL,
	    userdeviceid BIGINT NOT NULL,
	    enable SMALLINT NOT NULL DEFAULT 1,
	CONSTRAINT mdl_messairndevi_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_message_airnotifier_devices IS 'Store information about the devices registered in Airnotifier for PUSH notifications'
	;
	CREATE UNIQUE INDEX mdl_messairndevi_use_uix ON mdl_message_airnotifier_devices (userdeviceid)
	; COMMIT
LOG:  DDL LOCK TRACE: acquiring in mode <write_lock> (upgrading from <ddl_lock>) for (bdr (6678401888864649257,1,16384,)) [tracelevel=statement]
STATEMENT:  BEGIN ISOLATION LEVEL SERIALIZABLE;
	CREATE TABLE mdl_message_airnotifier_devices (
	    id BIGSERIAL,
	    userdeviceid BIGINT NOT NULL,
	    enable SMALLINT NOT NULL DEFAULT 1,
	CONSTRAINT mdl_messairndevi_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_message_airnotifier_devices IS 'Store information about the devices registered in Airnotifier for PUSH notifications'
	;
	CREATE UNIQUE INDEX mdl_messairndevi_use_uix ON mdl_message_airnotifier_devices (userdeviceid)
	; COMMIT
LOG:  DDL LOCK TRACE: acquiring in mode <ddl_lock> for (bdr (6678401888864649257,1,16384,)) [tracelevel=statement]
STATEMENT:  BEGIN ISOLATION LEVEL SERIALIZABLE;
	CREATE TABLE mdl_message_popup (
	    id BIGSERIAL,
	    messageid BIGINT NOT NULL,
	    isread SMALLINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_messpopu_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_message_popup IS 'Keep state of notifications for the popup message processor'
	;
	CREATE UNIQUE INDEX mdl_messpopu_mesisr_uix ON mdl_message_popup (messageid, isread)
	;
	CREATE INDEX mdl_messpopu_isr_ix ON mdl_message_popup (isread)
	;
	CREATE TABLE mdl_message_popup_notifications (
	    id BIGSERIAL,
	    notificationid BIGINT NOT NULL,
	CONSTRAINT mdl_messpopunoti_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_message_popup_notifications IS 'List of notifications to display in the message output popup'
	;
	CREATE INDEX mdl_messpopunoti_not_ix ON mdl_message_popup_notifications (notificationid)
	; COMMIT
LOG:  DDL LOCK TRACE: acquiring in mode <write_lock> (upgrading from <ddl_lock>) for (bdr (6678401888864649257,1,16384,)) [tracelevel=statement]
STATEMENT:  BEGIN ISOLATION LEVEL SERIALIZABLE;
	CREATE TABLE mdl_message_popup (
	    id BIGSERIAL,
	    messageid BIGINT NOT NULL,
	    isread SMALLINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_messpopu_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_message_popup IS 'Keep state of notifications for the popup message processor'
	;
	CREATE UNIQUE INDEX mdl_messpopu_mesisr_uix ON mdl_message_popup (messageid, isread)
	;
	CREATE INDEX mdl_messpopu_isr_ix ON mdl_message_popup (isread)
	;
	CREATE TABLE mdl_message_popup_notifications (
	    id BIGSERIAL,
	    notificationid BIGINT NOT NULL,
	CONSTRAINT mdl_messpopunoti_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_message_popup_notifications IS 'List of notifications to display in the message output popup'
	;
	CREATE INDEX mdl_messpopunoti_not_ix ON mdl_message_popup_notifications (notificationid)
	; COMMIT
LOG:  DDL LOCK TRACE: acquiring in mode <ddl_lock> for (bdr (6678401888864649257,1,16384,)) [tracelevel=statement]
STATEMENT:  BEGIN ISOLATION LEVEL SERIALIZABLE;
	CREATE TABLE mdl_block_community (
	    id BIGSERIAL,
	    userid BIGINT NOT NULL,
	    coursename VARCHAR(255) NOT NULL DEFAULT '',
	    coursedescription TEXT,
	    courseurl VARCHAR(255) NOT NULL DEFAULT '',
	    imageurl VARCHAR(255) NOT NULL DEFAULT '',
	CONSTRAINT mdl_bloccomm_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_block_community IS 'Community block'
	; COMMIT
LOG:  DDL LOCK TRACE: acquiring in mode <write_lock> (upgrading from <ddl_lock>) for (bdr (6678401888864649257,1,16384,)) [tracelevel=statement]
STATEMENT:  BEGIN ISOLATION LEVEL SERIALIZABLE;
	CREATE TABLE mdl_block_community (
	    id BIGSERIAL,
	    userid BIGINT NOT NULL,
	    coursename VARCHAR(255) NOT NULL DEFAULT '',
	    coursedescription TEXT,
	    courseurl VARCHAR(255) NOT NULL DEFAULT '',
	    imageurl VARCHAR(255) NOT NULL DEFAULT '',
	CONSTRAINT mdl_bloccomm_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_block_community IS 'Community block'
	; COMMIT
LOG:  DDL LOCK TRACE: acquiring in mode <ddl_lock> for (bdr (6678401888864649257,1,16384,)) [tracelevel=statement]
STATEMENT:  BEGIN ISOLATION LEVEL SERIALIZABLE;
	CREATE TABLE mdl_block_recent_activity (
	    id BIGSERIAL,
	    courseid BIGINT NOT NULL,
	    cmid BIGINT NOT NULL,
	    timecreated BIGINT NOT NULL,
	    userid BIGINT NOT NULL,
	    action SMALLINT NOT NULL,
	    modname VARCHAR(20),
	CONSTRAINT mdl_blocreceacti_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_block_recent_activity IS 'Recent activity block'
	;
	CREATE INDEX mdl_blocreceacti_coutim_ix ON mdl_block_recent_activity (courseid, timecreated)
	; COMMIT
LOG:  DDL LOCK TRACE: acquiring in mode <write_lock> (upgrading from <ddl_lock>) for (bdr (6678401888864649257,1,16384,)) [tracelevel=statement]
STATEMENT:  BEGIN ISOLATION LEVEL SERIALIZABLE;
	CREATE TABLE mdl_block_recent_activity (
	    id BIGSERIAL,
	    courseid BIGINT NOT NULL,
	    cmid BIGINT NOT NULL,
	    timecreated BIGINT NOT NULL,
	    userid BIGINT NOT NULL,
	    action SMALLINT NOT NULL,
	    modname VARCHAR(20),
	CONSTRAINT mdl_blocreceacti_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_block_recent_activity IS 'Recent activity block'
	;
	CREATE INDEX mdl_blocreceacti_coutim_ix ON mdl_block_recent_activity (courseid, timecreated)
	; COMMIT
LOG:  DDL LOCK TRACE: acquiring in mode <ddl_lock> for (bdr (6678401888864649257,1,16384,)) [tracelevel=statement]
STATEMENT:  BEGIN ISOLATION LEVEL SERIALIZABLE;
	CREATE TABLE mdl_block_rss_client (
	    id BIGSERIAL,
	    userid BIGINT NOT NULL DEFAULT 0,
	    title TEXT NOT NULL,
	    preferredtitle VARCHAR(64) NOT NULL DEFAULT '',
	    description TEXT NOT NULL,
	    shared SMALLINT NOT NULL DEFAULT 0,
	    url VARCHAR(255) NOT NULL DEFAULT '',
	    skiptime BIGINT NOT NULL DEFAULT 0,
	    skipuntil BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_blocrssclie_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_block_rss_client IS 'Remote news feed information. Contains the news feed id, the userid of the user who added the feed, the title of the feed itself and a description of the feed contents along with the url used to access the remote feed. Preferredtitle is a field for f'
	; COMMIT
LOG:  DDL LOCK TRACE: acquiring in mode <write_lock> (upgrading from <ddl_lock>) for (bdr (6678401888864649257,1,16384,)) [tracelevel=statement]
STATEMENT:  BEGIN ISOLATION LEVEL SERIALIZABLE;
	CREATE TABLE mdl_block_rss_client (
	    id BIGSERIAL,
	    userid BIGINT NOT NULL DEFAULT 0,
	    title TEXT NOT NULL,
	    preferredtitle VARCHAR(64) NOT NULL DEFAULT '',
	    description TEXT NOT NULL,
	    shared SMALLINT NOT NULL DEFAULT 0,
	    url VARCHAR(255) NOT NULL DEFAULT '',
	    skiptime BIGINT NOT NULL DEFAULT 0,
	    skipuntil BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_blocrssclie_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_block_rss_client IS 'Remote news feed information. Contains the news feed id, the userid of the user who added the feed, the title of the feed itself and a description of the feed contents along with the url used to access the remote feed. Preferredtitle is a field for f'
	; COMMIT
LOG:  DDL LOCK TRACE: acquiring in mode <ddl_lock> for (bdr (6678401888864649257,1,16384,)) [tracelevel=statement]
STATEMENT:  BEGIN ISOLATION LEVEL SERIALIZABLE;
	CREATE TABLE mdl_editor_atto_autosave (
	    id BIGSERIAL,
	    elementid VARCHAR(255) NOT NULL DEFAULT '',
	    contextid BIGINT NOT NULL,
	    pagehash VARCHAR(64) NOT NULL DEFAULT '',
	    userid BIGINT NOT NULL,
	    drafttext TEXT NOT NULL,
	    draftid BIGINT,
	    pageinstance VARCHAR(64) NOT NULL DEFAULT '',
	    timemodified BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_editattoauto_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_editor_atto_autosave IS 'Draft text that is auto-saved every 5 seconds while an editor is open.'
	;
	CREATE UNIQUE INDEX mdl_editattoauto_eleconuse_uix ON mdl_editor_atto_autosave (elementid, contextid, userid, pagehash)
	; COMMIT
LOG:  DDL LOCK TRACE: acquiring in mode <write_lock> (upgrading from <ddl_lock>) for (bdr (6678401888864649257,1,16384,)) [tracelevel=statement]
STATEMENT:  BEGIN ISOLATION LEVEL SERIALIZABLE;
	CREATE TABLE mdl_editor_atto_autosave (
	    id BIGSERIAL,
	    elementid VARCHAR(255) NOT NULL DEFAULT '',
	    contextid BIGINT NOT NULL,
	    pagehash VARCHAR(64) NOT NULL DEFAULT '',
	    userid BIGINT NOT NULL,
	    drafttext TEXT NOT NULL,
	    draftid BIGINT,
	    pageinstance VARCHAR(64) NOT NULL DEFAULT '',
	    timemodified BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_editattoauto_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_editor_atto_autosave IS 'Draft text that is auto-saved every 5 seconds while an editor is open.'
	;
	CREATE UNIQUE INDEX mdl_editattoauto_eleconuse_uix ON mdl_editor_atto_autosave (elementid, contextid, userid, pagehash)
	; COMMIT
LOG:  DDL LOCK TRACE: acquiring in mode <ddl_lock> for (bdr (6678401888864649257,1,16384,)) [tracelevel=statement]
STATEMENT:  BEGIN ISOLATION LEVEL SERIALIZABLE;
	CREATE TABLE mdl_gradingform_guide_criteria (
	    id BIGSERIAL,
	    definitionid BIGINT NOT NULL,
	    sortorder BIGINT NOT NULL,
	    shortname VARCHAR(255) NOT NULL DEFAULT '',
	    description TEXT,
	    descriptionformat SMALLINT,
	    descriptionmarkers TEXT,
	    descriptionmarkersformat SMALLINT,
	    maxscore NUMERIC(10,5) NOT NULL,
	CONSTRAINT mdl_gradguidcrit_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_gradingform_guide_criteria IS 'Stores the rows of the criteria grid.'
	;
	CREATE INDEX mdl_gradguidcrit_def_ix ON mdl_gradingform_guide_criteria (definitionid)
	;
	CREATE TABLE mdl_gradingform_guide_fillings (
	    id BIGSERIAL,
	    instanceid BIGINT NOT NULL,
	    criterionid BIGINT NOT NULL,
	    remark TEXT,
	    remarkformat SMALLINT,
	    score NUMERIC(10,5) NOT NULL,
	CONSTRAINT mdl_gradguidfill_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_gradingform_guide_fillings IS 'Stores the data of how the guide is filled by a particular rater'
	;
	CREATE INDEX mdl_gradguidfill_ins_ix ON mdl_gradingform_guide_fillings (instanceid)
	;
	CREATE INDEX mdl_gradguidfill_cri_ix ON mdl_gradingform_guide_fillings (criterionid)
	;
	CREATE UNIQUE INDEX mdl_gradguidfill_inscri_uix ON mdl_gradingform_guide_fillings (instanceid, criterionid)
	;
	CREATE TABLE mdl_gradingform_guide_comments (
	    id BIGSERIAL,
	    definitionid BIGINT NOT NULL,
	    sortorder BIGINT NOT NULL,
	    description TEXT,
	    descriptionformat SMALLINT,
	CONSTRAINT mdl_gradguidcomm_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_gradingform_guide_comments IS 'frequently used comments used in marking guide'
	;
	CREATE INDEX mdl_gradguidcomm_def_ix ON mdl_gradingform_guide_comments (definitionid)
	; COMMIT
LOG:  DDL LOCK TRACE: acquiring in mode <write_lock> (upgrading from <ddl_lock>) for (bdr (6678401888864649257,1,16384,)) [tracelevel=statement]
STATEMENT:  BEGIN ISOLATION LEVEL SERIALIZABLE;
	CREATE TABLE mdl_gradingform_guide_criteria (
	    id BIGSERIAL,
	    definitionid BIGINT NOT NULL,
	    sortorder BIGINT NOT NULL,
	    shortname VARCHAR(255) NOT NULL DEFAULT '',
	    description TEXT,
	    descriptionformat SMALLINT,
	    descriptionmarkers TEXT,
	    descriptionmarkersformat SMALLINT,
	    maxscore NUMERIC(10,5) NOT NULL,
	CONSTRAINT mdl_gradguidcrit_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_gradingform_guide_criteria IS 'Stores the rows of the criteria grid.'
	;
	CREATE INDEX mdl_gradguidcrit_def_ix ON mdl_gradingform_guide_criteria (definitionid)
	;
	CREATE TABLE mdl_gradingform_guide_fillings (
	    id BIGSERIAL,
	    instanceid BIGINT NOT NULL,
	    criterionid BIGINT NOT NULL,
	    remark TEXT,
	    remarkformat SMALLINT,
	    score NUMERIC(10,5) NOT NULL,
	CONSTRAINT mdl_gradguidfill_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_gradingform_guide_fillings IS 'Stores the data of how the guide is filled by a particular rater'
	;
	CREATE INDEX mdl_gradguidfill_ins_ix ON mdl_gradingform_guide_fillings (instanceid)
	;
	CREATE INDEX mdl_gradguidfill_cri_ix ON mdl_gradingform_guide_fillings (criterionid)
	;
	CREATE UNIQUE INDEX mdl_gradguidfill_inscri_uix ON mdl_gradingform_guide_fillings (instanceid, criterionid)
	;
	CREATE TABLE mdl_gradingform_guide_comments (
	    id BIGSERIAL,
	    definitionid BIGINT NOT NULL,
	    sortorder BIGINT NOT NULL,
	    description TEXT,
	    descriptionformat SMALLINT,
	CONSTRAINT mdl_gradguidcomm_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_gradingform_guide_comments IS 'frequently used comments used in marking guide'
	;
	CREATE INDEX mdl_gradguidcomm_def_ix ON mdl_gradingform_guide_comments (definitionid)
	; COMMIT
LOG:  DDL LOCK TRACE: acquiring in mode <ddl_lock> for (bdr (6678401888864649257,1,16384,)) [tracelevel=statement]
STATEMENT:  BEGIN ISOLATION LEVEL SERIALIZABLE;
	CREATE TABLE mdl_gradingform_rubric_criteria (
	    id BIGSERIAL,
	    definitionid BIGINT NOT NULL,
	    sortorder BIGINT NOT NULL,
	    description TEXT,
	    descriptionformat SMALLINT,
	CONSTRAINT mdl_gradrubrcrit_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_gradingform_rubric_criteria IS 'Stores the rows of the rubric grid.'
	;
	CREATE INDEX mdl_gradrubrcrit_def_ix ON mdl_gradingform_rubric_criteria (definitionid)
	;
	CREATE TABLE mdl_gradingform_rubric_levels (
	    id BIGSERIAL,
	    criterionid BIGINT NOT NULL,
	    score NUMERIC(10,5) NOT NULL,
	    definition TEXT,
	    definitionformat BIGINT,
	CONSTRAINT mdl_gradrubrleve_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_gradingform_rubric_levels IS 'Stores the columns of the rubric grid.'
	;
	CREATE INDEX mdl_gradrubrleve_cri_ix ON mdl_gradingform_rubric_levels (criterionid)
	;
	CREATE TABLE mdl_gradingform_rubric_fillings (
	    id BIGSERIAL,
	    instanceid BIGINT NOT NULL,
	    criterionid BIGINT NOT NULL,
	    levelid BIGINT,
	    remark TEXT,
	    remarkformat SMALLINT,
	CONSTRAINT mdl_gradrubrfill_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_gradingform_rubric_fillings IS 'Stores the data of how the rubric is filled by a particular rater'
	;
	CREATE INDEX mdl_gradrubrfill_lev_ix ON mdl_gradingform_rubric_fillings (levelid)
	;
	CREATE INDEX mdl_gradrubrfill_ins_ix ON mdl_gradingform_rubric_fillings (instanceid)
	;
	CREATE INDEX mdl_gradrubrfill_cri_ix ON mdl_gradingform_rubric_fillings (criterionid)
	;
	CREATE UNIQUE INDEX mdl_gradrubrfill_inscri_uix ON mdl_gradingform_rubric_fillings (instanceid, criterionid)
	; COMMIT
LOG:  DDL LOCK TRACE: acquiring in mode <write_lock> (upgrading from <ddl_lock>) for (bdr (6678401888864649257,1,16384,)) [tracelevel=statement]
STATEMENT:  BEGIN ISOLATION LEVEL SERIALIZABLE;
	CREATE TABLE mdl_gradingform_rubric_criteria (
	    id BIGSERIAL,
	    definitionid BIGINT NOT NULL,
	    sortorder BIGINT NOT NULL,
	    description TEXT,
	    descriptionformat SMALLINT,
	CONSTRAINT mdl_gradrubrcrit_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_gradingform_rubric_criteria IS 'Stores the rows of the rubric grid.'
	;
	CREATE INDEX mdl_gradrubrcrit_def_ix ON mdl_gradingform_rubric_criteria (definitionid)
	;
	CREATE TABLE mdl_gradingform_rubric_levels (
	    id BIGSERIAL,
	    criterionid BIGINT NOT NULL,
	    score NUMERIC(10,5) NOT NULL,
	    definition TEXT,
	    definitionformat BIGINT,
	CONSTRAINT mdl_gradrubrleve_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_gradingform_rubric_levels IS 'Stores the columns of the rubric grid.'
	;
	CREATE INDEX mdl_gradrubrleve_cri_ix ON mdl_gradingform_rubric_levels (criterionid)
	;
	CREATE TABLE mdl_gradingform_rubric_fillings (
	    id BIGSERIAL,
	    instanceid BIGINT NOT NULL,
	    criterionid BIGINT NOT NULL,
	    levelid BIGINT,
	    remark TEXT,
	    remarkformat SMALLINT,
	CONSTRAINT mdl_gradrubrfill_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_gradingform_rubric_fillings IS 'Stores the data of how the rubric is filled by a particular rater'
	;
	CREATE INDEX mdl_gradrubrfill_lev_ix ON mdl_gradingform_rubric_fillings (levelid)
	;
	CREATE INDEX mdl_gradrubrfill_ins_ix ON mdl_gradingform_rubric_fillings (instanceid)
	;
	CREATE INDEX mdl_gradrubrfill_cri_ix ON mdl_gradingform_rubric_fillings (criterionid)
	;
	CREATE UNIQUE INDEX mdl_gradrubrfill_inscri_uix ON mdl_gradingform_rubric_fillings (instanceid, criterionid)
	; COMMIT
LOG:  DDL LOCK TRACE: acquiring in mode <ddl_lock> for (bdr (6678401888864649257,1,16384,)) [tracelevel=statement]
STATEMENT:  BEGIN ISOLATION LEVEL SERIALIZABLE;
	CREATE TABLE mdl_mnetservice_enrol_courses (
	    id BIGSERIAL,
	    hostid BIGINT NOT NULL,
	    remoteid BIGINT NOT NULL,
	    categoryid BIGINT NOT NULL,
	    categoryname VARCHAR(255) NOT NULL DEFAULT '',
	    sortorder BIGINT NOT NULL DEFAULT 0,
	    fullname VARCHAR(254) NOT NULL DEFAULT '',
	    shortname VARCHAR(100) NOT NULL DEFAULT '',
	    idnumber VARCHAR(100) NOT NULL DEFAULT '',
	    summary TEXT NOT NULL,
	    summaryformat SMALLINT DEFAULT 0,
	    startdate BIGINT NOT NULL,
	    roleid BIGINT NOT NULL,
	    rolename VARCHAR(255) NOT NULL DEFAULT '',
	CONSTRAINT mdl_mnetenrocour_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_mnetservice_enrol_courses IS 'Caches the information fetched via XML-RPC about courses on remote hosts that are offered for our users'
	;
	CREATE UNIQUE INDEX mdl_mnetenrocour_hosrem_uix ON mdl_mnetservice_enrol_courses (hostid, remoteid)
	;
	CREATE TABLE mdl_mnetservice_enrol_enrolments (
	    id BIGSERIAL,
	    hostid BIGINT NOT NULL,
	    userid BIGINT NOT NULL,
	    remotecourseid BIGINT NOT NULL,
	    rolename VARCHAR(255) NOT NULL DEFAULT '',
	    enroltime BIGINT NOT NULL DEFAULT 0,
	    enroltype VARCHAR(20) NOT NULL DEFAULT '',
	CONSTRAINT mdl_mnetenroenro_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_mnetservice_enrol_enrolments IS 'Caches the information about enrolments of our local users in courses on remote hosts'
	;
	CREATE INDEX mdl_mnetenroenro_use_ix ON mdl_mnetservice_enrol_enrolments (userid)
	;
	CREATE INDEX mdl_mnetenroenro_hos_ix ON mdl_mnetservice_enrol_enrolments (hostid)
	; COMMIT
LOG:  DDL LOCK TRACE: acquiring in mode <write_lock> (upgrading from <ddl_lock>) for (bdr (6678401888864649257,1,16384,)) [tracelevel=statement]
STATEMENT:  BEGIN ISOLATION LEVEL SERIALIZABLE;
	CREATE TABLE mdl_mnetservice_enrol_courses (
	    id BIGSERIAL,
	    hostid BIGINT NOT NULL,
	    remoteid BIGINT NOT NULL,
	    categoryid BIGINT NOT NULL,
	    categoryname VARCHAR(255) NOT NULL DEFAULT '',
	    sortorder BIGINT NOT NULL DEFAULT 0,
	    fullname VARCHAR(254) NOT NULL DEFAULT '',
	    shortname VARCHAR(100) NOT NULL DEFAULT '',
	    idnumber VARCHAR(100) NOT NULL DEFAULT '',
	    summary TEXT NOT NULL,
	    summaryformat SMALLINT DEFAULT 0,
	    startdate BIGINT NOT NULL,
	    roleid BIGINT NOT NULL,
	    rolename VARCHAR(255) NOT NULL DEFAULT '',
	CONSTRAINT mdl_mnetenrocour_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_mnetservice_enrol_courses IS 'Caches the information fetched via XML-RPC about courses on remote hosts that are offered for our users'
	;
	CREATE UNIQUE INDEX mdl_mnetenrocour_hosrem_uix ON mdl_mnetservice_enrol_courses (hostid, remoteid)
	;
	CREATE TABLE mdl_mnetservice_enrol_enrolments (
	    id BIGSERIAL,
	    hostid BIGINT NOT NULL,
	    userid BIGINT NOT NULL,
	    remotecourseid BIGINT NOT NULL,
	    rolename VARCHAR(255) NOT NULL DEFAULT '',
	    enroltime BIGINT NOT NULL DEFAULT 0,
	    enroltype VARCHAR(20) NOT NULL DEFAULT '',
	CONSTRAINT mdl_mnetenroenro_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_mnetservice_enrol_enrolments IS 'Caches the information about enrolments of our local users in courses on remote hosts'
	;
	CREATE INDEX mdl_mnetenroenro_use_ix ON mdl_mnetservice_enrol_enrolments (userid)
	;
	CREATE INDEX mdl_mnetenroenro_hos_ix ON mdl_mnetservice_enrol_enrolments (hostid)
	; COMMIT
LOG:  DDL LOCK TRACE: acquiring in mode <ddl_lock> for (bdr (6678401888864649257,1,16384,)) [tracelevel=statement]
STATEMENT:  BEGIN ISOLATION LEVEL SERIALIZABLE;
	CREATE TABLE mdl_repository_onedrive_access (
	    id BIGSERIAL,
	    timemodified BIGINT NOT NULL,
	    timecreated BIGINT NOT NULL,
	    usermodified BIGINT NOT NULL,
	    permissionid VARCHAR(255) NOT NULL DEFAULT '',
	    itemid VARCHAR(255) NOT NULL DEFAULT '',
	CONSTRAINT mdl_repoonedacce_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_repository_onedrive_access IS 'List of temporary access grants.'
	;
	CREATE INDEX mdl_repoonedacce_use_ix ON mdl_repository_onedrive_access (usermodified)
	; COMMIT
LOG:  DDL LOCK TRACE: acquiring in mode <write_lock> (upgrading from <ddl_lock>) for (bdr (6678401888864649257,1,16384,)) [tracelevel=statement]
STATEMENT:  BEGIN ISOLATION LEVEL SERIALIZABLE;
	CREATE TABLE mdl_repository_onedrive_access (
	    id BIGSERIAL,
	    timemodified BIGINT NOT NULL,
	    timecreated BIGINT NOT NULL,
	    usermodified BIGINT NOT NULL,
	    permissionid VARCHAR(255) NOT NULL DEFAULT '',
	    itemid VARCHAR(255) NOT NULL DEFAULT '',
	CONSTRAINT mdl_repoonedacce_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_repository_onedrive_access IS 'List of temporary access grants.'
	;
	CREATE INDEX mdl_repoonedacce_use_ix ON mdl_repository_onedrive_access (usermodified)
	; COMMIT
LOG:  DDL LOCK TRACE: acquiring in mode <ddl_lock> for (bdr (6678401888864649257,1,16384,)) [tracelevel=statement]
STATEMENT:  BEGIN ISOLATION LEVEL SERIALIZABLE;
	CREATE TABLE mdl_portfolio_mahara_queue (
	    id BIGSERIAL,
	    transferid BIGINT NOT NULL,
	    token VARCHAR(50) NOT NULL DEFAULT '',
	CONSTRAINT mdl_portmahaqueu_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_portfolio_mahara_queue IS 'maps mahara tokens to transfer ids'
	;
	CREATE INDEX mdl_portmahaqueu_tok_ix ON mdl_portfolio_mahara_queue (token)
	;
	CREATE INDEX mdl_portmahaqueu_tra_ix ON mdl_portfolio_mahara_queue (transferid)
	; COMMIT
LOG:  DDL LOCK TRACE: acquiring in mode <write_lock> (upgrading from <ddl_lock>) for (bdr (6678401888864649257,1,16384,)) [tracelevel=statement]
STATEMENT:  BEGIN ISOLATION LEVEL SERIALIZABLE;
	CREATE TABLE mdl_portfolio_mahara_queue (
	    id BIGSERIAL,
	    transferid BIGINT NOT NULL,
	    token VARCHAR(50) NOT NULL DEFAULT '',
	CONSTRAINT mdl_portmahaqueu_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_portfolio_mahara_queue IS 'maps mahara tokens to transfer ids'
	;
	CREATE INDEX mdl_portmahaqueu_tok_ix ON mdl_portfolio_mahara_queue (token)
	;
	CREATE INDEX mdl_portmahaqueu_tra_ix ON mdl_portfolio_mahara_queue (transferid)
	; COMMIT
LOG:  DDL LOCK TRACE: acquiring in mode <ddl_lock> for (bdr (6678401888864649257,1,16384,)) [tracelevel=statement]
STATEMENT:  BEGIN ISOLATION LEVEL SERIALIZABLE;
	CREATE TABLE mdl_search_simpledb_index (
	    id BIGSERIAL,
	    docid VARCHAR(255) NOT NULL DEFAULT '',
	    itemid BIGINT NOT NULL,
	    title TEXT,
	    content TEXT,
	    contextid BIGINT NOT NULL,
	    areaid VARCHAR(255) NOT NULL DEFAULT '',
	    type SMALLINT NOT NULL,
	    courseid BIGINT NOT NULL,
	    owneruserid BIGINT,
	    modified BIGINT NOT NULL,
	    userid BIGINT,
	    description1 TEXT,
	    description2 TEXT,
	CONSTRAINT mdl_searsimpinde_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_search_simpledb_index IS 'search_simpledb table containing the index data.'
	;
	CREATE INDEX mdl_searsimpinde_owncon_ix ON mdl_search_simpledb_index (owneruserid, contextid)
	;
	CREATE UNIQUE INDEX mdl_searsimpinde_doc_uix ON mdl_search_simpledb_index (docid)
	; COMMIT
LOG:  DDL LOCK TRACE: acquiring in mode <write_lock> (upgrading from <ddl_lock>) for (bdr (6678401888864649257,1,16384,)) [tracelevel=statement]
STATEMENT:  BEGIN ISOLATION LEVEL SERIALIZABLE;
	CREATE TABLE mdl_search_simpledb_index (
	    id BIGSERIAL,
	    docid VARCHAR(255) NOT NULL DEFAULT '',
	    itemid BIGINT NOT NULL,
	    title TEXT,
	    content TEXT,
	    contextid BIGINT NOT NULL,
	    areaid VARCHAR(255) NOT NULL DEFAULT '',
	    type SMALLINT NOT NULL,
	    courseid BIGINT NOT NULL,
	    owneruserid BIGINT,
	    modified BIGINT NOT NULL,
	    userid BIGINT,
	    description1 TEXT,
	    description2 TEXT,
	CONSTRAINT mdl_searsimpinde_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_search_simpledb_index IS 'search_simpledb table containing the index data.'
	;
	CREATE INDEX mdl_searsimpinde_owncon_ix ON mdl_search_simpledb_index (owneruserid, contextid)
	;
	CREATE UNIQUE INDEX mdl_searsimpinde_doc_uix ON mdl_search_simpledb_index (docid)
	; COMMIT
LOG:  DDL LOCK TRACE: acquiring in mode <write_lock> for (bdr (6678401888864649257,1,16384,)) [tracelevel=statement]
STATEMENT:  CREATE INDEX mdl_search_simpledb_title ON mdl_search_simpledb_index USING gin(to_tsvector('simple', title))
LOG:  DDL LOCK TRACE: acquiring in mode <write_lock> for (bdr (6678401888864649257,1,16384,)) [tracelevel=statement]
STATEMENT:  CREATE INDEX mdl_search_simpledb_content ON mdl_search_simpledb_index USING gin(to_tsvector('simple', content))
LOG:  DDL LOCK TRACE: acquiring in mode <write_lock> for (bdr (6678401888864649257,1,16384,)) [tracelevel=statement]
STATEMENT:  CREATE INDEX mdl_search_simpledb_description1 ON mdl_search_simpledb_index USING gin(to_tsvector('simple', description1))
LOG:  DDL LOCK TRACE: acquiring in mode <write_lock> for (bdr (6678401888864649257,1,16384,)) [tracelevel=statement]
STATEMENT:  CREATE INDEX mdl_search_simpledb_description2 ON mdl_search_simpledb_index USING gin(to_tsvector('simple', description2))
LOG:  DDL LOCK TRACE: acquiring in mode <ddl_lock> for (bdr (6678401888864649257,1,16384,)) [tracelevel=statement]
STATEMENT:  BEGIN ISOLATION LEVEL SERIALIZABLE;
	CREATE TABLE mdl_tool_cohortroles (
	    id BIGSERIAL,
	    cohortid BIGINT NOT NULL,
	    roleid BIGINT NOT NULL,
	    userid BIGINT NOT NULL,
	    timecreated BIGINT NOT NULL,
	    timemodified BIGINT NOT NULL,
	    usermodified BIGINT,
	CONSTRAINT mdl_toolcoho_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_tool_cohortroles IS 'Mapping of users to cohort role assignments.'
	;
	CREATE UNIQUE INDEX mdl_toolcoho_cohroluse_uix ON mdl_tool_cohortroles (cohortid, roleid, userid)
	; COMMIT
LOG:  DDL LOCK TRACE: acquiring in mode <write_lock> (upgrading from <ddl_lock>) for (bdr (6678401888864649257,1,16384,)) [tracelevel=statement]
STATEMENT:  BEGIN ISOLATION LEVEL SERIALIZABLE;
	CREATE TABLE mdl_tool_cohortroles (
	    id BIGSERIAL,
	    cohortid BIGINT NOT NULL,
	    roleid BIGINT NOT NULL,
	    userid BIGINT NOT NULL,
	    timecreated BIGINT NOT NULL,
	    timemodified BIGINT NOT NULL,
	    usermodified BIGINT,
	CONSTRAINT mdl_toolcoho_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_tool_cohortroles IS 'Mapping of users to cohort role assignments.'
	;
	CREATE UNIQUE INDEX mdl_toolcoho_cohroluse_uix ON mdl_tool_cohortroles (cohortid, roleid, userid)
	; COMMIT
LOG:  DDL LOCK TRACE: acquiring in mode <ddl_lock> for (bdr (6678401888864649257,1,16384,)) [tracelevel=statement]
STATEMENT:  BEGIN ISOLATION LEVEL SERIALIZABLE;
	CREATE TABLE mdl_tool_customlang (
	    id BIGSERIAL,
	    lang VARCHAR(20) NOT NULL DEFAULT '',
	    componentid BIGINT NOT NULL,
	    stringid VARCHAR(255) NOT NULL DEFAULT '',
	    original TEXT NOT NULL,
	    master TEXT,
	    local TEXT,
	    timemodified BIGINT NOT NULL,
	    timecustomized BIGINT,
	    outdated SMALLINT DEFAULT 0,
	    modified SMALLINT DEFAULT 0,
	CONSTRAINT mdl_toolcust_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_tool_customlang IS 'Contains the working checkout of all strings and their customization'
	;
	CREATE UNIQUE INDEX mdl_toolcust_lancomstr_uix ON mdl_tool_customlang (lang, componentid, stringid)
	;
	CREATE INDEX mdl_toolcust_com_ix ON mdl_tool_customlang (componentid)
	;
	CREATE TABLE mdl_tool_customlang_components (
	    id BIGSERIAL,
	    name VARCHAR(255) NOT NULL DEFAULT '',
	    version VARCHAR(255),
	CONSTRAINT mdl_toolcustcomp_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_tool_customlang_components IS 'Contains the list of all installed plugins that provide their own language pack'
	; COMMIT
LOG:  DDL LOCK TRACE: acquiring in mode <write_lock> (upgrading from <ddl_lock>) for (bdr (6678401888864649257,1,16384,)) [tracelevel=statement]
STATEMENT:  BEGIN ISOLATION LEVEL SERIALIZABLE;
	CREATE TABLE mdl_tool_customlang (
	    id BIGSERIAL,
	    lang VARCHAR(20) NOT NULL DEFAULT '',
	    componentid BIGINT NOT NULL,
	    stringid VARCHAR(255) NOT NULL DEFAULT '',
	    original TEXT NOT NULL,
	    master TEXT,
	    local TEXT,
	    timemodified BIGINT NOT NULL,
	    timecustomized BIGINT,
	    outdated SMALLINT DEFAULT 0,
	    modified SMALLINT DEFAULT 0,
	CONSTRAINT mdl_toolcust_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_tool_customlang IS 'Contains the working checkout of all strings and their customization'
	;
	CREATE UNIQUE INDEX mdl_toolcust_lancomstr_uix ON mdl_tool_customlang (lang, componentid, stringid)
	;
	CREATE INDEX mdl_toolcust_com_ix ON mdl_tool_customlang (componentid)
	;
	CREATE TABLE mdl_tool_customlang_components (
	    id BIGSERIAL,
	    name VARCHAR(255) NOT NULL DEFAULT '',
	    version VARCHAR(255),
	CONSTRAINT mdl_toolcustcomp_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_tool_customlang_components IS 'Contains the list of all installed plugins that provide their own language pack'
	; COMMIT
LOG:  DDL LOCK TRACE: acquiring in mode <ddl_lock> for (bdr (6678401888864649257,1,16384,)) [tracelevel=statement]
STATEMENT:  BEGIN ISOLATION LEVEL SERIALIZABLE;
	CREATE TABLE mdl_tool_dataprivacy_request (
	    id BIGSERIAL,
	    type BIGINT NOT NULL DEFAULT 0,
	    comments TEXT,
	    commentsformat SMALLINT NOT NULL DEFAULT 0,
	    userid BIGINT NOT NULL DEFAULT 0,
	    requestedby BIGINT NOT NULL DEFAULT 0,
	    status SMALLINT NOT NULL DEFAULT 0,
	    dpo BIGINT DEFAULT 0,
	    dpocomment TEXT,
	    dpocommentformat SMALLINT NOT NULL DEFAULT 0,
	    usermodified BIGINT NOT NULL DEFAULT 0,
	    timecreated BIGINT NOT NULL DEFAULT 0,
	    timemodified BIGINT NOT NULL DEFAULT 0,
	    creationmethod BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_tooldatarequ_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_tool_dataprivacy_request IS 'Table for data requests'
	;
	CREATE INDEX mdl_tooldatarequ_use_ix ON mdl_tool_dataprivacy_request (userid)
	;
	CREATE INDEX mdl_tooldatarequ_req_ix ON mdl_tool_dataprivacy_request (requestedby)
	;
	CREATE INDEX mdl_tooldatarequ_dpo_ix ON mdl_tool_dataprivacy_request (dpo)
	;
	CREATE INDEX mdl_tooldatarequ_use2_ix ON mdl_tool_dataprivacy_request (usermodified)
	;
	CREATE TABLE mdl_tool_dataprivacy_purpose (
	    id BIGSERIAL,
	    name VARCHAR(100) NOT NULL DEFAULT '',
	    description TEXT,
	    descriptionformat SMALLINT,
	    lawfulbases TEXT NOT NULL,
	    sensitivedatareasons TEXT,
	    retentionperiod VARCHAR(255) NOT NULL DEFAULT '',
	    protected SMALLINT,
	    usermodified BIGINT NOT NULL,
	    timecreated BIGINT NOT NULL,
	    timemodified BIGINT NOT NULL,
	CONSTRAINT mdl_tooldatapurp_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_tool_dataprivacy_purpose IS 'Data purposes'
	;
	CREATE TABLE mdl_tool_dataprivacy_category (
	    id BIGSERIAL,
	    name VARCHAR(100) NOT NULL DEFAULT '',
	    description TEXT,
	    descriptionformat SMALLINT,
	    usermodified BIGINT NOT NULL,
	    timecreated BIGINT NOT NULL,
	    timemodified BIGINT NOT NULL,
	CONSTRAINT mdl_tooldatacate_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_tool_dataprivacy_category IS 'Data categories'
	;
	CREATE TABLE mdl_tool_dataprivacy_ctxinstance (
	    id BIGSERIAL,
	    contextid BIGINT NOT NULL,
	    purposeid BIGINT,
	    categoryid BIGINT,
	    usermodified BIGINT NOT NULL,
	    timecreated BIGINT NOT NULL,
	    timemodified BIGINT NOT NULL,
	CONSTRAINT mdl_tooldatactxi_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_tool_dataprivacy_ctxinstance IS 'Default comment for the table, please edit me'
	;
	CREATE UNIQUE INDEX mdl_tooldatactxi_con_uix ON mdl_tool_dataprivacy_ctxinstance (contextid)
	;
	CREATE INDEX mdl_tooldatactxi_pur_ix ON mdl_tool_dataprivacy_ctxinstance (purposeid)
	;
	CREATE INDEX mdl_tooldatactxi_cat_ix ON mdl_tool_dataprivacy_ctxinstance (categoryid)
	;
	CREATE TABLE mdl_tool_dataprivacy_ctxlevel (
	    id BIGSERIAL,
	    contextlevel SMALLINT NOT NULL,
	    purposeid BIGINT,
	    categoryid BIGINT,
	    usermodified BIGINT NOT NULL,
	    timecreated BIGINT NOT NULL,
	    timemodified BIGINT NOT NULL,
	CONSTRAINT mdl_tooldatactxl_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_tool_dataprivacy_ctxlevel IS 'Default comment for the table, please edit me'
	;
	CREATE UNIQUE INDEX mdl_tooldatactxl_con_uix ON mdl_tool_dataprivacy_ctxlevel (contextlevel)
	;
	CREATE INDEX mdl_tooldatactxl_cat_ix ON mdl_tool_dataprivacy_ctxlevel (categoryid)
	;
	CREATE INDEX mdl_tooldatactxl_pur_ix ON mdl_tool_dataprivacy_ctxlevel (purposeid)
	;
	CREATE TABLE mdl_tool_dataprivacy_ctxexpired (
	    id BIGSERIAL,
	    contextid BIGINT NOT NULL,
	    unexpiredroles TEXT,
	    expiredroles TEXT,
	    defaultexpired SMALLINT NOT NULL,
	    status SMALLINT NOT NULL DEFAULT 0,
	    usermodified BIGINT NOT NULL,
	    timecreated BIGINT NOT NULL,
	    timemodified BIGINT NOT NULL,
	CONSTRAINT mdl_tooldatactxe_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_tool_dataprivacy_ctxexpired IS 'Default comment for the table, please edit me'
	;
	CREATE UNIQUE INDEX mdl_tooldatactxe_con_uix ON mdl_tool_dataprivacy_ctxexpired (contextid)
	;
	CREATE TABLE mdl_tool_dataprivacy_contextlist (
	    id BIGSERIAL,
	    component VARCHAR(255) NOT NULL DEFAULT '',
	    timecreated BIGINT NOT NULL DEFAULT 0,
	    timemodified BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_tooldatacont_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_tool_dataprivacy_contextlist IS 'List of contexts for a component'
	;
	CREATE TABLE mdl_tool_dataprivacy_ctxlst_ctx (
	    id BIGSERIAL,
	    contextid BIGINT NOT NULL,
	    contextlistid BIGINT NOT NULL,
	    status SMALLINT NOT NULL DEFAULT 0,
	    timecreated BIGINT NOT NULL DEFAULT 0,
	    timemodified BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_tooldatactxlctx_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_tool_dataprivacy_ctxlst_ctx IS 'A contextlist context item'
	;
	CREATE INDEX mdl_tooldatactxlctx_con_ix ON mdl_tool_dataprivacy_ctxlst_ctx (contextlistid)
	;
	CREATE TABLE mdl_tool_dataprivacy_rqst_ctxlst (
	    id BIGSERIAL,
	    requestid BIGINT NOT NULL,
	    contextlistid BIGINT NOT NULL,
	CONSTRAINT mdl_tooldatarqstctxl_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_tool_dataprivacy_rqst_ctxlst IS 'Association table joining requests and contextlists'
	;
	CREATE INDEX mdl_tooldatarqstctxl_req_ix ON mdl_tool_dataprivacy_rqst_ctxlst (requestid)
	;
	CREATE INDEX mdl_tooldatarqstctxl_con_ix ON mdl_tool_dataprivacy_rqst_ctxlst (contextlistid)
	;
	CREATE UNIQUE INDEX mdl_tooldatarqstctxl_reqco_uix ON mdl_tool_dataprivacy_rqst_ctxlst (requestid, contextlistid)
	;
	CREATE TABLE mdl_tool_dataprivacy_purposerole (
	    id BIGSERIAL,
	    purposeid BIGINT NOT NULL,
	    roleid BIGINT NOT NULL,
	    lawfulbases TEXT,
	    sensitivedatareasons TEXT,
	    retentionperiod VARCHAR(255) NOT NULL DEFAULT '',
	    protected SMALLINT,
	    usermodified BIGINT NOT NULL,
	    timecreated BIGINT NOT NULL,
	    timemodified BIGINT NOT NULL,
	CONSTRAINT mdl_tooldatapurp_id3_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_tool_dataprivacy_purposerole IS 'Data purpose overrides for a specific role'
	;
	CREATE UNIQUE INDEX mdl_tooldatapurp_purrol_uix ON mdl_tool_dataprivacy_purposerole (purposeid, roleid)
	;
	CREATE INDEX mdl_tooldatapurp_pur_ix ON mdl_tool_dataprivacy_purposerole (purposeid)
	;
	CREATE INDEX mdl_tooldatapurp_rol_ix ON mdl_tool_dataprivacy_purposerole (roleid)
	; COMMIT
LOG:  DDL LOCK TRACE: acquiring in mode <write_lock> (upgrading from <ddl_lock>) for (bdr (6678401888864649257,1,16384,)) [tracelevel=statement]
STATEMENT:  BEGIN ISOLATION LEVEL SERIALIZABLE;
	CREATE TABLE mdl_tool_dataprivacy_request (
	    id BIGSERIAL,
	    type BIGINT NOT NULL DEFAULT 0,
	    comments TEXT,
	    commentsformat SMALLINT NOT NULL DEFAULT 0,
	    userid BIGINT NOT NULL DEFAULT 0,
	    requestedby BIGINT NOT NULL DEFAULT 0,
	    status SMALLINT NOT NULL DEFAULT 0,
	    dpo BIGINT DEFAULT 0,
	    dpocomment TEXT,
	    dpocommentformat SMALLINT NOT NULL DEFAULT 0,
	    usermodified BIGINT NOT NULL DEFAULT 0,
	    timecreated BIGINT NOT NULL DEFAULT 0,
	    timemodified BIGINT NOT NULL DEFAULT 0,
	    creationmethod BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_tooldatarequ_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_tool_dataprivacy_request IS 'Table for data requests'
	;
	CREATE INDEX mdl_tooldatarequ_use_ix ON mdl_tool_dataprivacy_request (userid)
	;
	CREATE INDEX mdl_tooldatarequ_req_ix ON mdl_tool_dataprivacy_request (requestedby)
	;
	CREATE INDEX mdl_tooldatarequ_dpo_ix ON mdl_tool_dataprivacy_request (dpo)
	;
	CREATE INDEX mdl_tooldatarequ_use2_ix ON mdl_tool_dataprivacy_request (usermodified)
	;
	CREATE TABLE mdl_tool_dataprivacy_purpose (
	    id BIGSERIAL,
	    name VARCHAR(100) NOT NULL DEFAULT '',
	    description TEXT,
	    descriptionformat SMALLINT,
	    lawfulbases TEXT NOT NULL,
	    sensitivedatareasons TEXT,
	    retentionperiod VARCHAR(255) NOT NULL DEFAULT '',
	    protected SMALLINT,
	    usermodified BIGINT NOT NULL,
	    timecreated BIGINT NOT NULL,
	    timemodified BIGINT NOT NULL,
	CONSTRAINT mdl_tooldatapurp_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_tool_dataprivacy_purpose IS 'Data purposes'
	;
	CREATE TABLE mdl_tool_dataprivacy_category (
	    id BIGSERIAL,
	    name VARCHAR(100) NOT NULL DEFAULT '',
	    description TEXT,
	    descriptionformat SMALLINT,
	    usermodified BIGINT NOT NULL,
	    timecreated BIGINT NOT NULL,
	    timemodified BIGINT NOT NULL,
	CONSTRAINT mdl_tooldatacate_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_tool_dataprivacy_category IS 'Data categories'
	;
	CREATE TABLE mdl_tool_dataprivacy_ctxinstance (
	    id BIGSERIAL,
	    contextid BIGINT NOT NULL,
	    purposeid BIGINT,
	    categoryid BIGINT,
	    usermodified BIGINT NOT NULL,
	    timecreated BIGINT NOT NULL,
	    timemodified BIGINT NOT NULL,
	CONSTRAINT mdl_tooldatactxi_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_tool_dataprivacy_ctxinstance IS 'Default comment for the table, please edit me'
	;
	CREATE UNIQUE INDEX mdl_tooldatactxi_con_uix ON mdl_tool_dataprivacy_ctxinstance (contextid)
	;
	CREATE INDEX mdl_tooldatactxi_pur_ix ON mdl_tool_dataprivacy_ctxinstance (purposeid)
	;
	CREATE INDEX mdl_tooldatactxi_cat_ix ON mdl_tool_dataprivacy_ctxinstance (categoryid)
	;
	CREATE TABLE mdl_tool_dataprivacy_ctxlevel (
	    id BIGSERIAL,
	    contextlevel SMALLINT NOT NULL,
	    purposeid BIGINT,
	    categoryid BIGINT,
	    usermodified BIGINT NOT NULL,
	    timecreated BIGINT NOT NULL,
	    timemodified BIGINT NOT NULL,
	CONSTRAINT mdl_tooldatactxl_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_tool_dataprivacy_ctxlevel IS 'Default comment for the table, please edit me'
	;
	CREATE UNIQUE INDEX mdl_tooldatactxl_con_uix ON mdl_tool_dataprivacy_ctxlevel (contextlevel)
	;
	CREATE INDEX mdl_tooldatactxl_cat_ix ON mdl_tool_dataprivacy_ctxlevel (categoryid)
	;
	CREATE INDEX mdl_tooldatactxl_pur_ix ON mdl_tool_dataprivacy_ctxlevel (purposeid)
	;
	CREATE TABLE mdl_tool_dataprivacy_ctxexpired (
	    id BIGSERIAL,
	    contextid BIGINT NOT NULL,
	    unexpiredroles TEXT,
	    expiredroles TEXT,
	    defaultexpired SMALLINT NOT NULL,
	    status SMALLINT NOT NULL DEFAULT 0,
	    usermodified BIGINT NOT NULL,
	    timecreated BIGINT NOT NULL,
	    timemodified BIGINT NOT NULL,
	CONSTRAINT mdl_tooldatactxe_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_tool_dataprivacy_ctxexpired IS 'Default comment for the table, please edit me'
	;
	CREATE UNIQUE INDEX mdl_tooldatactxe_con_uix ON mdl_tool_dataprivacy_ctxexpired (contextid)
	;
	CREATE TABLE mdl_tool_dataprivacy_contextlist (
	    id BIGSERIAL,
	    component VARCHAR(255) NOT NULL DEFAULT '',
	    timecreated BIGINT NOT NULL DEFAULT 0,
	    timemodified BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_tooldatacont_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_tool_dataprivacy_contextlist IS 'List of contexts for a component'
	;
	CREATE TABLE mdl_tool_dataprivacy_ctxlst_ctx (
	    id BIGSERIAL,
	    contextid BIGINT NOT NULL,
	    contextlistid BIGINT NOT NULL,
	    status SMALLINT NOT NULL DEFAULT 0,
	    timecreated BIGINT NOT NULL DEFAULT 0,
	    timemodified BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_tooldatactxlctx_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_tool_dataprivacy_ctxlst_ctx IS 'A contextlist context item'
	;
	CREATE INDEX mdl_tooldatactxlctx_con_ix ON mdl_tool_dataprivacy_ctxlst_ctx (contextlistid)
	;
	CREATE TABLE mdl_tool_dataprivacy_rqst_ctxlst (
	    id BIGSERIAL,
	    requestid BIGINT NOT NULL,
	    contextlistid BIGINT NOT NULL,
	CONSTRAINT mdl_tooldatarqstctxl_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_tool_dataprivacy_rqst_ctxlst IS 'Association table joining requests and contextlists'
	;
	CREATE INDEX mdl_tooldatarqstctxl_req_ix ON mdl_tool_dataprivacy_rqst_ctxlst (requestid)
	;
	CREATE INDEX mdl_tooldatarqstctxl_con_ix ON mdl_tool_dataprivacy_rqst_ctxlst (contextlistid)
	;
	CREATE UNIQUE INDEX mdl_tooldatarqstctxl_reqco_uix ON mdl_tool_dataprivacy_rqst_ctxlst (requestid, contextlistid)
	;
	CREATE TABLE mdl_tool_dataprivacy_purposerole (
	    id BIGSERIAL,
	    purposeid BIGINT NOT NULL,
	    roleid BIGINT NOT NULL,
	    lawfulbases TEXT,
	    sensitivedatareasons TEXT,
	    retentionperiod VARCHAR(255) NOT NULL DEFAULT '',
	    protected SMALLINT,
	    usermodified BIGINT NOT NULL,
	    timecreated BIGINT NOT NULL,
	    timemodified BIGINT NOT NULL,
	CONSTRAINT mdl_tooldatapurp_id3_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_tool_dataprivacy_purposerole IS 'Data purpose overrides for a specific role'
	;
	CREATE UNIQUE INDEX mdl_tooldatapurp_purrol_uix ON mdl_tool_dataprivacy_purposerole (purposeid, roleid)
	;
	CREATE INDEX mdl_tooldatapurp_pur_ix ON mdl_tool_dataprivacy_purposerole (purposeid)
	;
	CREATE INDEX mdl_tooldatapurp_rol_ix ON mdl_tool_dataprivacy_purposerole (roleid)
	; COMMIT
LOG:  DDL LOCK TRACE: acquiring in mode <ddl_lock> for (bdr (6678401888864649257,1,16384,)) [tracelevel=statement]
STATEMENT:  BEGIN ISOLATION LEVEL SERIALIZABLE;
	CREATE TABLE mdl_tool_monitor_rules (
	    id BIGSERIAL,
	    description TEXT,
	    descriptionformat SMALLINT NOT NULL,
	    name VARCHAR(254) NOT NULL DEFAULT '',
	    userid BIGINT NOT NULL,
	    courseid BIGINT NOT NULL,
	    plugin VARCHAR(254) NOT NULL DEFAULT '',
	    eventname VARCHAR(254) NOT NULL DEFAULT '',
	    template TEXT NOT NULL,
	    templateformat SMALLINT NOT NULL,
	    frequency SMALLINT NOT NULL,
	    timewindow INTEGER NOT NULL,
	    timemodified BIGINT NOT NULL,
	    timecreated BIGINT NOT NULL,
	CONSTRAINT mdl_toolmonirule_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_tool_monitor_rules IS 'Table to store rules'
	;
	CREATE INDEX mdl_toolmonirule_couuse_ix ON mdl_tool_monitor_rules (courseid, userid)
	;
	CREATE INDEX mdl_toolmonirule_eve_ix ON mdl_tool_monitor_rules (eventname)
	;
	CREATE TABLE mdl_tool_monitor_subscriptions (
	    id BIGSERIAL,
	    courseid BIGINT NOT NULL,
	    ruleid BIGINT NOT NULL,
	    cmid BIGINT NOT NULL,
	    userid BIGINT NOT NULL,
	    timecreated BIGINT NOT NULL,
	    lastnotificationsent BIGINT NOT NULL DEFAULT 0,
	    inactivedate BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_toolmonisubs_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_tool_monitor_subscriptions IS 'Table to store user subscriptions to various rules'
	;
	CREATE INDEX mdl_toolmonisubs_couuse_ix ON mdl_tool_monitor_subscriptions (courseid, userid)
	;
	CREATE INDEX mdl_toolmonisubs_rul_ix ON mdl_tool_monitor_subscriptions (ruleid)
	;
	CREATE TABLE mdl_tool_monitor_history (
	    id BIGSERIAL,
	    sid BIGINT NOT NULL,
	    userid BIGINT NOT NULL,
	    timesent BIGINT NOT NULL,
	CONSTRAINT mdl_toolmonihist_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_tool_monitor_history IS 'Table to store history of message notifications sent'
	;
	CREATE UNIQUE INDEX mdl_toolmonihist_sidusetim_uix ON mdl_tool_monitor_history (sid, userid, timesent)
	;
	CREATE INDEX mdl_toolmonihist_sid_ix ON mdl_tool_monitor_history (sid)
	;
	CREATE TABLE mdl_tool_monitor_events (
	    id BIGSERIAL,
	    eventname VARCHAR(254) NOT NULL DEFAULT '',
	    contextid BIGINT NOT NULL,
	    contextlevel BIGINT NOT NULL,
	    contextinstanceid BIGINT NOT NULL,
	    link VARCHAR(254) NOT NULL DEFAULT '',
	    courseid BIGINT NOT NULL,
	    timecreated BIGINT NOT NULL,
	CONSTRAINT mdl_toolmonieven_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_tool_monitor_events IS 'A table that keeps a log of events related to subscriptions'
	; COMMIT
LOG:  DDL LOCK TRACE: acquiring in mode <write_lock> (upgrading from <ddl_lock>) for (bdr (6678401888864649257,1,16384,)) [tracelevel=statement]
STATEMENT:  BEGIN ISOLATION LEVEL SERIALIZABLE;
	CREATE TABLE mdl_tool_monitor_rules (
	    id BIGSERIAL,
	    description TEXT,
	    descriptionformat SMALLINT NOT NULL,
	    name VARCHAR(254) NOT NULL DEFAULT '',
	    userid BIGINT NOT NULL,
	    courseid BIGINT NOT NULL,
	    plugin VARCHAR(254) NOT NULL DEFAULT '',
	    eventname VARCHAR(254) NOT NULL DEFAULT '',
	    template TEXT NOT NULL,
	    templateformat SMALLINT NOT NULL,
	    frequency SMALLINT NOT NULL,
	    timewindow INTEGER NOT NULL,
	    timemodified BIGINT NOT NULL,
	    timecreated BIGINT NOT NULL,
	CONSTRAINT mdl_toolmonirule_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_tool_monitor_rules IS 'Table to store rules'
	;
	CREATE INDEX mdl_toolmonirule_couuse_ix ON mdl_tool_monitor_rules (courseid, userid)
	;
	CREATE INDEX mdl_toolmonirule_eve_ix ON mdl_tool_monitor_rules (eventname)
	;
	CREATE TABLE mdl_tool_monitor_subscriptions (
	    id BIGSERIAL,
	    courseid BIGINT NOT NULL,
	    ruleid BIGINT NOT NULL,
	    cmid BIGINT NOT NULL,
	    userid BIGINT NOT NULL,
	    timecreated BIGINT NOT NULL,
	    lastnotificationsent BIGINT NOT NULL DEFAULT 0,
	    inactivedate BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_toolmonisubs_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_tool_monitor_subscriptions IS 'Table to store user subscriptions to various rules'
	;
	CREATE INDEX mdl_toolmonisubs_couuse_ix ON mdl_tool_monitor_subscriptions (courseid, userid)
	;
	CREATE INDEX mdl_toolmonisubs_rul_ix ON mdl_tool_monitor_subscriptions (ruleid)
	;
	CREATE TABLE mdl_tool_monitor_history (
	    id BIGSERIAL,
	    sid BIGINT NOT NULL,
	    userid BIGINT NOT NULL,
	    timesent BIGINT NOT NULL,
	CONSTRAINT mdl_toolmonihist_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_tool_monitor_history IS 'Table to store history of message notifications sent'
	;
	CREATE UNIQUE INDEX mdl_toolmonihist_sidusetim_uix ON mdl_tool_monitor_history (sid, userid, timesent)
	;
	CREATE INDEX mdl_toolmonihist_sid_ix ON mdl_tool_monitor_history (sid)
	;
	CREATE TABLE mdl_tool_monitor_events (
	    id BIGSERIAL,
	    eventname VARCHAR(254) NOT NULL DEFAULT '',
	    contextid BIGINT NOT NULL,
	    contextlevel BIGINT NOT NULL,
	    contextinstanceid BIGINT NOT NULL,
	    link VARCHAR(254) NOT NULL DEFAULT '',
	    courseid BIGINT NOT NULL,
	    timecreated BIGINT NOT NULL,
	CONSTRAINT mdl_toolmonieven_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_tool_monitor_events IS 'A table that keeps a log of events related to subscriptions'
	; COMMIT
LOG:  DDL LOCK TRACE: acquiring in mode <ddl_lock> for (bdr (6678401888864649257,1,16384,)) [tracelevel=statement]
STATEMENT:  BEGIN ISOLATION LEVEL SERIALIZABLE;
	CREATE TABLE mdl_tool_policy (
	    id BIGSERIAL,
	    sortorder INTEGER NOT NULL DEFAULT 999,
	    currentversionid BIGINT,
	CONSTRAINT mdl_toolpoli_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_tool_policy IS 'Contains the list of policy documents defined on the site.'
	;
	CREATE INDEX mdl_toolpoli_cur_ix ON mdl_tool_policy (currentversionid)
	;
	CREATE TABLE mdl_tool_policy_versions (
	    id BIGSERIAL,
	    name VARCHAR(1333) NOT NULL DEFAULT '',
	    type SMALLINT NOT NULL DEFAULT 0,
	    audience SMALLINT NOT NULL DEFAULT 0,
	    archived SMALLINT NOT NULL DEFAULT 0,
	    usermodified BIGINT NOT NULL,
	    timecreated BIGINT NOT NULL,
	    timemodified BIGINT NOT NULL,
	    policyid BIGINT NOT NULL,
	    revision VARCHAR(1333) NOT NULL DEFAULT '',
	    summary TEXT NOT NULL,
	    summaryformat SMALLINT NOT NULL,
	    content TEXT NOT NULL,
	    contentformat SMALLINT NOT NULL,
	CONSTRAINT mdl_toolpolivers_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_tool_policy_versions IS 'Holds versions of the policy documents'
	;
	CREATE INDEX mdl_toolpolivers_use_ix ON mdl_tool_policy_versions (usermodified)
	;
	CREATE INDEX mdl_toolpolivers_pol_ix ON mdl_tool_policy_versions (policyid)
	;
	CREATE TABLE mdl_tool_policy_acceptances (
	    id BIGSERIAL,
	    policyversionid BIGINT NOT NULL,
	    userid BIGINT NOT NULL,
	    status SMALLINT,
	    lang VARCHAR(30) NOT NULL DEFAULT '',
	    usermodified BIGINT NOT NULL,
	    timecreated BIGINT NOT NULL,
	    timemodified BIGINT NOT NULL,
	    note TEXT,
	CONSTRAINT mdl_toolpoliacce_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_tool_policy_acceptances IS 'Tracks users accepting the policy versions'
	;
	CREATE INDEX mdl_toolpoliacce_pol_ix ON mdl_tool_policy_acceptances (policyversionid)
	;
	CREATE INDEX mdl_toolpoliacce_use_ix ON mdl_tool_policy_acceptances (userid)
	;
	CREATE INDEX mdl_toolpoliacce_use2_ix ON mdl_tool_policy_acceptances (usermodified)
	;
	CREATE UNIQUE INDEX mdl_toolpoliacce_poluse_uix ON mdl_tool_policy_acceptances (policyversionid, userid)
	; COMMIT
LOG:  DDL LOCK TRACE: acquiring in mode <write_lock> (upgrading from <ddl_lock>) for (bdr (6678401888864649257,1,16384,)) [tracelevel=statement]
STATEMENT:  BEGIN ISOLATION LEVEL SERIALIZABLE;
	CREATE TABLE mdl_tool_policy (
	    id BIGSERIAL,
	    sortorder INTEGER NOT NULL DEFAULT 999,
	    currentversionid BIGINT,
	CONSTRAINT mdl_toolpoli_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_tool_policy IS 'Contains the list of policy documents defined on the site.'
	;
	CREATE INDEX mdl_toolpoli_cur_ix ON mdl_tool_policy (currentversionid)
	;
	CREATE TABLE mdl_tool_policy_versions (
	    id BIGSERIAL,
	    name VARCHAR(1333) NOT NULL DEFAULT '',
	    type SMALLINT NOT NULL DEFAULT 0,
	    audience SMALLINT NOT NULL DEFAULT 0,
	    archived SMALLINT NOT NULL DEFAULT 0,
	    usermodified BIGINT NOT NULL,
	    timecreated BIGINT NOT NULL,
	    timemodified BIGINT NOT NULL,
	    policyid BIGINT NOT NULL,
	    revision VARCHAR(1333) NOT NULL DEFAULT '',
	    summary TEXT NOT NULL,
	    summaryformat SMALLINT NOT NULL,
	    content TEXT NOT NULL,
	    contentformat SMALLINT NOT NULL,
	CONSTRAINT mdl_toolpolivers_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_tool_policy_versions IS 'Holds versions of the policy documents'
	;
	CREATE INDEX mdl_toolpolivers_use_ix ON mdl_tool_policy_versions (usermodified)
	;
	CREATE INDEX mdl_toolpolivers_pol_ix ON mdl_tool_policy_versions (policyid)
	;
	CREATE TABLE mdl_tool_policy_acceptances (
	    id BIGSERIAL,
	    policyversionid BIGINT NOT NULL,
	    userid BIGINT NOT NULL,
	    status SMALLINT,
	    lang VARCHAR(30) NOT NULL DEFAULT '',
	    usermodified BIGINT NOT NULL,
	    timecreated BIGINT NOT NULL,
	    timemodified BIGINT NOT NULL,
	    note TEXT,
	CONSTRAINT mdl_toolpoliacce_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_tool_policy_acceptances IS 'Tracks users accepting the policy versions'
	;
	CREATE INDEX mdl_toolpoliacce_pol_ix ON mdl_tool_policy_acceptances (policyversionid)
	;
	CREATE INDEX mdl_toolpoliacce_use_ix ON mdl_tool_policy_acceptances (userid)
	;
	CREATE INDEX mdl_toolpoliacce_use2_ix ON mdl_tool_policy_acceptances (usermodified)
	;
	CREATE UNIQUE INDEX mdl_toolpoliacce_poluse_uix ON mdl_tool_policy_acceptances (policyversionid, userid)
	; COMMIT
LOG:  DDL LOCK TRACE: acquiring in mode <ddl_lock> for (bdr (6678401888864649257,1,16384,)) [tracelevel=statement]
STATEMENT:  BEGIN ISOLATION LEVEL SERIALIZABLE;
	CREATE TABLE mdl_tool_recyclebin_course (
	    id BIGSERIAL,
	    courseid BIGINT NOT NULL,
	    section BIGINT NOT NULL,
	    module BIGINT NOT NULL,
	    name VARCHAR(255),
	    timecreated BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_toolrecycour_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_tool_recyclebin_course IS 'A list of items in the course recycle bin'
	;
	CREATE INDEX mdl_toolrecycour_tim_ix ON mdl_tool_recyclebin_course (timecreated)
	;
	CREATE INDEX mdl_toolrecycour_cou_ix ON mdl_tool_recyclebin_course (courseid)
	;
	CREATE TABLE mdl_tool_recyclebin_category (
	    id BIGSERIAL,
	    categoryid BIGINT NOT NULL,
	    shortname VARCHAR(255) NOT NULL DEFAULT '',
	    fullname VARCHAR(255) NOT NULL DEFAULT '',
	    timecreated BIGINT NOT NULL,
	CONSTRAINT mdl_toolrecycate_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_tool_recyclebin_category IS 'A list of items in the category recycle bin'
	;
	CREATE INDEX mdl_toolrecycate_tim_ix ON mdl_tool_recyclebin_category (timecreated)
	;
	CREATE INDEX mdl_toolrecycate_cat_ix ON mdl_tool_recyclebin_category (categoryid)
	; COMMIT
LOG:  DDL LOCK TRACE: acquiring in mode <write_lock> (upgrading from <ddl_lock>) for (bdr (6678401888864649257,1,16384,)) [tracelevel=statement]
STATEMENT:  BEGIN ISOLATION LEVEL SERIALIZABLE;
	CREATE TABLE mdl_tool_recyclebin_course (
	    id BIGSERIAL,
	    courseid BIGINT NOT NULL,
	    section BIGINT NOT NULL,
	    module BIGINT NOT NULL,
	    name VARCHAR(255),
	    timecreated BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_toolrecycour_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_tool_recyclebin_course IS 'A list of items in the course recycle bin'
	;
	CREATE INDEX mdl_toolrecycour_tim_ix ON mdl_tool_recyclebin_course (timecreated)
	;
	CREATE INDEX mdl_toolrecycour_cou_ix ON mdl_tool_recyclebin_course (courseid)
	;
	CREATE TABLE mdl_tool_recyclebin_category (
	    id BIGSERIAL,
	    categoryid BIGINT NOT NULL,
	    shortname VARCHAR(255) NOT NULL DEFAULT '',
	    fullname VARCHAR(255) NOT NULL DEFAULT '',
	    timecreated BIGINT NOT NULL,
	CONSTRAINT mdl_toolrecycate_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_tool_recyclebin_category IS 'A list of items in the category recycle bin'
	;
	CREATE INDEX mdl_toolrecycate_tim_ix ON mdl_tool_recyclebin_category (timecreated)
	;
	CREATE INDEX mdl_toolrecycate_cat_ix ON mdl_tool_recyclebin_category (categoryid)
	; COMMIT
LOG:  DDL LOCK TRACE: acquiring in mode <ddl_lock> for (bdr (6678401888864649257,1,16384,)) [tracelevel=statement]
STATEMENT:  BEGIN ISOLATION LEVEL SERIALIZABLE;
	CREATE TABLE mdl_tool_usertours_tours (
	    id BIGSERIAL,
	    name VARCHAR(255) NOT NULL DEFAULT '',
	    description TEXT,
	    pathmatch VARCHAR(255),
	    enabled SMALLINT NOT NULL DEFAULT 0,
	    sortorder BIGINT NOT NULL DEFAULT 0,
	    configdata TEXT NOT NULL,
	CONSTRAINT mdl_toolusertour_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_tool_usertours_tours IS 'List of tours'
	;
	CREATE TABLE mdl_tool_usertours_steps (
	    id BIGSERIAL,
	    tourid BIGINT NOT NULL,
	    title TEXT,
	    content TEXT,
	    targettype SMALLINT NOT NULL,
	    targetvalue TEXT NOT NULL,
	    sortorder BIGINT NOT NULL DEFAULT 0,
	    configdata TEXT NOT NULL,
	CONSTRAINT mdl_tooluserstep_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_tool_usertours_steps IS 'Steps in an tour'
	;
	CREATE INDEX mdl_tooluserstep_tousor_ix ON mdl_tool_usertours_steps (tourid, sortorder)
	;
	CREATE INDEX mdl_tooluserstep_tou_ix ON mdl_tool_usertours_steps (tourid)
	; COMMIT
LOG:  DDL LOCK TRACE: acquiring in mode <write_lock> (upgrading from <ddl_lock>) for (bdr (6678401888864649257,1,16384,)) [tracelevel=statement]
STATEMENT:  BEGIN ISOLATION LEVEL SERIALIZABLE;
	CREATE TABLE mdl_tool_usertours_tours (
	    id BIGSERIAL,
	    name VARCHAR(255) NOT NULL DEFAULT '',
	    description TEXT,
	    pathmatch VARCHAR(255),
	    enabled SMALLINT NOT NULL DEFAULT 0,
	    sortorder BIGINT NOT NULL DEFAULT 0,
	    configdata TEXT NOT NULL,
	CONSTRAINT mdl_toolusertour_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_tool_usertours_tours IS 'List of tours'
	;
	CREATE TABLE mdl_tool_usertours_steps (
	    id BIGSERIAL,
	    tourid BIGINT NOT NULL,
	    title TEXT,
	    content TEXT,
	    targettype SMALLINT NOT NULL,
	    targetvalue TEXT NOT NULL,
	    sortorder BIGINT NOT NULL DEFAULT 0,
	    configdata TEXT NOT NULL,
	CONSTRAINT mdl_tooluserstep_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_tool_usertours_steps IS 'Steps in an tour'
	;
	CREATE INDEX mdl_tooluserstep_tousor_ix ON mdl_tool_usertours_steps (tourid, sortorder)
	;
	CREATE INDEX mdl_tooluserstep_tou_ix ON mdl_tool_usertours_steps (tourid)
	; COMMIT
LOG:  DDL LOCK TRACE: acquiring in mode <ddl_lock> for (bdr (6678401888864649257,1,16384,)) [tracelevel=statement]
STATEMENT:  BEGIN ISOLATION LEVEL SERIALIZABLE;
	CREATE TABLE mdl_assignsubmission_file (
	    id BIGSERIAL,
	    assignment BIGINT NOT NULL DEFAULT 0,
	    submission BIGINT NOT NULL DEFAULT 0,
	    numfiles BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_assifile_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_assignsubmission_file IS 'Info about file submissions for assignments'
	;
	CREATE INDEX mdl_assifile_ass_ix ON mdl_assignsubmission_file (assignment)
	;
	CREATE INDEX mdl_assifile_sub_ix ON mdl_assignsubmission_file (submission)
	; COMMIT
LOG:  DDL LOCK TRACE: acquiring in mode <write_lock> (upgrading from <ddl_lock>) for (bdr (6678401888864649257,1,16384,)) [tracelevel=statement]
STATEMENT:  BEGIN ISOLATION LEVEL SERIALIZABLE;
	CREATE TABLE mdl_assignsubmission_file (
	    id BIGSERIAL,
	    assignment BIGINT NOT NULL DEFAULT 0,
	    submission BIGINT NOT NULL DEFAULT 0,
	    numfiles BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_assifile_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_assignsubmission_file IS 'Info about file submissions for assignments'
	;
	CREATE INDEX mdl_assifile_ass_ix ON mdl_assignsubmission_file (assignment)
	;
	CREATE INDEX mdl_assifile_sub_ix ON mdl_assignsubmission_file (submission)
	; COMMIT
LOG:  DDL LOCK TRACE: acquiring in mode <ddl_lock> for (bdr (6678401888864649257,1,16384,)) [tracelevel=statement]
STATEMENT:  BEGIN ISOLATION LEVEL SERIALIZABLE;
	CREATE TABLE mdl_assignsubmission_onlinetext (
	    id BIGSERIAL,
	    assignment BIGINT NOT NULL DEFAULT 0,
	    submission BIGINT NOT NULL DEFAULT 0,
	    onlinetext TEXT,
	    onlineformat SMALLINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_assionli_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_assignsubmission_onlinetext IS 'Info about onlinetext submission'
	;
	CREATE INDEX mdl_assionli_ass_ix ON mdl_assignsubmission_onlinetext (assignment)
	;
	CREATE INDEX mdl_assionli_sub_ix ON mdl_assignsubmission_onlinetext (submission)
	; COMMIT
LOG:  DDL LOCK TRACE: acquiring in mode <write_lock> (upgrading from <ddl_lock>) for (bdr (6678401888864649257,1,16384,)) [tracelevel=statement]
STATEMENT:  BEGIN ISOLATION LEVEL SERIALIZABLE;
	CREATE TABLE mdl_assignsubmission_onlinetext (
	    id BIGSERIAL,
	    assignment BIGINT NOT NULL DEFAULT 0,
	    submission BIGINT NOT NULL DEFAULT 0,
	    onlinetext TEXT,
	    onlineformat SMALLINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_assionli_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_assignsubmission_onlinetext IS 'Info about onlinetext submission'
	;
	CREATE INDEX mdl_assionli_ass_ix ON mdl_assignsubmission_onlinetext (assignment)
	;
	CREATE INDEX mdl_assionli_sub_ix ON mdl_assignsubmission_onlinetext (submission)
	; COMMIT
LOG:  DDL LOCK TRACE: acquiring in mode <ddl_lock> for (bdr (6678401888864649257,1,16384,)) [tracelevel=statement]
STATEMENT:  BEGIN ISOLATION LEVEL SERIALIZABLE;
	CREATE TABLE mdl_assignfeedback_comments (
	    id BIGSERIAL,
	    assignment BIGINT NOT NULL DEFAULT 0,
	    grade BIGINT NOT NULL DEFAULT 0,
	    commenttext TEXT,
	    commentformat SMALLINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_assicomm_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_assignfeedback_comments IS 'Text feedback for submitted assignments'
	;
	CREATE INDEX mdl_assicomm_ass_ix ON mdl_assignfeedback_comments (assignment)
	;
	CREATE INDEX mdl_assicomm_gra_ix ON mdl_assignfeedback_comments (grade)
	; COMMIT
LOG:  DDL LOCK TRACE: acquiring in mode <write_lock> (upgrading from <ddl_lock>) for (bdr (6678401888864649257,1,16384,)) [tracelevel=statement]
STATEMENT:  BEGIN ISOLATION LEVEL SERIALIZABLE;
	CREATE TABLE mdl_assignfeedback_comments (
	    id BIGSERIAL,
	    assignment BIGINT NOT NULL DEFAULT 0,
	    grade BIGINT NOT NULL DEFAULT 0,
	    commenttext TEXT,
	    commentformat SMALLINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_assicomm_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_assignfeedback_comments IS 'Text feedback for submitted assignments'
	;
	CREATE INDEX mdl_assicomm_ass_ix ON mdl_assignfeedback_comments (assignment)
	;
	CREATE INDEX mdl_assicomm_gra_ix ON mdl_assignfeedback_comments (grade)
	; COMMIT
LOG:  DDL LOCK TRACE: acquiring in mode <ddl_lock> for (bdr (6678401888864649257,1,16384,)) [tracelevel=statement]
STATEMENT:  BEGIN ISOLATION LEVEL SERIALIZABLE;
	CREATE TABLE mdl_assignfeedback_editpdf_cmnt (
	    id BIGSERIAL,
	    gradeid BIGINT NOT NULL DEFAULT 0,
	    x BIGINT DEFAULT 0,
	    y BIGINT DEFAULT 0,
	    width BIGINT DEFAULT 120,
	    rawtext TEXT,
	    pageno BIGINT NOT NULL DEFAULT 0,
	    colour VARCHAR(10) DEFAULT 'black',
	    draft SMALLINT NOT NULL DEFAULT 1,
	CONSTRAINT mdl_assieditcmnt_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_assignfeedback_editpdf_cmnt IS 'Stores comments added to pdfs'
	;
	CREATE INDEX mdl_assieditcmnt_grapag_ix ON mdl_assignfeedback_editpdf_cmnt (gradeid, pageno)
	;
	CREATE INDEX mdl_assieditcmnt_gra_ix ON mdl_assignfeedback_editpdf_cmnt (gradeid)
	;
	CREATE TABLE mdl_assignfeedback_editpdf_annot (
	    id BIGSERIAL,
	    gradeid BIGINT NOT NULL DEFAULT 0,
	    pageno BIGINT NOT NULL DEFAULT 0,
	    x BIGINT DEFAULT 0,
	    y BIGINT DEFAULT 0,
	    endx BIGINT DEFAULT 0,
	    endy BIGINT DEFAULT 0,
	    path TEXT,
	    type VARCHAR(10) DEFAULT 'line',
	    colour VARCHAR(10) DEFAULT 'black',
	    draft SMALLINT NOT NULL DEFAULT 1,
	CONSTRAINT mdl_assieditanno_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_assignfeedback_editpdf_annot IS 'stores annotations added to pdfs submitted by students'
	;
	CREATE INDEX mdl_assieditanno_grapag_ix ON mdl_assignfeedback_editpdf_annot (gradeid, pageno)
	;
	CREATE INDEX mdl_assieditanno_gra_ix ON mdl_assignfeedback_editpdf_annot (gradeid)
	;
	CREATE TABLE mdl_assignfeedback_editpdf_quick (
	    id BIGSERIAL,
	    userid BIGINT NOT NULL DEFAULT 0,
	    rawtext TEXT NOT NULL,
	    width BIGINT NOT NULL DEFAULT 120,
	    colour VARCHAR(10) DEFAULT 'yellow',
	CONSTRAINT mdl_assieditquic_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_assignfeedback_editpdf_quick IS 'Stores teacher specified quicklist comments'
	;
	CREATE INDEX mdl_assieditquic_use_ix ON mdl_assignfeedback_editpdf_quick (userid)
	;
	CREATE TABLE mdl_assignfeedback_editpdf_queue (
	    id BIGSERIAL,
	    submissionid BIGINT NOT NULL,
	    submissionattempt BIGINT NOT NULL,
	    attemptedconversions BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_assieditqueu_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_assignfeedback_editpdf_queue IS 'Queue for processing.'
	;
	CREATE UNIQUE INDEX mdl_assieditqueu_subsub_uix ON mdl_assignfeedback_editpdf_queue (submissionid, submissionattempt)
	; COMMIT
LOG:  DDL LOCK TRACE: acquiring in mode <write_lock> (upgrading from <ddl_lock>) for (bdr (6678401888864649257,1,16384,)) [tracelevel=statement]
STATEMENT:  BEGIN ISOLATION LEVEL SERIALIZABLE;
	CREATE TABLE mdl_assignfeedback_editpdf_cmnt (
	    id BIGSERIAL,
	    gradeid BIGINT NOT NULL DEFAULT 0,
	    x BIGINT DEFAULT 0,
	    y BIGINT DEFAULT 0,
	    width BIGINT DEFAULT 120,
	    rawtext TEXT,
	    pageno BIGINT NOT NULL DEFAULT 0,
	    colour VARCHAR(10) DEFAULT 'black',
	    draft SMALLINT NOT NULL DEFAULT 1,
	CONSTRAINT mdl_assieditcmnt_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_assignfeedback_editpdf_cmnt IS 'Stores comments added to pdfs'
	;
	CREATE INDEX mdl_assieditcmnt_grapag_ix ON mdl_assignfeedback_editpdf_cmnt (gradeid, pageno)
	;
	CREATE INDEX mdl_assieditcmnt_gra_ix ON mdl_assignfeedback_editpdf_cmnt (gradeid)
	;
	CREATE TABLE mdl_assignfeedback_editpdf_annot (
	    id BIGSERIAL,
	    gradeid BIGINT NOT NULL DEFAULT 0,
	    pageno BIGINT NOT NULL DEFAULT 0,
	    x BIGINT DEFAULT 0,
	    y BIGINT DEFAULT 0,
	    endx BIGINT DEFAULT 0,
	    endy BIGINT DEFAULT 0,
	    path TEXT,
	    type VARCHAR(10) DEFAULT 'line',
	    colour VARCHAR(10) DEFAULT 'black',
	    draft SMALLINT NOT NULL DEFAULT 1,
	CONSTRAINT mdl_assieditanno_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_assignfeedback_editpdf_annot IS 'stores annotations added to pdfs submitted by students'
	;
	CREATE INDEX mdl_assieditanno_grapag_ix ON mdl_assignfeedback_editpdf_annot (gradeid, pageno)
	;
	CREATE INDEX mdl_assieditanno_gra_ix ON mdl_assignfeedback_editpdf_annot (gradeid)
	;
	CREATE TABLE mdl_assignfeedback_editpdf_quick (
	    id BIGSERIAL,
	    userid BIGINT NOT NULL DEFAULT 0,
	    rawtext TEXT NOT NULL,
	    width BIGINT NOT NULL DEFAULT 120,
	    colour VARCHAR(10) DEFAULT 'yellow',
	CONSTRAINT mdl_assieditquic_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_assignfeedback_editpdf_quick IS 'Stores teacher specified quicklist comments'
	;
	CREATE INDEX mdl_assieditquic_use_ix ON mdl_assignfeedback_editpdf_quick (userid)
	;
	CREATE TABLE mdl_assignfeedback_editpdf_queue (
	    id BIGSERIAL,
	    submissionid BIGINT NOT NULL,
	    submissionattempt BIGINT NOT NULL,
	    attemptedconversions BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_assieditqueu_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_assignfeedback_editpdf_queue IS 'Queue for processing.'
	;
	CREATE UNIQUE INDEX mdl_assieditqueu_subsub_uix ON mdl_assignfeedback_editpdf_queue (submissionid, submissionattempt)
	; COMMIT
LOG:  DDL LOCK TRACE: acquiring in mode <ddl_lock> for (bdr (6678401888864649257,1,16384,)) [tracelevel=statement]
STATEMENT:  BEGIN ISOLATION LEVEL SERIALIZABLE;
	CREATE TABLE mdl_assignfeedback_file (
	    id BIGSERIAL,
	    assignment BIGINT NOT NULL DEFAULT 0,
	    grade BIGINT NOT NULL DEFAULT 0,
	    numfiles BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_assifile_id3_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_assignfeedback_file IS 'Stores info about the number of files submitted by a student.'
	;
	CREATE INDEX mdl_assifile_ass2_ix ON mdl_assignfeedback_file (assignment)
	;
	CREATE INDEX mdl_assifile_gra_ix ON mdl_assignfeedback_file (grade)
	; COMMIT
LOG:  DDL LOCK TRACE: acquiring in mode <write_lock> (upgrading from <ddl_lock>) for (bdr (6678401888864649257,1,16384,)) [tracelevel=statement]
STATEMENT:  BEGIN ISOLATION LEVEL SERIALIZABLE;
	CREATE TABLE mdl_assignfeedback_file (
	    id BIGSERIAL,
	    assignment BIGINT NOT NULL DEFAULT 0,
	    grade BIGINT NOT NULL DEFAULT 0,
	    numfiles BIGINT NOT NULL DEFAULT 0,
	CONSTRAINT mdl_assifile_id3_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_assignfeedback_file IS 'Stores info about the number of files submitted by a student.'
	;
	CREATE INDEX mdl_assifile_ass2_ix ON mdl_assignfeedback_file (assignment)
	;
	CREATE INDEX mdl_assifile_gra_ix ON mdl_assignfeedback_file (grade)
	; COMMIT
LOG:  DDL LOCK TRACE: acquiring in mode <ddl_lock> for (bdr (6678401888864649257,1,16384,)) [tracelevel=statement]
STATEMENT:  BEGIN ISOLATION LEVEL SERIALIZABLE;
	CREATE TABLE mdl_ltiservice_gradebookservices (
	    id BIGSERIAL,
	    gradeitemid BIGINT NOT NULL,
	    courseid BIGINT NOT NULL,
	    toolproxyid BIGINT,
	    typeid BIGINT,
	    baseurl TEXT,
	    ltilinkid BIGINT,
	    tag VARCHAR(255),
	CONSTRAINT mdl_ltisgrad_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_ltiservice_gradebookservices IS 'This file records the grade items created by the LTI Gradebook Services service'
	;
	CREATE INDEX mdl_ltisgrad_lti_ix ON mdl_ltiservice_gradebookservices (ltilinkid)
	;
	CREATE INDEX mdl_ltisgrad_gracou_ix ON mdl_ltiservice_gradebookservices (gradeitemid, courseid)
	; COMMIT
LOG:  DDL LOCK TRACE: acquiring in mode <write_lock> (upgrading from <ddl_lock>) for (bdr (6678401888864649257,1,16384,)) [tracelevel=statement]
STATEMENT:  BEGIN ISOLATION LEVEL SERIALIZABLE;
	CREATE TABLE mdl_ltiservice_gradebookservices (
	    id BIGSERIAL,
	    gradeitemid BIGINT NOT NULL,
	    courseid BIGINT NOT NULL,
	    toolproxyid BIGINT,
	    typeid BIGINT,
	    baseurl TEXT,
	    ltilinkid BIGINT,
	    tag VARCHAR(255),
	CONSTRAINT mdl_ltisgrad_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_ltiservice_gradebookservices IS 'This file records the grade items created by the LTI Gradebook Services service'
	;
	CREATE INDEX mdl_ltisgrad_lti_ix ON mdl_ltiservice_gradebookservices (ltilinkid)
	;
	CREATE INDEX mdl_ltisgrad_gracou_ix ON mdl_ltiservice_gradebookservices (gradeitemid, courseid)
	; COMMIT
LOG:  DDL LOCK TRACE: acquiring in mode <ddl_lock> for (bdr (6678401888864649257,1,16384,)) [tracelevel=statement]
STATEMENT:  BEGIN ISOLATION LEVEL SERIALIZABLE;
	CREATE TABLE mdl_quiz_overview_regrades (
	    id BIGSERIAL,
	    questionusageid BIGINT NOT NULL,
	    slot BIGINT NOT NULL,
	    newfraction NUMERIC(12,7),
	    oldfraction NUMERIC(12,7),
	    regraded SMALLINT NOT NULL,
	    timemodified BIGINT NOT NULL,
	CONSTRAINT mdl_quizoverregr_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_quiz_overview_regrades IS 'This table records which question attempts need regrading and the grade they will be regraded to.'
	;
	CREATE INDEX mdl_quizoverregr_queslo_ix ON mdl_quiz_overview_regrades (questionusageid, slot)
	; COMMIT
LOG:  DDL LOCK TRACE: acquiring in mode <write_lock> (upgrading from <ddl_lock>) for (bdr (6678401888864649257,1,16384,)) [tracelevel=statement]
STATEMENT:  BEGIN ISOLATION LEVEL SERIALIZABLE;
	CREATE TABLE mdl_quiz_overview_regrades (
	    id BIGSERIAL,
	    questionusageid BIGINT NOT NULL,
	    slot BIGINT NOT NULL,
	    newfraction NUMERIC(12,7),
	    oldfraction NUMERIC(12,7),
	    regraded SMALLINT NOT NULL,
	    timemodified BIGINT NOT NULL,
	CONSTRAINT mdl_quizoverregr_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_quiz_overview_regrades IS 'This table records which question attempts need regrading and the grade they will be regraded to.'
	;
	CREATE INDEX mdl_quizoverregr_queslo_ix ON mdl_quiz_overview_regrades (questionusageid, slot)
	; COMMIT
LOG:  DDL LOCK TRACE: acquiring in mode <ddl_lock> for (bdr (6678401888864649257,1,16384,)) [tracelevel=statement]
STATEMENT:  BEGIN ISOLATION LEVEL SERIALIZABLE;
	CREATE TABLE mdl_quiz_statistics (
	    id BIGSERIAL,
	    hashcode VARCHAR(40) NOT NULL DEFAULT '',
	    whichattempts SMALLINT NOT NULL,
	    timemodified BIGINT NOT NULL,
	    firstattemptscount BIGINT NOT NULL,
	    highestattemptscount BIGINT NOT NULL,
	    lastattemptscount BIGINT NOT NULL,
	    allattemptscount BIGINT NOT NULL,
	    firstattemptsavg NUMERIC(15,5),
	    highestattemptsavg NUMERIC(15,5),
	    lastattemptsavg NUMERIC(15,5),
	    allattemptsavg NUMERIC(15,5),
	    median NUMERIC(15,5),
	    standarddeviation NUMERIC(15,5),
	    skewness NUMERIC(15,10),
	    kurtosis NUMERIC(15,5),
	    cic NUMERIC(15,10),
	    errorratio NUMERIC(15,10),
	    standarderror NUMERIC(15,10),
	CONSTRAINT mdl_quizstat_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_quiz_statistics IS 'table to cache results from analysis done in statistics report for quizzes.'
	; COMMIT
LOG:  DDL LOCK TRACE: acquiring in mode <write_lock> (upgrading from <ddl_lock>) for (bdr (6678401888864649257,1,16384,)) [tracelevel=statement]
STATEMENT:  BEGIN ISOLATION LEVEL SERIALIZABLE;
	CREATE TABLE mdl_quiz_statistics (
	    id BIGSERIAL,
	    hashcode VARCHAR(40) NOT NULL DEFAULT '',
	    whichattempts SMALLINT NOT NULL,
	    timemodified BIGINT NOT NULL,
	    firstattemptscount BIGINT NOT NULL,
	    highestattemptscount BIGINT NOT NULL,
	    lastattemptscount BIGINT NOT NULL,
	    allattemptscount BIGINT NOT NULL,
	    firstattemptsavg NUMERIC(15,5),
	    highestattemptsavg NUMERIC(15,5),
	    lastattemptsavg NUMERIC(15,5),
	    allattemptsavg NUMERIC(15,5),
	    median NUMERIC(15,5),
	    standarddeviation NUMERIC(15,5),
	    skewness NUMERIC(15,10),
	    kurtosis NUMERIC(15,5),
	    cic NUMERIC(15,10),
	    errorratio NUMERIC(15,10),
	    standarderror NUMERIC(15,10),
	CONSTRAINT mdl_quizstat_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_quiz_statistics IS 'table to cache results from analysis done in statistics report for quizzes.'
	; COMMIT
LOG:  DDL LOCK TRACE: acquiring in mode <ddl_lock> for (bdr (6678401888864649257,1,16384,)) [tracelevel=statement]
STATEMENT:  BEGIN ISOLATION LEVEL SERIALIZABLE;
	CREATE TABLE mdl_workshopform_accumulative (
	    id BIGSERIAL,
	    workshopid BIGINT NOT NULL,
	    sort BIGINT DEFAULT 0,
	    description TEXT,
	    descriptionformat SMALLINT DEFAULT 0,
	    grade BIGINT NOT NULL,
	    weight INTEGER DEFAULT 1,
	CONSTRAINT mdl_workaccu_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_workshopform_accumulative IS 'The assessment dimensions definitions of Accumulative grading strategy forms'
	;
	CREATE INDEX mdl_workaccu_wor_ix ON mdl_workshopform_accumulative (workshopid)
	; COMMIT
LOG:  DDL LOCK TRACE: acquiring in mode <write_lock> (upgrading from <ddl_lock>) for (bdr (6678401888864649257,1,16384,)) [tracelevel=statement]
STATEMENT:  BEGIN ISOLATION LEVEL SERIALIZABLE;
	CREATE TABLE mdl_workshopform_accumulative (
	    id BIGSERIAL,
	    workshopid BIGINT NOT NULL,
	    sort BIGINT DEFAULT 0,
	    description TEXT,
	    descriptionformat SMALLINT DEFAULT 0,
	    grade BIGINT NOT NULL,
	    weight INTEGER DEFAULT 1,
	CONSTRAINT mdl_workaccu_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_workshopform_accumulative IS 'The assessment dimensions definitions of Accumulative grading strategy forms'
	;
	CREATE INDEX mdl_workaccu_wor_ix ON mdl_workshopform_accumulative (workshopid)
	; COMMIT
LOG:  DDL LOCK TRACE: acquiring in mode <ddl_lock> for (bdr (6678401888864649257,1,16384,)) [tracelevel=statement]
STATEMENT:  BEGIN ISOLATION LEVEL SERIALIZABLE;
	CREATE TABLE mdl_workshopform_comments (
	    id BIGSERIAL,
	    workshopid BIGINT NOT NULL,
	    sort BIGINT DEFAULT 0,
	    description TEXT,
	    descriptionformat SMALLINT DEFAULT 0,
	CONSTRAINT mdl_workcomm_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_workshopform_comments IS 'The assessment dimensions definitions of Comments strategy forms'
	;
	CREATE INDEX mdl_workcomm_wor_ix ON mdl_workshopform_comments (workshopid)
	; COMMIT
LOG:  DDL LOCK TRACE: acquiring in mode <write_lock> (upgrading from <ddl_lock>) for (bdr (6678401888864649257,1,16384,)) [tracelevel=statement]
STATEMENT:  BEGIN ISOLATION LEVEL SERIALIZABLE;
	CREATE TABLE mdl_workshopform_comments (
	    id BIGSERIAL,
	    workshopid BIGINT NOT NULL,
	    sort BIGINT DEFAULT 0,
	    description TEXT,
	    descriptionformat SMALLINT DEFAULT 0,
	CONSTRAINT mdl_workcomm_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_workshopform_comments IS 'The assessment dimensions definitions of Comments strategy forms'
	;
	CREATE INDEX mdl_workcomm_wor_ix ON mdl_workshopform_comments (workshopid)
	; COMMIT
LOG:  DDL LOCK TRACE: acquiring in mode <ddl_lock> for (bdr (6678401888864649257,1,16384,)) [tracelevel=statement]
STATEMENT:  BEGIN ISOLATION LEVEL SERIALIZABLE;
	CREATE TABLE mdl_workshopform_numerrors (
	    id BIGSERIAL,
	    workshopid BIGINT NOT NULL,
	    sort BIGINT DEFAULT 0,
	    description TEXT,
	    descriptionformat SMALLINT DEFAULT 0,
	    descriptiontrust BIGINT,
	    grade0 VARCHAR(50),
	    grade1 VARCHAR(50),
	    weight INTEGER DEFAULT 1,
	CONSTRAINT mdl_worknume_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_workshopform_numerrors IS 'The assessment dimensions definitions of Number of errors grading strategy forms'
	;
	CREATE INDEX mdl_worknume_wor_ix ON mdl_workshopform_numerrors (workshopid)
	;
	CREATE TABLE mdl_workshopform_numerrors_map (
	    id BIGSERIAL,
	    workshopid BIGINT NOT NULL,
	    nonegative BIGINT NOT NULL,
	    grade NUMERIC(10,5) NOT NULL,
	CONSTRAINT mdl_worknumemap_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_workshopform_numerrors_map IS 'This maps the number of errors to a percentual grade for submission'
	;
	CREATE INDEX mdl_worknumemap_wor_ix ON mdl_workshopform_numerrors_map (workshopid)
	;
	CREATE UNIQUE INDEX mdl_worknumemap_wornon_uix ON mdl_workshopform_numerrors_map (workshopid, nonegative)
	; COMMIT
LOG:  DDL LOCK TRACE: acquiring in mode <write_lock> (upgrading from <ddl_lock>) for (bdr (6678401888864649257,1,16384,)) [tracelevel=statement]
STATEMENT:  BEGIN ISOLATION LEVEL SERIALIZABLE;
	CREATE TABLE mdl_workshopform_numerrors (
	    id BIGSERIAL,
	    workshopid BIGINT NOT NULL,
	    sort BIGINT DEFAULT 0,
	    description TEXT,
	    descriptionformat SMALLINT DEFAULT 0,
	    descriptiontrust BIGINT,
	    grade0 VARCHAR(50),
	    grade1 VARCHAR(50),
	    weight INTEGER DEFAULT 1,
	CONSTRAINT mdl_worknume_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_workshopform_numerrors IS 'The assessment dimensions definitions of Number of errors grading strategy forms'
	;
	CREATE INDEX mdl_worknume_wor_ix ON mdl_workshopform_numerrors (workshopid)
	;
	CREATE TABLE mdl_workshopform_numerrors_map (
	    id BIGSERIAL,
	    workshopid BIGINT NOT NULL,
	    nonegative BIGINT NOT NULL,
	    grade NUMERIC(10,5) NOT NULL,
	CONSTRAINT mdl_worknumemap_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_workshopform_numerrors_map IS 'This maps the number of errors to a percentual grade for submission'
	;
	CREATE INDEX mdl_worknumemap_wor_ix ON mdl_workshopform_numerrors_map (workshopid)
	;
	CREATE UNIQUE INDEX mdl_worknumemap_wornon_uix ON mdl_workshopform_numerrors_map (workshopid, nonegative)
	; COMMIT
LOG:  DDL LOCK TRACE: acquiring in mode <ddl_lock> for (bdr (6678401888864649257,1,16384,)) [tracelevel=statement]
STATEMENT:  BEGIN ISOLATION LEVEL SERIALIZABLE;
	CREATE TABLE mdl_workshopform_rubric (
	    id BIGSERIAL,
	    workshopid BIGINT NOT NULL,
	    sort BIGINT DEFAULT 0,
	    description TEXT,
	    descriptionformat SMALLINT DEFAULT 0,
	CONSTRAINT mdl_workrubr_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_workshopform_rubric IS 'The assessment dimensions definitions of Rubric grading strategy forms'
	;
	CREATE INDEX mdl_workrubr_wor_ix ON mdl_workshopform_rubric (workshopid)
	;
	CREATE TABLE mdl_workshopform_rubric_levels (
	    id BIGSERIAL,
	    dimensionid BIGINT NOT NULL,
	    grade NUMERIC(10,5) NOT NULL,
	    definition TEXT,
	    definitionformat SMALLINT DEFAULT 0,
	CONSTRAINT mdl_workrubrleve_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_workshopform_rubric_levels IS 'The definition of rubric rating scales'
	;
	CREATE INDEX mdl_workrubrleve_dim_ix ON mdl_workshopform_rubric_levels (dimensionid)
	;
	CREATE TABLE mdl_workshopform_rubric_config (
	    id BIGSERIAL,
	    workshopid BIGINT NOT NULL,
	    layout VARCHAR(30) DEFAULT 'list',
	CONSTRAINT mdl_workrubrconf_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_workshopform_rubric_config IS 'Configuration table for the Rubric grading strategy'
	;
	CREATE UNIQUE INDEX mdl_workrubrconf_wor_uix ON mdl_workshopform_rubric_config (workshopid)
	; COMMIT
LOG:  DDL LOCK TRACE: acquiring in mode <write_lock> (upgrading from <ddl_lock>) for (bdr (6678401888864649257,1,16384,)) [tracelevel=statement]
STATEMENT:  BEGIN ISOLATION LEVEL SERIALIZABLE;
	CREATE TABLE mdl_workshopform_rubric (
	    id BIGSERIAL,
	    workshopid BIGINT NOT NULL,
	    sort BIGINT DEFAULT 0,
	    description TEXT,
	    descriptionformat SMALLINT DEFAULT 0,
	CONSTRAINT mdl_workrubr_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_workshopform_rubric IS 'The assessment dimensions definitions of Rubric grading strategy forms'
	;
	CREATE INDEX mdl_workrubr_wor_ix ON mdl_workshopform_rubric (workshopid)
	;
	CREATE TABLE mdl_workshopform_rubric_levels (
	    id BIGSERIAL,
	    dimensionid BIGINT NOT NULL,
	    grade NUMERIC(10,5) NOT NULL,
	    definition TEXT,
	    definitionformat SMALLINT DEFAULT 0,
	CONSTRAINT mdl_workrubrleve_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_workshopform_rubric_levels IS 'The definition of rubric rating scales'
	;
	CREATE INDEX mdl_workrubrleve_dim_ix ON mdl_workshopform_rubric_levels (dimensionid)
	;
	CREATE TABLE mdl_workshopform_rubric_config (
	    id BIGSERIAL,
	    workshopid BIGINT NOT NULL,
	    layout VARCHAR(30) DEFAULT 'list',
	CONSTRAINT mdl_workrubrconf_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_workshopform_rubric_config IS 'Configuration table for the Rubric grading strategy'
	;
	CREATE UNIQUE INDEX mdl_workrubrconf_wor_uix ON mdl_workshopform_rubric_config (workshopid)
	; COMMIT
LOG:  DDL LOCK TRACE: acquiring in mode <ddl_lock> for (bdr (6678401888864649257,1,16384,)) [tracelevel=statement]
STATEMENT:  BEGIN ISOLATION LEVEL SERIALIZABLE;
	CREATE TABLE mdl_workshopallocation_scheduled (
	    id BIGSERIAL,
	    workshopid BIGINT NOT NULL,
	    enabled SMALLINT NOT NULL DEFAULT 0,
	    submissionend BIGINT NOT NULL,
	    timeallocated BIGINT,
	    settings TEXT,
	    resultstatus BIGINT,
	    resultmessage VARCHAR(1333),
	    resultlog TEXT,
	CONSTRAINT mdl_worksche_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_workshopallocation_scheduled IS 'Stores the allocation settings for the scheduled allocator'
	;
	CREATE UNIQUE INDEX mdl_worksche_wor_uix ON mdl_workshopallocation_scheduled (workshopid)
	; COMMIT
LOG:  DDL LOCK TRACE: acquiring in mode <write_lock> (upgrading from <ddl_lock>) for (bdr (6678401888864649257,1,16384,)) [tracelevel=statement]
STATEMENT:  BEGIN ISOLATION LEVEL SERIALIZABLE;
	CREATE TABLE mdl_workshopallocation_scheduled (
	    id BIGSERIAL,
	    workshopid BIGINT NOT NULL,
	    enabled SMALLINT NOT NULL DEFAULT 0,
	    submissionend BIGINT NOT NULL,
	    timeallocated BIGINT,
	    settings TEXT,
	    resultstatus BIGINT,
	    resultmessage VARCHAR(1333),
	    resultlog TEXT,
	CONSTRAINT mdl_worksche_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_workshopallocation_scheduled IS 'Stores the allocation settings for the scheduled allocator'
	;
	CREATE UNIQUE INDEX mdl_worksche_wor_uix ON mdl_workshopallocation_scheduled (workshopid)
	; COMMIT
LOG:  DDL LOCK TRACE: acquiring in mode <ddl_lock> for (bdr (6678401888864649257,1,16384,)) [tracelevel=statement]
STATEMENT:  BEGIN ISOLATION LEVEL SERIALIZABLE;
	CREATE TABLE mdl_workshopeval_best_settings (
	    id BIGSERIAL,
	    workshopid BIGINT NOT NULL,
	    comparison SMALLINT DEFAULT 5,
	CONSTRAINT mdl_workbestsett_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_workshopeval_best_settings IS 'Settings for the grading evaluation subplugin Comparison with the best assessment.'
	;
	CREATE UNIQUE INDEX mdl_workbestsett_wor_uix ON mdl_workshopeval_best_settings (workshopid)
	; COMMIT
LOG:  DDL LOCK TRACE: acquiring in mode <write_lock> (upgrading from <ddl_lock>) for (bdr (6678401888864649257,1,16384,)) [tracelevel=statement]
STATEMENT:  BEGIN ISOLATION LEVEL SERIALIZABLE;
	CREATE TABLE mdl_workshopeval_best_settings (
	    id BIGSERIAL,
	    workshopid BIGINT NOT NULL,
	    comparison SMALLINT DEFAULT 5,
	CONSTRAINT mdl_workbestsett_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_workshopeval_best_settings IS 'Settings for the grading evaluation subplugin Comparison with the best assessment.'
	;
	CREATE UNIQUE INDEX mdl_workbestsett_wor_uix ON mdl_workshopeval_best_settings (workshopid)
	; COMMIT
LOG:  DDL LOCK TRACE: acquiring in mode <ddl_lock> for (bdr (6678401888864649257,1,16384,)) [tracelevel=statement]
STATEMENT:  BEGIN ISOLATION LEVEL SERIALIZABLE;
	CREATE TABLE mdl_logstore_standard_log (
	    id BIGSERIAL,
	    eventname VARCHAR(255) NOT NULL DEFAULT '',
	    component VARCHAR(100) NOT NULL DEFAULT '',
	    action VARCHAR(100) NOT NULL DEFAULT '',
	    target VARCHAR(100) NOT NULL DEFAULT '',
	    objecttable VARCHAR(50),
	    objectid BIGINT,
	    crud VARCHAR(1) NOT NULL DEFAULT '',
	    edulevel SMALLINT NOT NULL,
	    contextid BIGINT NOT NULL,
	    contextlevel BIGINT NOT NULL,
	    contextinstanceid BIGINT NOT NULL,
	    userid BIGINT NOT NULL,
	    courseid BIGINT,
	    relateduserid BIGINT,
	    anonymous SMALLINT NOT NULL DEFAULT 0,
	    other TEXT,
	    timecreated BIGINT NOT NULL,
	    origin VARCHAR(10),
	    ip VARCHAR(45),
	    realuserid BIGINT,
	CONSTRAINT mdl_logsstanlog_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_logstore_standard_log IS 'Standard log table'
	;
	CREATE INDEX mdl_logsstanlog_tim_ix ON mdl_logstore_standard_log (timecreated)
	;
	CREATE INDEX mdl_logsstanlog_couanotim_ix ON mdl_logstore_standard_log (courseid, anonymous, timecreated)
	;
	CREATE INDEX mdl_logsstanlog_useconconcr_ix ON mdl_logstore_standard_log (userid, contextlevel, contextinstanceid, crud, edulevel, timecreated)
	;
	CREATE INDEX mdl_logsstanlog_con_ix ON mdl_logstore_standard_log (contextid)
	; COMMIT
LOG:  DDL LOCK TRACE: acquiring in mode <write_lock> (upgrading from <ddl_lock>) for (bdr (6678401888864649257,1,16384,)) [tracelevel=statement]
STATEMENT:  BEGIN ISOLATION LEVEL SERIALIZABLE;
	CREATE TABLE mdl_logstore_standard_log (
	    id BIGSERIAL,
	    eventname VARCHAR(255) NOT NULL DEFAULT '',
	    component VARCHAR(100) NOT NULL DEFAULT '',
	    action VARCHAR(100) NOT NULL DEFAULT '',
	    target VARCHAR(100) NOT NULL DEFAULT '',
	    objecttable VARCHAR(50),
	    objectid BIGINT,
	    crud VARCHAR(1) NOT NULL DEFAULT '',
	    edulevel SMALLINT NOT NULL,
	    contextid BIGINT NOT NULL,
	    contextlevel BIGINT NOT NULL,
	    contextinstanceid BIGINT NOT NULL,
	    userid BIGINT NOT NULL,
	    courseid BIGINT,
	    relateduserid BIGINT,
	    anonymous SMALLINT NOT NULL DEFAULT 0,
	    other TEXT,
	    timecreated BIGINT NOT NULL,
	    origin VARCHAR(10),
	    ip VARCHAR(45),
	    realuserid BIGINT,
	CONSTRAINT mdl_logsstanlog_id_pk PRIMARY KEY (id)
	)
	;
	COMMENT ON TABLE mdl_logstore_standard_log IS 'Standard log table'
	;
	CREATE INDEX mdl_logsstanlog_tim_ix ON mdl_logstore_standard_log (timecreated)
	;
	CREATE INDEX mdl_logsstanlog_couanotim_ix ON mdl_logstore_standard_log (courseid, anonymous, timecreated)
	;
	CREATE INDEX mdl_logsstanlog_useconconcr_ix ON mdl_logstore_standard_log (userid, contextlevel, contextinstanceid, crud, edulevel, timecreated)
	;
	CREATE INDEX mdl_logsstanlog_con_ix ON mdl_logstore_standard_log (contextid)
	; COMMIT
LOG:  received fast shutdown request
LOG:  aborting any active transactions
FATAL:  terminating connection due to administrator command
CONTEXT:  SQL statement "SELECT node_status FROM bdr.bdr_nodes WHERE node_sysid = $1 AND node_timeline = $2 AND node_dboid = $3"
LOG:  unexpected EOF on standby connection
LOG:  worker process: bdr db: moodle (PID 58) exited with exit code 1
LOG:  autovacuum launcher shutting down
FATAL:  terminating connection due to administrator command at character 205
QUERY:  SELECT DISTINCT ON (conn_sysid, conn_timeline, conn_dboid)   conn_sysid, conn_timeline, conn_dboid,   conn_dsn, conn_apply_delay,   conn_replication_sets,   conn_origin_dboid <> 0 AS origin_is_my_id FROM bdr.bdr_connections INNER JOIN bdr.bdr_nodes   ON (conn_sysid = node_sysid AND       conn_timeline = node_timeline AND       conn_dboid = node_dboid) WHERE (conn_origin_sysid = '0'   AND  conn_origin_timeline = 0   AND  conn_origin_dboid = 0)    OR (conn_origin_sysid = $1   AND  conn_origin_timeline = $2   AND  conn_origin_dboid = $3)   AND node_status <> 'k'   AND NOT conn_is_unidirectional ORDER BY conn_sysid, conn_timeline, conn_dboid,          conn_origin_sysid ASC NULLS LAST,          conn_timeline ASC NULLS LAST,          conn_dboid ASC NULLS LAST 
LOG:  worker process: bdr (6678401888864649257,1,16384,)->bdr (6678401892023767080,1, (PID 70) exited with exit code 1
FATAL:  terminating connection due to administrator command
LOG:  worker process: bdr supervisor (PID 37) exited with exit code 1
LOG:  shutting down
LOG:  database system is shut down
